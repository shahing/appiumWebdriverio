{"version":3,"file":"lockmgmt.js","names":["lockManagementMethods","CREDENTIAL_CANNOT_BE_NULL_OR_EMPTY_ERROR","CREDENTIAL_DID_NOT_MATCH_ERROR","SUPPORTED_LOCK_CREDENTIAL_TYPES","KEYCODE_POWER","KEYCODE_WAKEUP","HIDE_KEYBOARD_WAIT_TIME","buildCommand","verb","oldCredential","args","cmd","_","isEmpty","push","swipeUp","adb","output","shell","dimensionsMatch","exec","Error","displayWidth","parseInt","displayHeight","x0","y0","x1","y1","map","c","Math","trunc","isLockManagementSupported","isBoolean","_isLockManagementSupported","passFlag","ign","includes","log","debug","verifyLockCredential","credential","stdout","stderr","outputFormat","EXEC_OUTPUT_FORMAT","FULL","some","x","e","message","clearLockCredential","isLockEnabled","test","setLockCredential","credentialType","isInteger","isScreenLocked","process","env","APPIUM_LOG_DUMPSYS","dumpsysFile","path","resolve","cwd","fs","writeFile","isShowingLockscreen","isCurrentFocusOnKeyguard","isScreenOnFully","dismissKeyguard","info","cycleWakeUp","getApiLevel","hideKeyboard","B","delay","back","keyevent"],"sources":["../../../lib/tools/lockmgmt.js"],"sourcesContent":["import log from '../logger.js';\nimport path from 'path';\nimport _ from 'lodash';\nimport { fs } from '@appium/support';\nimport {\n  isShowingLockscreen, isCurrentFocusOnKeyguard, isScreenOnFully,\n} from '../helpers.js';\nimport B from 'bluebird';\n\nconst lockManagementMethods = {};\n\nconst CREDENTIAL_CANNOT_BE_NULL_OR_EMPTY_ERROR = `Credential can't be null or empty`;\nconst CREDENTIAL_DID_NOT_MATCH_ERROR = `didn't match`;\nconst SUPPORTED_LOCK_CREDENTIAL_TYPES = ['password', 'pin', 'pattern'];\nconst KEYCODE_POWER = 26;\nconst KEYCODE_WAKEUP = 224; // works over API Level 20\nconst HIDE_KEYBOARD_WAIT_TIME = 100;\n\nfunction buildCommand (verb, oldCredential = null, ...args) {\n  const cmd = ['locksettings', verb];\n  if (!_.isEmpty(oldCredential)) {\n    cmd.push('--old', oldCredential);\n  }\n  if (!_.isEmpty(args)) {\n    cmd.push(...args);\n  }\n  return cmd;\n}\n\nasync function swipeUp (adb) {\n  const output = await adb.shell(['dumpsys', 'window']);\n  const dimensionsMatch = /init=(\\d+)x(\\d+)/.exec(output);\n  if (!dimensionsMatch) {\n    throw new Error('Cannot retrieve the display size');\n  }\n  const displayWidth = parseInt(dimensionsMatch[1], 10);\n  const displayHeight = parseInt(dimensionsMatch[2], 10);\n  const x0 = displayWidth / 2;\n  const y0 = displayHeight / 5 * 4;\n  const x1 = x0;\n  const y1 = displayHeight / 5;\n  await adb.shell([\n    'input', 'touchscreen', 'swipe',\n    ...([x0, y0, x1, y1].map((c) => Math.trunc(c)))\n  ]);\n}\n\n/**\n * Check whether the device supports lock settings management with `locksettings`\n * command line tool. This tool has been added to Android toolset since  API 27 Oreo\n *\n * @return {boolean} True if the management is supported. The result is cached per ADB instance\n */\nlockManagementMethods.isLockManagementSupported = async function isLockManagementSupported () {\n  if (!_.isBoolean(this._isLockManagementSupported)) {\n    const passFlag = '__PASS__';\n    let output = '';\n    try {\n      output = await this.shell([`locksettings help && echo ${passFlag}`]);\n    } catch (ign) {}\n    this._isLockManagementSupported = _.includes(output, passFlag);\n    log.debug(`Extended lock settings management is ` +\n      `${this._isLockManagementSupported ? '' : 'not '}supported`);\n  }\n  return this._isLockManagementSupported;\n};\n\n/**\n * Check whether the given credential is matches to the currently set one.\n *\n * @param {?string} credential [null] The credential value. It could be either\n * pin, password or a pattern. A pattern is specified by a non-separated list\n * of numbers that index the cell on the pattern in a 1-based manner in left\n * to right and top to bottom order, i.e. the top-left cell is indexed with 1,\n * whereas the bottom-right cell is indexed with 9. Example: 1234.\n * null/empty value assumes the device has no lock currently set.\n * @return {boolean} True if the given credential matches to the device's one\n * @throws {Error} If the verification faces an unexpected error\n */\nlockManagementMethods.verifyLockCredential = async function verifyLockCredential (credential = null) {\n  try {\n    const {stdout, stderr} = await this.shell(buildCommand('verify', credential), {\n      outputFormat: this.EXEC_OUTPUT_FORMAT.FULL\n    });\n    if (_.includes(stdout, 'verified successfully')) {\n      return true;\n    }\n    if ([`didn't match`, CREDENTIAL_CANNOT_BE_NULL_OR_EMPTY_ERROR]\n        .some((x) => _.includes(stderr || stdout, x))) {\n      return false;\n    }\n    throw new Error(stderr || stdout);\n  } catch (e) {\n    throw new Error(`Device lock credential verification failed. ` +\n      `Original error: ${e.stderr || e.stdout || e.message}`);\n  }\n};\n\n/**\n * Clears current lock credentials. Usually it takes several seconds for a device to\n * sync the credential state after this method returns.\n *\n * @param {?string} credential [null] The credential value. It could be either\n * pin, password or a pattern. A pattern is specified by a non-separated list\n * of numbers that index the cell on the pattern in a 1-based manner in left\n * to right and top to bottom order, i.e. the top-left cell is indexed with 1,\n * whereas the bottom-right cell is indexed with 9. Example: 1234.\n * null/empty value assumes the device has no lock currently set.\n * @throws {Error} If operation faces an unexpected error\n */\nlockManagementMethods.clearLockCredential = async function clearLockCredential (credential = null) {\n  try {\n    const {stdout, stderr} = await this.shell(buildCommand('clear', credential), {\n      outputFormat: this.EXEC_OUTPUT_FORMAT.FULL\n    });\n    if (!['user has no password', 'Lock credential cleared']\n        .some((x) => _.includes(stderr || stdout, x))) {\n      throw new Error(stderr || stdout);\n    }\n  } catch (e) {\n    throw new Error(`Cannot clear device lock credential. ` +\n      `Original error: ${e.stderr || e.stdout || e.message}`);\n  }\n};\n\n/**\n * Checks whether the device is locked with a credential (either pin or a password\n * or a pattern).\n *\n * @returns {boolean} `true` if the device is locked\n * @throws {Error} If operation faces an unexpected error\n */\nlockManagementMethods.isLockEnabled = async function isLockEnabled () {\n  try {\n    const {stdout, stderr} = await this.shell(buildCommand('get-disabled'), {\n      outputFormat: this.EXEC_OUTPUT_FORMAT.FULL\n    });\n    if (/\\bfalse\\b/.test(stdout)\n        || [CREDENTIAL_DID_NOT_MATCH_ERROR, CREDENTIAL_CANNOT_BE_NULL_OR_EMPTY_ERROR].some(\n          (x) => _.includes(stderr || stdout, x))) {\n      return true;\n    }\n    if (/\\btrue\\b/.test(stdout)) {\n      return false;\n    }\n    throw new Error(stderr || stdout);\n  } catch (e) {\n    throw new Error(`Cannot check if device lock is enabled. Original error: ${e.message}`);\n  }\n};\n\n/**\n * Sets the device lock.\n *\n * @param {!string} credentialType One of: password, pin, pattern.\n * @param {!string} credential A non-empty credential value to be set.\n * Make sure your new credential matches to the actual system security requirements,\n * e.g. a minimum password length. A pattern is specified by a non-separated list\n * of numbers that index the cell on the pattern in a 1-based manner in left\n * to right and top to bottom order, i.e. the top-left cell is indexed with 1,\n * whereas the bottom-right cell is indexed with 9. Example: 1234.\n * @param {?string} oldCredential [null] An old credential string.\n * It is only required to be set in case you need to change the current\n * credential rather than to set a new one. Setting it to a wrong value will\n * make this method to fail and throw an exception.\n * @throws {Error} If there was a failure while verifying input arguments or setting\n * the credential\n */\nlockManagementMethods.setLockCredential = async function setLockCredential (\n  credentialType, credential, oldCredential = null) {\n  if (!SUPPORTED_LOCK_CREDENTIAL_TYPES.includes(credentialType)) {\n    throw new Error(`Device lock credential type '${credentialType}' is unknown. ` +\n      `Only the following credential types are supported: ${SUPPORTED_LOCK_CREDENTIAL_TYPES}`);\n  }\n  if (_.isEmpty(credential) && !_.isInteger(credential)) {\n    throw new Error('Device lock credential cannot be empty');\n  }\n  const cmd = buildCommand(`set-${credentialType}`, oldCredential, credential);\n  try {\n    const {stdout, stderr} = await this.shell(cmd, {\n      outputFormat: this.EXEC_OUTPUT_FORMAT.FULL\n    });\n    if (!_.includes(stdout, 'set to')) {\n      throw new Error(stderr || stdout);\n    }\n  } catch (e) {\n    throw new Error(`Setting of device lock ${credentialType} credential failed. ` +\n      `Original error: ${e.stderr || e.stdout || e.message}`);\n  }\n};\n\n/**\n * Retrieve the screen lock state of the device under test.\n *\n * @return {boolean} True if the device is locked.\n */\nlockManagementMethods.isScreenLocked = async function isScreenLocked () {\n  const stdout = await this.shell(['dumpsys', 'window']);\n  if (process.env.APPIUM_LOG_DUMPSYS) {\n    // optional debugging\n    // if the method is not working, turn it on and send us the output\n    const dumpsysFile = path.resolve(process.cwd(), 'dumpsys.log');\n    log.debug(`Writing dumpsys output to ${dumpsysFile}`);\n    await fs.writeFile(dumpsysFile, stdout);\n  }\n  return isShowingLockscreen(stdout) || isCurrentFocusOnKeyguard(stdout) || !isScreenOnFully(stdout);\n};\n\n/**\n * Dismisses keyguard overlay.\n */\nlockManagementMethods.dismissKeyguard = async function dismissKeyguard () {\n  log.info('Waking up the device to dismiss the keyguard');\n  // Screen off once to force pre-inputted text field clean after wake-up\n  // Just screen on if the screen defaults off\n  await this.cycleWakeUp();\n\n  if (await this.getApiLevel() > 21) {\n    await this.shell(['wm', 'dismiss-keyguard']);\n    return;\n  }\n\n  const stdout = await this.shell(['dumpsys', 'window', 'windows']);\n  if (!isCurrentFocusOnKeyguard(stdout)) {\n    log.debug('The keyguard seems to be inactive');\n    return;\n  }\n\n  log.debug('Swiping up to dismiss the keyguard');\n  if (await this.hideKeyboard()) {\n    await B.delay(HIDE_KEYBOARD_WAIT_TIME);\n  }\n  log.debug('Dismissing notifications from the unlock view');\n  await this.shell(['service', 'call', 'notification', '1']);\n  await this.back();\n  await swipeUp(this);\n};\n\n/**\n * Presses the corresponding key combination to make sure the device's screen\n * is not turned off and is locked if the latter is enabled.\n */\nlockManagementMethods.cycleWakeUp = async function cycleWakeUp () {\n  await this.keyevent(KEYCODE_POWER);\n  await this.keyevent(KEYCODE_WAKEUP);\n};\n\nexport default lockManagementMethods;\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;AAEA,MAAMA,qBAAqB,GAAG,CAAC,CAAC;AAEhC,MAAMC,wCAAwC,GAAI,mCAAkC;AACpF,MAAMC,8BAA8B,GAAI,cAAa;AACrD,MAAMC,+BAA+B,GAAG,CAAC,UAAU,EAAE,KAAK,EAAE,SAAS,CAAC;AACtE,MAAMC,aAAa,GAAG,EAAE;AACxB,MAAMC,cAAc,GAAG,GAAG;AAC1B,MAAMC,uBAAuB,GAAG,GAAG;AAEnC,SAASC,YAAY,CAAEC,IAAI,EAAEC,aAAa,GAAG,IAAI,EAAE,GAAGC,IAAI,EAAE;EAC1D,MAAMC,GAAG,GAAG,CAAC,cAAc,EAAEH,IAAI,CAAC;EAClC,IAAI,CAACI,eAAC,CAACC,OAAO,CAACJ,aAAa,CAAC,EAAE;IAC7BE,GAAG,CAACG,IAAI,CAAC,OAAO,EAAEL,aAAa,CAAC;EAClC;EACA,IAAI,CAACG,eAAC,CAACC,OAAO,CAACH,IAAI,CAAC,EAAE;IACpBC,GAAG,CAACG,IAAI,CAAC,GAAGJ,IAAI,CAAC;EACnB;EACA,OAAOC,GAAG;AACZ;AAEA,eAAeI,OAAO,CAAEC,GAAG,EAAE;EAC3B,MAAMC,MAAM,GAAG,MAAMD,GAAG,CAACE,KAAK,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;EACrD,MAAMC,eAAe,GAAG,kBAAkB,CAACC,IAAI,CAACH,MAAM,CAAC;EACvD,IAAI,CAACE,eAAe,EAAE;IACpB,MAAM,IAAIE,KAAK,CAAC,kCAAkC,CAAC;EACrD;EACA,MAAMC,YAAY,GAAGC,QAAQ,CAACJ,eAAe,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EACrD,MAAMK,aAAa,GAAGD,QAAQ,CAACJ,eAAe,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;EACtD,MAAMM,EAAE,GAAGH,YAAY,GAAG,CAAC;EAC3B,MAAMI,EAAE,GAAGF,aAAa,GAAG,CAAC,GAAG,CAAC;EAChC,MAAMG,EAAE,GAAGF,EAAE;EACb,MAAMG,EAAE,GAAGJ,aAAa,GAAG,CAAC;EAC5B,MAAMR,GAAG,CAACE,KAAK,CAAC,CACd,OAAO,EAAE,aAAa,EAAE,OAAO,EAC/B,GAAI,CAACO,EAAE,EAAEC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKC,IAAI,CAACC,KAAK,CAACF,CAAC,CAAC,CAAE,CAChD,CAAC;AACJ;AAQA9B,qBAAqB,CAACiC,yBAAyB,GAAG,eAAeA,yBAAyB,GAAI;EAC5F,IAAI,CAACrB,eAAC,CAACsB,SAAS,CAAC,IAAI,CAACC,0BAA0B,CAAC,EAAE;IACjD,MAAMC,QAAQ,GAAG,UAAU;IAC3B,IAAInB,MAAM,GAAG,EAAE;IACf,IAAI;MACFA,MAAM,GAAG,MAAM,IAAI,CAACC,KAAK,CAAC,CAAE,6BAA4BkB,QAAS,EAAC,CAAC,CAAC;IACtE,CAAC,CAAC,OAAOC,GAAG,EAAE,CAAC;IACf,IAAI,CAACF,0BAA0B,GAAGvB,eAAC,CAAC0B,QAAQ,CAACrB,MAAM,EAAEmB,QAAQ,CAAC;IAC9DG,eAAG,CAACC,KAAK,CAAE,uCAAsC,GAC9C,GAAE,IAAI,CAACL,0BAA0B,GAAG,EAAE,GAAG,MAAO,WAAU,CAAC;EAChE;EACA,OAAO,IAAI,CAACA,0BAA0B;AACxC,CAAC;AAcDnC,qBAAqB,CAACyC,oBAAoB,GAAG,eAAeA,oBAAoB,CAAEC,UAAU,GAAG,IAAI,EAAE;EACnG,IAAI;IACF,MAAM;MAACC,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAM,IAAI,CAAC1B,KAAK,CAACX,YAAY,CAAC,QAAQ,EAAEmC,UAAU,CAAC,EAAE;MAC5EG,YAAY,EAAE,IAAI,CAACC,kBAAkB,CAACC;IACxC,CAAC,CAAC;IACF,IAAInC,eAAC,CAAC0B,QAAQ,CAACK,MAAM,EAAE,uBAAuB,CAAC,EAAE;MAC/C,OAAO,IAAI;IACb;IACA,IAAI,CAAE,cAAa,EAAE1C,wCAAwC,CAAC,CACzD+C,IAAI,CAAEC,CAAC,IAAKrC,eAAC,CAAC0B,QAAQ,CAACM,MAAM,IAAID,MAAM,EAAEM,CAAC,CAAC,CAAC,EAAE;MACjD,OAAO,KAAK;IACd;IACA,MAAM,IAAI5B,KAAK,CAACuB,MAAM,IAAID,MAAM,CAAC;EACnC,CAAC,CAAC,OAAOO,CAAC,EAAE;IACV,MAAM,IAAI7B,KAAK,CAAE,8CAA6C,GAC3D,mBAAkB6B,CAAC,CAACN,MAAM,IAAIM,CAAC,CAACP,MAAM,IAAIO,CAAC,CAACC,OAAQ,EAAC,CAAC;EAC3D;AACF,CAAC;AAcDnD,qBAAqB,CAACoD,mBAAmB,GAAG,eAAeA,mBAAmB,CAAEV,UAAU,GAAG,IAAI,EAAE;EACjG,IAAI;IACF,MAAM;MAACC,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAM,IAAI,CAAC1B,KAAK,CAACX,YAAY,CAAC,OAAO,EAAEmC,UAAU,CAAC,EAAE;MAC3EG,YAAY,EAAE,IAAI,CAACC,kBAAkB,CAACC;IACxC,CAAC,CAAC;IACF,IAAI,CAAC,CAAC,sBAAsB,EAAE,yBAAyB,CAAC,CACnDC,IAAI,CAAEC,CAAC,IAAKrC,eAAC,CAAC0B,QAAQ,CAACM,MAAM,IAAID,MAAM,EAAEM,CAAC,CAAC,CAAC,EAAE;MACjD,MAAM,IAAI5B,KAAK,CAACuB,MAAM,IAAID,MAAM,CAAC;IACnC;EACF,CAAC,CAAC,OAAOO,CAAC,EAAE;IACV,MAAM,IAAI7B,KAAK,CAAE,uCAAsC,GACpD,mBAAkB6B,CAAC,CAACN,MAAM,IAAIM,CAAC,CAACP,MAAM,IAAIO,CAAC,CAACC,OAAQ,EAAC,CAAC;EAC3D;AACF,CAAC;AASDnD,qBAAqB,CAACqD,aAAa,GAAG,eAAeA,aAAa,GAAI;EACpE,IAAI;IACF,MAAM;MAACV,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAM,IAAI,CAAC1B,KAAK,CAACX,YAAY,CAAC,cAAc,CAAC,EAAE;MACtEsC,YAAY,EAAE,IAAI,CAACC,kBAAkB,CAACC;IACxC,CAAC,CAAC;IACF,IAAI,WAAW,CAACO,IAAI,CAACX,MAAM,CAAC,IACrB,CAACzC,8BAA8B,EAAED,wCAAwC,CAAC,CAAC+C,IAAI,CAC/EC,CAAC,IAAKrC,eAAC,CAAC0B,QAAQ,CAACM,MAAM,IAAID,MAAM,EAAEM,CAAC,CAAC,CAAC,EAAE;MAC7C,OAAO,IAAI;IACb;IACA,IAAI,UAAU,CAACK,IAAI,CAACX,MAAM,CAAC,EAAE;MAC3B,OAAO,KAAK;IACd;IACA,MAAM,IAAItB,KAAK,CAACuB,MAAM,IAAID,MAAM,CAAC;EACnC,CAAC,CAAC,OAAOO,CAAC,EAAE;IACV,MAAM,IAAI7B,KAAK,CAAE,2DAA0D6B,CAAC,CAACC,OAAQ,EAAC,CAAC;EACzF;AACF,CAAC;AAmBDnD,qBAAqB,CAACuD,iBAAiB,GAAG,eAAeA,iBAAiB,CACxEC,cAAc,EAAEd,UAAU,EAAEjC,aAAa,GAAG,IAAI,EAAE;EAClD,IAAI,CAACN,+BAA+B,CAACmC,QAAQ,CAACkB,cAAc,CAAC,EAAE;IAC7D,MAAM,IAAInC,KAAK,CAAE,gCAA+BmC,cAAe,gBAAe,GAC3E,sDAAqDrD,+BAAgC,EAAC,CAAC;EAC5F;EACA,IAAIS,eAAC,CAACC,OAAO,CAAC6B,UAAU,CAAC,IAAI,CAAC9B,eAAC,CAAC6C,SAAS,CAACf,UAAU,CAAC,EAAE;IACrD,MAAM,IAAIrB,KAAK,CAAC,wCAAwC,CAAC;EAC3D;EACA,MAAMV,GAAG,GAAGJ,YAAY,CAAE,OAAMiD,cAAe,EAAC,EAAE/C,aAAa,EAAEiC,UAAU,CAAC;EAC5E,IAAI;IACF,MAAM;MAACC,MAAM;MAAEC;IAAM,CAAC,GAAG,MAAM,IAAI,CAAC1B,KAAK,CAACP,GAAG,EAAE;MAC7CkC,YAAY,EAAE,IAAI,CAACC,kBAAkB,CAACC;IACxC,CAAC,CAAC;IACF,IAAI,CAACnC,eAAC,CAAC0B,QAAQ,CAACK,MAAM,EAAE,QAAQ,CAAC,EAAE;MACjC,MAAM,IAAItB,KAAK,CAACuB,MAAM,IAAID,MAAM,CAAC;IACnC;EACF,CAAC,CAAC,OAAOO,CAAC,EAAE;IACV,MAAM,IAAI7B,KAAK,CAAE,0BAAyBmC,cAAe,sBAAqB,GAC3E,mBAAkBN,CAAC,CAACN,MAAM,IAAIM,CAAC,CAACP,MAAM,IAAIO,CAAC,CAACC,OAAQ,EAAC,CAAC;EAC3D;AACF,CAAC;AAODnD,qBAAqB,CAAC0D,cAAc,GAAG,eAAeA,cAAc,GAAI;EACtE,MAAMf,MAAM,GAAG,MAAM,IAAI,CAACzB,KAAK,CAAC,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;EACtD,IAAIyC,OAAO,CAACC,GAAG,CAACC,kBAAkB,EAAE;IAGlC,MAAMC,WAAW,GAAGC,aAAI,CAACC,OAAO,CAACL,OAAO,CAACM,GAAG,EAAE,EAAE,aAAa,CAAC;IAC9D1B,eAAG,CAACC,KAAK,CAAE,6BAA4BsB,WAAY,EAAC,CAAC;IACrD,MAAMI,WAAE,CAACC,SAAS,CAACL,WAAW,EAAEnB,MAAM,CAAC;EACzC;EACA,OAAO,IAAAyB,4BAAmB,EAACzB,MAAM,CAAC,IAAI,IAAA0B,iCAAwB,EAAC1B,MAAM,CAAC,IAAI,CAAC,IAAA2B,wBAAe,EAAC3B,MAAM,CAAC;AACpG,CAAC;AAKD3C,qBAAqB,CAACuE,eAAe,GAAG,eAAeA,eAAe,GAAI;EACxEhC,eAAG,CAACiC,IAAI,CAAC,8CAA8C,CAAC;EAGxD,MAAM,IAAI,CAACC,WAAW,EAAE;EAExB,IAAI,OAAM,IAAI,CAACC,WAAW,EAAE,IAAG,EAAE,EAAE;IACjC,MAAM,IAAI,CAACxD,KAAK,CAAC,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;IAC5C;EACF;EAEA,MAAMyB,MAAM,GAAG,MAAM,IAAI,CAACzB,KAAK,CAAC,CAAC,SAAS,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;EACjE,IAAI,CAAC,IAAAmD,iCAAwB,EAAC1B,MAAM,CAAC,EAAE;IACrCJ,eAAG,CAACC,KAAK,CAAC,mCAAmC,CAAC;IAC9C;EACF;EAEAD,eAAG,CAACC,KAAK,CAAC,oCAAoC,CAAC;EAC/C,IAAI,MAAM,IAAI,CAACmC,YAAY,EAAE,EAAE;IAC7B,MAAMC,iBAAC,CAACC,KAAK,CAACvE,uBAAuB,CAAC;EACxC;EACAiC,eAAG,CAACC,KAAK,CAAC,+CAA+C,CAAC;EAC1D,MAAM,IAAI,CAACtB,KAAK,CAAC,CAAC,SAAS,EAAE,MAAM,EAAE,cAAc,EAAE,GAAG,CAAC,CAAC;EAC1D,MAAM,IAAI,CAAC4D,IAAI,EAAE;EACjB,MAAM/D,OAAO,CAAC,IAAI,CAAC;AACrB,CAAC;AAMDf,qBAAqB,CAACyE,WAAW,GAAG,eAAeA,WAAW,GAAI;EAChE,MAAM,IAAI,CAACM,QAAQ,CAAC3E,aAAa,CAAC;EAClC,MAAM,IAAI,CAAC2E,QAAQ,CAAC1E,cAAc,CAAC;AACrC,CAAC;AAAC,eAEaL,qBAAqB;AAAA"}