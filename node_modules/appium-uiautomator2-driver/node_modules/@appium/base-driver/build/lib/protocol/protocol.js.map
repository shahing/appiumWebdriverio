{"version":3,"file":"protocol.js","names":["CREATE_SESSION_COMMAND","DELETE_SESSION_COMMAND","GET_STATUS_COMMAND","determineProtocol","createSessionArgs","_","some","isW3cCaps","PROTOCOLS","W3C","MJSONWP","extractProtocol","driver","sessionId","dstDriver","isFunction","driverForSession","protocol","isSessionCommand","command","includes","NO_SESSION_ID_COMMANDS","getLogger","log","info","logPrefix","constructor","name","node","getObjectId","substring","logger","wrapParams","paramSets","jsonObj","res","isArray","isObject","wrap","unwrapParams","unwrap","checkParams","requiredParams","optionalParams","receivedParams","keys","required","first","optional","validate","message","errors","BadParametersError","length","indexOf","push","params","difference","makeArgs","requestParams","payloadParams","urlParams","reverse","without","args","flatten","map","p","concat","u","routeConfiguringFunction","sessionExists","Error","executeCommand","execute","addRoutes","app","basePath","DEFAULT_BASE_PATH","extraMethodMap","allMethods","METHOD_MAP","path","methods","toPairs","method","spec","buildHandler","isSessCmd","asyncHandler","req","body","httpResBody","httpStatus","newSessionId","currentProtocol","NoSuchDriverError","didPluginOverrideProxy","neverProxy","driverShouldDoJwpProxy","pluginsToHandleCmd","doJwpProxy","debug","NotImplementedError","driverRes","validators","truncate","JSON","stringify","MAX_LOG_BODY_LENGTH","reqForProxy","isPlainObject","has","error","value","capabilities","formatResponseValue","util","hasValue","status","isNaN","parseInt","errorFromMJSONWPStatusCode","errorFromW3CJsonCode","stacktrace","err","actualErr","errMsg","stack","isErrorType","ProxyRequestError","getActualError","getResponseForW3CError","isString","send","formatStatus","json","toLowerCase","B","resolve","done","proxyActive","proxyRouteIsAvoided","originalUrl","canProxy"],"sources":["../../../lib/protocol/protocol.js"],"sourcesContent":["import _ from 'lodash';\nimport {util, logger, node} from '@appium/support';\nimport {validators} from './validators';\nimport {\n  errors,\n  isErrorType,\n  getResponseForW3CError,\n  errorFromMJSONWPStatusCode,\n  errorFromW3CJsonCode,\n} from './errors';\nimport {METHOD_MAP, NO_SESSION_ID_COMMANDS} from './routes';\nimport B from 'bluebird';\nimport {formatResponseValue, formatStatus} from './helpers';\nimport {MAX_LOG_BODY_LENGTH, PROTOCOLS, DEFAULT_BASE_PATH} from '../constants';\nimport {isW3cCaps} from '../helpers/capabilities';\n\nconst CREATE_SESSION_COMMAND = 'createSession';\nconst DELETE_SESSION_COMMAND = 'deleteSession';\nconst GET_STATUS_COMMAND = 'getStatus';\n\nfunction determineProtocol(createSessionArgs) {\n  return _.some(createSessionArgs, isW3cCaps) ? PROTOCOLS.W3C : PROTOCOLS.MJSONWP;\n}\n\nfunction extractProtocol(driver, sessionId = null) {\n  const dstDriver = _.isFunction(driver.driverForSession)\n    ? driver.driverForSession(sessionId)\n    : driver;\n  if (dstDriver === driver) {\n    // Shortcircuit if the driver instance is not an umbrella driver\n    // or it is Fake driver instance, where `driver.driverForSession`\n    // always returns self instance\n    return driver.protocol;\n  }\n\n  // Extract the protocol for the current session if the given driver is the umbrella one\n  return dstDriver?.protocol ?? PROTOCOLS.W3C;\n}\n\nfunction isSessionCommand(command) {\n  return !_.includes(NO_SESSION_ID_COMMANDS, command);\n}\n\n/**\n *\n * @param {import('@appium/types').ExternalDriver} driver\n * @param {string?} [sessionId]\n * @returns {import('@appium/types').AppiumLogger}\n */\nfunction getLogger(driver, sessionId = null) {\n  const dstDriver =\n    sessionId && _.isFunction(driver.driverForSession)\n      ? driver.driverForSession(sessionId) ?? driver\n      : driver;\n  if (_.isFunction(dstDriver.log?.info)) {\n    return dstDriver.log;\n  }\n\n  let logPrefix = dstDriver.constructor\n    ? `${dstDriver.constructor.name}@${node.getObjectId(dstDriver).substring(0, 8)}`\n    : 'AppiumDriver';\n  if (sessionId) {\n    logPrefix += ` (${sessionId.substring(0, 8)})`;\n  }\n  return logger.getLogger(logPrefix);\n}\n\nfunction wrapParams(paramSets, jsonObj) {\n  /* There are commands like performTouch which take a single parameter (primitive type or array).\n   * Some drivers choose to pass this parameter as a value (eg. [action1, action2...]) while others to\n   * wrap it within an object(eg' {gesture:  [action1, action2...]}), which makes it hard to validate.\n   * The wrap option in the spec enforce wrapping before validation, so that all params are wrapped at\n   * the time they are validated and later passed to the commands.\n   */\n  let res = jsonObj;\n  if (_.isArray(jsonObj) || !_.isObject(jsonObj)) {\n    res = {};\n    res[paramSets.wrap] = jsonObj;\n  }\n  return res;\n}\n\nfunction unwrapParams(paramSets, jsonObj) {\n  /* There are commands like setNetworkConnection which send parameters wrapped inside a key such as\n   * \"parameters\". This function unwraps them (eg. {\"parameters\": {\"type\": 1}} becomes {\"type\": 1}).\n   */\n  let res = jsonObj;\n  if (_.isObject(jsonObj)) {\n    // some clients, like ruby, don't wrap\n    if (jsonObj[paramSets.unwrap]) {\n      res = jsonObj[paramSets.unwrap];\n    }\n  }\n  return res;\n}\n\nexport function checkParams(paramSets, jsonObj, protocol) {\n  let requiredParams = [];\n  let optionalParams = [];\n  let receivedParams = _.keys(jsonObj);\n\n  if (paramSets) {\n    if (paramSets.required) {\n      // we might have an array of parameters,\n      // or an array of arrays of parameters, so standardize\n      if (!_.isArray(_.first(paramSets.required))) {\n        requiredParams = [paramSets.required];\n      } else {\n        requiredParams = paramSets.required;\n      }\n    }\n    // optional parameters are just an array\n    if (paramSets.optional) {\n      optionalParams = paramSets.optional;\n    }\n\n    // If a function was provided as the 'validate' key, it will here be called with\n    // jsonObj as the param. If it returns something falsy, verification will be\n    // considered to have passed. If it returns something else, that will be the\n    // argument to an error which is thrown to the user\n    if (paramSets.validate) {\n      let message = paramSets.validate(jsonObj, protocol);\n      if (message) {\n        throw new errors.BadParametersError(message, jsonObj);\n      }\n    }\n  }\n\n  // if we have no required parameters, all is well\n  if (requiredParams.length === 0) {\n    return;\n  }\n\n  // some clients pass in the session id in the params\n  if (optionalParams.indexOf('sessionId') === -1) {\n    optionalParams.push('sessionId');\n  }\n\n  // some clients pass in an element id in the params\n  if (optionalParams.indexOf('id') === -1) {\n    optionalParams.push('id');\n  }\n\n  // go through the required parameters and check against our arguments\n  for (let params of requiredParams) {\n    if (\n      _.difference(receivedParams, params, optionalParams).length === 0 &&\n      _.difference(params, receivedParams).length === 0\n    ) {\n      // we have a set of parameters that is correct\n      // so short-circuit\n      return;\n    }\n  }\n  throw new errors.BadParametersError(paramSets, receivedParams);\n}\n\n/*\n * This method takes 3 pieces of data: request parameters ('requestParams'),\n * a request JSON body ('jsonObj'), and 'payloadParams', which is the section\n * from the route definition for a particular endpoint which has instructions\n * on handling parameters. This method returns an array of arguments which will\n * be applied to a command.\n */\nexport function makeArgs(requestParams, jsonObj, payloadParams, protocol) {\n  // We want to pass the \"url\" parameters to the commands in reverse order\n  // since the command will sometimes want to ignore, say, the sessionId.\n  // This has the effect of putting sessionId last, which means in JS we can\n  // omit it from the function signature if we're not going to use it.\n  let urlParams = _.keys(requestParams).reverse();\n\n  // In the simple case, the required parameters are a basic array in\n  // payloadParams.required, so start there. It's possible that there are\n  // multiple optional sets of required params, though, so handle that case\n  // too.\n  let requiredParams = payloadParams.required;\n  if (_.isArray(_.first(payloadParams.required))) {\n    // If there are optional sets of required params, then we will have an\n    // array of arrays in payloadParams.required, so loop through each set and\n    // pick the one that matches which JSON params were actually sent. We've\n    // already been through validation so we're guaranteed to find a match.\n    let keys = _.keys(jsonObj);\n    for (let params of payloadParams.required) {\n      if (_.without(params, ...keys).length === 0) {\n        requiredParams = params;\n        break;\n      }\n    }\n  }\n\n  // Now we construct our list of arguments which will be passed to the command\n  let args;\n  if (_.isFunction(payloadParams.makeArgs)) {\n    // In the route spec, a particular route might define a 'makeArgs' function\n    // if it wants full control over how to turn JSON parameters into command\n    // arguments. So we pass it the JSON parameters and it returns an array\n    // which will be applied to the handling command. For example if it returns\n    // [1, 2, 3], we will call `command(1, 2, 3, ...)` (url params are separate\n    // from JSON params and get concatenated below).\n    args = payloadParams.makeArgs(jsonObj, protocol);\n  } else {\n    // Otherwise, collect all the required and optional params and flatten them\n    // into an argument array\n    args = _.flatten(requiredParams).map((p) => jsonObj[p]);\n    if (payloadParams.optional) {\n      args = args.concat(_.flatten(payloadParams.optional).map((p) => jsonObj[p]));\n    }\n  }\n  // Finally, get our url params (session id, element id, etc...) on the end of\n  // the list\n  args = args.concat(urlParams.map((u) => requestParams[u]));\n  return args;\n}\n\n/**\n *\n * @param {import('@appium/types').Core} driver\n * @returns {import('../express/server').RouteConfiguringFunction}\n */\nfunction routeConfiguringFunction(driver) {\n  if (!driver.sessionExists) {\n    throw new Error('Drivers must implement `sessionExists` property');\n  }\n\n  // \"execute\" isn't defined anywhere\n  // @ts-expect-error\n  if (!(driver.executeCommand || driver.execute)) {\n    throw new Error('Drivers must implement `executeCommand` or `execute` method');\n  }\n\n  // return a function which will add all the routes to the driver. Here extraMethods might be\n  // passed in as defined by Appium plugins, so we need to add those to the default list\n  return function addRoutes(app, {basePath = DEFAULT_BASE_PATH, extraMethodMap = {}} = {}) {\n    // store basePath on the driver instance so it can use it if necessary\n    // for example in determining proxy avoidance\n    driver.basePath = basePath;\n\n    const allMethods = {...METHOD_MAP, ...extraMethodMap};\n\n    for (const [path, methods] of _.toPairs(allMethods)) {\n      for (const [method, spec] of _.toPairs(methods)) {\n        // set up the express route handler\n        buildHandler(\n          app,\n          method,\n          `${basePath}${path}`,\n          spec,\n          driver,\n          isSessionCommand(spec.command)\n        );\n      }\n    }\n  };\n}\n\nfunction buildHandler(app, method, path, spec, driver, isSessCmd) {\n  let asyncHandler = async (req, res) => {\n    let jsonObj = req.body;\n    let httpResBody = {};\n    let httpStatus = 200;\n    let newSessionId;\n    let currentProtocol = extractProtocol(driver, req.params.sessionId);\n\n    try {\n      // if this is a session command but we don't have a session,\n      // error out early (especially before proxying)\n      if (isSessCmd && !driver.sessionExists(req.params.sessionId)) {\n        throw new errors.NoSuchDriverError();\n      }\n\n      // if the driver is currently proxying commands to another JSONWP server, bypass all our\n      // checks and assume the upstream server knows what it's doing. But keep this in the\n      // try/catch block so if proxying itself fails, we give a message to the client. Of course we\n      // only want to do these when we have a session command; the Appium driver must be\n      // responsible for start/stop session, etc... We also allow the command spec to declare that\n      // this command should never be proxied (which is useful for plugin developers who add\n      // commands and generally would not want that command to be proxied instead of handled by the\n      // plugin)\n      let didPluginOverrideProxy = false;\n      if (isSessCmd && !spec.neverProxy && driverShouldDoJwpProxy(driver, req, spec.command)) {\n        if (\n          !driver.pluginsToHandleCmd ||\n          driver.pluginsToHandleCmd(spec.command, req.params.sessionId).length === 0\n        ) {\n          await doJwpProxy(driver, req, res);\n          return;\n        }\n        getLogger(driver, req.params.sessionId).debug(\n          `Would have proxied ` +\n            `command directly, but a plugin exists which might require its value, so will let ` +\n            `its value be collected internally and made part of plugin chain`\n        );\n        didPluginOverrideProxy = true;\n      }\n\n      // if a command is not in our method map, it's because we\n      // have no plans to ever implement it\n      if (!spec.command) {\n        throw new errors.NotImplementedError();\n      }\n\n      // wrap params if necessary\n      if (spec.payloadParams && spec.payloadParams.wrap) {\n        jsonObj = wrapParams(spec.payloadParams, jsonObj);\n      }\n\n      // unwrap params if necessary\n      if (spec.payloadParams && spec.payloadParams.unwrap) {\n        jsonObj = unwrapParams(spec.payloadParams, jsonObj);\n      }\n\n      if (spec.command === CREATE_SESSION_COMMAND) {\n        // try to determine protocol by session creation args, so we can throw a\n        // properly formatted error if arguments validation fails\n        currentProtocol = determineProtocol(\n          makeArgs(req.params, jsonObj, spec.payloadParams || {})\n        );\n      }\n\n      // ensure that the json payload conforms to the spec\n      checkParams(spec.payloadParams, jsonObj, currentProtocol);\n\n      // turn the command and json payload into an argument list for\n      // the driver methods\n      let args = makeArgs(req.params, jsonObj, spec.payloadParams || {}, currentProtocol);\n      let driverRes;\n      // validate command args according to MJSONWP\n      if (validators[spec.command]) {\n        validators[spec.command](...args);\n      }\n\n      // run the driver command wrapped inside the argument validators\n      getLogger(driver, req.params.sessionId).debug(\n        `Calling ` +\n          `${driver.constructor.name}.${spec.command}() with args: ` +\n          _.truncate(JSON.stringify(args), {length: MAX_LOG_BODY_LENGTH})\n      );\n\n      if (didPluginOverrideProxy) {\n        // TODO for now we add this information on the args list, but that's mixing purposes here.\n        // We really should add another 'options' parameter to 'executeCommand', but this would be\n        // a breaking change for all drivers so would need to be handled carefully.\n        args.push({reqForProxy: req});\n      }\n\n      driverRes = await driver.executeCommand(spec.command, ...args);\n\n      // Get the protocol after executeCommand\n      currentProtocol = extractProtocol(driver, req.params.sessionId) || currentProtocol;\n\n      // If `executeCommand` was overridden and the method returns an object\n      // with a protocol and value/error property, re-assign the protocol\n      if (_.isPlainObject(driverRes) && _.has(driverRes, 'protocol')) {\n        currentProtocol = driverRes.protocol || currentProtocol;\n        if (driverRes.error) {\n          throw driverRes.error;\n        }\n        driverRes = driverRes.value;\n      }\n\n      // unpack createSession response\n      if (spec.command === CREATE_SESSION_COMMAND) {\n        newSessionId = driverRes[0];\n        getLogger(driver, newSessionId).debug(\n          `Cached the protocol value '${currentProtocol}' for the new session ${newSessionId}`\n        );\n        if (currentProtocol === PROTOCOLS.MJSONWP) {\n          driverRes = driverRes[1];\n        } else if (currentProtocol === PROTOCOLS.W3C) {\n          driverRes = {\n            capabilities: driverRes[1],\n          };\n        }\n      }\n\n      driverRes = formatResponseValue(driverRes);\n\n      // delete should not return anything even if successful\n      if (spec.command === DELETE_SESSION_COMMAND) {\n        getLogger(driver, req.params.sessionId).debug(\n          `Received response: ${_.truncate(JSON.stringify(driverRes), {\n            length: MAX_LOG_BODY_LENGTH,\n          })}`\n        );\n        getLogger(driver, req.params.sessionId).debug('But deleting session, so not returning');\n        driverRes = null;\n      }\n\n      // if the status is not 0,  throw the appropriate error for status code.\n      if (util.hasValue(driverRes)) {\n        if (\n          util.hasValue(driverRes.status) &&\n          !isNaN(driverRes.status) &&\n          parseInt(driverRes.status, 10) !== 0\n        ) {\n          throw errorFromMJSONWPStatusCode(driverRes.status, driverRes.value);\n        } else if (_.isPlainObject(driverRes.value) && driverRes.value.error) {\n          throw errorFromW3CJsonCode(\n            driverRes.value.error,\n            driverRes.value.message,\n            driverRes.value.stacktrace\n          );\n        }\n      }\n\n      httpResBody.value = driverRes;\n      getLogger(driver, req.params.sessionId || newSessionId).debug(\n        `Responding ` +\n          `to client with driver.${spec.command}() result: ${_.truncate(JSON.stringify(driverRes), {\n            length: MAX_LOG_BODY_LENGTH,\n          })}`\n      );\n    } catch (err) {\n      // if anything goes wrong, figure out what our response should be\n      // based on the type of error that we encountered\n      let actualErr = err;\n\n      currentProtocol =\n        currentProtocol || extractProtocol(driver, req.params.sessionId || newSessionId);\n\n      let errMsg = err.stacktrace || err.stack;\n      if (!_.includes(errMsg, err.message)) {\n        // if the message has more information, add it. but often the message\n        // is the first part of the stack trace\n        errMsg = `${err.message}${errMsg ? '\\n' + errMsg : ''}`;\n      }\n      if (isErrorType(err, errors.ProxyRequestError)) {\n        actualErr = err.getActualError();\n      } else {\n        getLogger(driver, req.params.sessionId || newSessionId).debug(\n          `Encountered internal error running command: ${errMsg}`\n        );\n      }\n\n      [httpStatus, httpResBody] = getResponseForW3CError(actualErr);\n    }\n\n    // decode the response, which is either a string or json\n    if (_.isString(httpResBody)) {\n      res.status(httpStatus).send(httpResBody);\n    } else {\n      if (newSessionId) {\n        if (currentProtocol === PROTOCOLS.W3C) {\n          httpResBody.value.sessionId = newSessionId;\n        } else {\n          httpResBody.sessionId = newSessionId;\n        }\n      } else {\n        httpResBody.sessionId = req.params.sessionId || null;\n      }\n      // Don't include sessionId in W3C responses\n      if (currentProtocol === PROTOCOLS.W3C) {\n        delete httpResBody.sessionId;\n      }\n\n      httpResBody = formatStatus(httpResBody);\n      res.status(httpStatus).json(httpResBody);\n    }\n  };\n  // add the method to the app\n  app[method.toLowerCase()](path, (req, res) => {\n    B.resolve(asyncHandler(req, res)).done();\n  });\n}\n\nfunction driverShouldDoJwpProxy(driver, req, command) {\n  // drivers need to explicitly say when the proxy is active\n  if (!driver.proxyActive(req.params.sessionId)) {\n    return false;\n  }\n\n  // we should never proxy deleteSession because we need to give the containing\n  // driver an opportunity to clean itself up\n  if (command === DELETE_SESSION_COMMAND) {\n    return false;\n  }\n\n  // validate avoidance schema, and say we shouldn't proxy if anything in the\n  // avoid list matches our req\n  if (driver.proxyRouteIsAvoided(req.params.sessionId, req.method, req.originalUrl, req.body)) {\n    return false;\n  }\n\n  return true;\n}\n\nasync function doJwpProxy(driver, req, res) {\n  getLogger(driver, req.params.sessionId).info(\n    'Driver proxy active, passing request on via HTTP proxy'\n  );\n\n  // check that the inner driver has a proxy function\n  if (!driver.canProxy(req.params.sessionId)) {\n    throw new Error('Trying to proxy to a server but the driver is unable to proxy');\n  }\n  try {\n    await driver.executeCommand('proxyReqRes', req, res, req.params.sessionId);\n  } catch (err) {\n    if (isErrorType(err, errors.ProxyRequestError)) {\n      throw err;\n    } else {\n      throw new Error(`Could not proxy. Proxy error: ${err.message}`);\n    }\n  }\n}\n\nexport {\n  routeConfiguringFunction,\n  isSessionCommand,\n  driverShouldDoJwpProxy,\n  determineProtocol,\n  CREATE_SESSION_COMMAND,\n  DELETE_SESSION_COMMAND,\n  GET_STATUS_COMMAND,\n};\n"],"mappings":"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"}