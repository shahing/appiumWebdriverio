"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fixCaps = fixCaps;
exports.isW3cCaps = isW3cCaps;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function isW3cCaps(caps) {
  if (!_lodash.default.isPlainObject(caps)) {
    return false;
  }

  const isFirstMatchValid = () => _lodash.default.isArray(caps.firstMatch) && !_lodash.default.isEmpty(caps.firstMatch) && _lodash.default.every(caps.firstMatch, _lodash.default.isPlainObject);

  const isAlwaysMatchValid = () => _lodash.default.isPlainObject(caps.alwaysMatch);

  if (_lodash.default.has(caps, 'firstMatch') && _lodash.default.has(caps, 'alwaysMatch')) {
    return isFirstMatchValid() && isAlwaysMatchValid();
  }

  if (_lodash.default.has(caps, 'firstMatch')) {
    return isFirstMatchValid();
  }

  if (_lodash.default.has(caps, 'alwaysMatch')) {
    return isAlwaysMatchValid();
  }

  return false;
}

function fixCaps(oldCaps, desiredCapConstraints, log) {
  let caps = _lodash.default.clone(oldCaps);

  let booleanCaps = _lodash.default.keys(_lodash.default.pickBy(desiredCapConstraints, k => k.isBoolean === true));

  for (let cap of booleanCaps) {
    let value = oldCaps[cap];

    if (_lodash.default.isString(value)) {
      value = value.toLowerCase();

      if (value === 'true' || value === 'false') {
        log.warn(`Capability '${cap}' changed from string to boolean. This may cause unexpected behavior`);
        caps[cap] = value === 'true';
      }
    }
  }

  let intCaps = _lodash.default.keys(_lodash.default.pickBy(desiredCapConstraints, k => k.isNumber === true));

  for (let cap of intCaps) {
    let value = oldCaps[cap];

    if (_lodash.default.isString(value)) {
      value = value.trim();
      let newValue = parseInt(value, 10);

      if (value !== `${newValue}`) {
        newValue = parseFloat(value);
      }

      log.warn(`Capability '${cap}' changed from string ('${value}') to integer (${newValue}). This may cause unexpected behavior`);
      caps[cap] = newValue;
    }
  }

  return caps;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc1czY0NhcHMiLCJjYXBzIiwiXyIsImlzUGxhaW5PYmplY3QiLCJpc0ZpcnN0TWF0Y2hWYWxpZCIsImlzQXJyYXkiLCJmaXJzdE1hdGNoIiwiaXNFbXB0eSIsImV2ZXJ5IiwiaXNBbHdheXNNYXRjaFZhbGlkIiwiYWx3YXlzTWF0Y2giLCJoYXMiLCJmaXhDYXBzIiwib2xkQ2FwcyIsImRlc2lyZWRDYXBDb25zdHJhaW50cyIsImxvZyIsImNsb25lIiwiYm9vbGVhbkNhcHMiLCJrZXlzIiwicGlja0J5IiwiayIsImlzQm9vbGVhbiIsImNhcCIsInZhbHVlIiwiaXNTdHJpbmciLCJ0b0xvd2VyQ2FzZSIsIndhcm4iLCJpbnRDYXBzIiwiaXNOdW1iZXIiLCJ0cmltIiwibmV3VmFsdWUiLCJwYXJzZUludCIsInBhcnNlRmxvYXQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvaGVscGVycy9jYXBhYmlsaXRpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQHRzLWNoZWNrXG5cbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5cbmZ1bmN0aW9uIGlzVzNjQ2FwcyhjYXBzKSB7XG4gIGlmICghXy5pc1BsYWluT2JqZWN0KGNhcHMpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgaXNGaXJzdE1hdGNoVmFsaWQgPSAoKSA9PlxuICAgIF8uaXNBcnJheShjYXBzLmZpcnN0TWF0Y2gpICYmXG4gICAgIV8uaXNFbXB0eShjYXBzLmZpcnN0TWF0Y2gpICYmXG4gICAgXy5ldmVyeShjYXBzLmZpcnN0TWF0Y2gsIF8uaXNQbGFpbk9iamVjdCk7XG4gIGNvbnN0IGlzQWx3YXlzTWF0Y2hWYWxpZCA9ICgpID0+IF8uaXNQbGFpbk9iamVjdChjYXBzLmFsd2F5c01hdGNoKTtcbiAgaWYgKF8uaGFzKGNhcHMsICdmaXJzdE1hdGNoJykgJiYgXy5oYXMoY2FwcywgJ2Fsd2F5c01hdGNoJykpIHtcbiAgICByZXR1cm4gaXNGaXJzdE1hdGNoVmFsaWQoKSAmJiBpc0Fsd2F5c01hdGNoVmFsaWQoKTtcbiAgfVxuICBpZiAoXy5oYXMoY2FwcywgJ2ZpcnN0TWF0Y2gnKSkge1xuICAgIHJldHVybiBpc0ZpcnN0TWF0Y2hWYWxpZCgpO1xuICB9XG4gIGlmIChfLmhhcyhjYXBzLCAnYWx3YXlzTWF0Y2gnKSkge1xuICAgIHJldHVybiBpc0Fsd2F5c01hdGNoVmFsaWQoKTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICpcbiAqIEB0ZW1wbGF0ZSB7Q29uc3RyYWludHN9IENcbiAqIEBwYXJhbSB7YW55fSBvbGRDYXBzXG4gKiBAcGFyYW0ge0N9IGRlc2lyZWRDYXBDb25zdHJhaW50c1xuICogQHBhcmFtIHtBcHBpdW1Mb2dnZXJ9IGxvZ1xuICogQHJldHVybnMge0NhcGFiaWxpdGllczxDPn1cbiAqL1xuZnVuY3Rpb24gZml4Q2FwcyhvbGRDYXBzLCBkZXNpcmVkQ2FwQ29uc3RyYWludHMsIGxvZykge1xuICBsZXQgY2FwcyA9IF8uY2xvbmUob2xkQ2Fwcyk7XG5cbiAgLy8gYm9vbGVhbiBjYXBhYmlsaXRpZXMgY2FuIGJlIHBhc3NlZCBpbiBhcyBzdHJpbmdzICdmYWxzZScgYW5kICd0cnVlJ1xuICAvLyB3aGljaCB3ZSB3YW50IHRvIHRyYW5zbGF0ZSBpbnRvIGJvb2xlYW4gdmFsdWVzXG4gIGxldCBib29sZWFuQ2FwcyA9IF8ua2V5cyhfLnBpY2tCeShkZXNpcmVkQ2FwQ29uc3RyYWludHMsIChrKSA9PiBrLmlzQm9vbGVhbiA9PT0gdHJ1ZSkpO1xuICBmb3IgKGxldCBjYXAgb2YgYm9vbGVhbkNhcHMpIHtcbiAgICBsZXQgdmFsdWUgPSBvbGRDYXBzW2NhcF07XG4gICAgaWYgKF8uaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICBpZiAodmFsdWUgPT09ICd0cnVlJyB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJykge1xuICAgICAgICBsb2cud2FybihcbiAgICAgICAgICBgQ2FwYWJpbGl0eSAnJHtjYXB9JyBjaGFuZ2VkIGZyb20gc3RyaW5nIHRvIGJvb2xlYW4uIFRoaXMgbWF5IGNhdXNlIHVuZXhwZWN0ZWQgYmVoYXZpb3JgXG4gICAgICAgICk7XG4gICAgICAgIGNhcHNbY2FwXSA9IHZhbHVlID09PSAndHJ1ZSc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gaW50IGNhcGFiaWxpdGllcyBhcmUgb2Z0ZW4gc2VudCBpbiBhcyBzdHJpbmdzIGJ5IGZyYW1ld29ya3NcbiAgbGV0IGludENhcHMgPSAvKiogQHR5cGUge2ltcG9ydCgndHlwZS1mZXN0JykuU3RyaW5nS2V5T2Y8dHlwZW9mIGNhcHM+W119ICovIChcbiAgICBfLmtleXMoXy5waWNrQnkoZGVzaXJlZENhcENvbnN0cmFpbnRzLCAoaykgPT4gay5pc051bWJlciA9PT0gdHJ1ZSkpXG4gICk7XG4gIGZvciAobGV0IGNhcCBvZiBpbnRDYXBzKSB7XG4gICAgbGV0IHZhbHVlID0gb2xkQ2Fwc1tjYXBdO1xuICAgIGlmIChfLmlzU3RyaW5nKHZhbHVlKSkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS50cmltKCk7XG4gICAgICBsZXQgbmV3VmFsdWUgPSBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgICAgaWYgKHZhbHVlICE9PSBgJHtuZXdWYWx1ZX1gKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBsb2cud2FybihcbiAgICAgICAgYENhcGFiaWxpdHkgJyR7Y2FwfScgY2hhbmdlZCBmcm9tIHN0cmluZyAoJyR7dmFsdWV9JykgdG8gaW50ZWdlciAoJHtuZXdWYWx1ZX0pLiBUaGlzIG1heSBjYXVzZSB1bmV4cGVjdGVkIGJlaGF2aW9yYFxuICAgICAgKTtcbiAgICAgIGNhcHNbY2FwXSA9IG5ld1ZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjYXBzO1xufVxuXG5leHBvcnQge2lzVzNjQ2FwcywgZml4Q2Fwc307XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnQGFwcGl1bS90eXBlcycpLkNvbnN0cmFpbnRzfSBDb25zdHJhaW50c1xuICogQHR5cGVkZWYge2ltcG9ydCgnQGFwcGl1bS90eXBlcycpLkFwcGl1bUxvZ2dlcn0gQXBwaXVtTG9nZ2VyXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuU3RyaW5nUmVjb3JkfSBTdHJpbmdSZWNvcmRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5CYXNlRHJpdmVyQ2FwQ29uc3RyYWludHN9IEJhc2VEcml2ZXJDYXBDb25zdHJhaW50c1xuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIHtDb25zdHJhaW50c30gW0M9QmFzZURyaXZlckNhcENvbnN0cmFpbnRzXVxuICogQHRlbXBsYXRlIHtTdHJpbmdSZWNvcmR8dm9pZH0gW0V4dHJhPXZvaWRdXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuQ2FwYWJpbGl0aWVzPEMsIEV4dHJhPn0gQ2FwYWJpbGl0aWVzXG4gKi9cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUVBOzs7O0FBRUEsU0FBU0EsU0FBVCxDQUFtQkMsSUFBbkIsRUFBeUI7RUFDdkIsSUFBSSxDQUFDQyxlQUFBLENBQUVDLGFBQUYsQ0FBZ0JGLElBQWhCLENBQUwsRUFBNEI7SUFDMUIsT0FBTyxLQUFQO0VBQ0Q7O0VBRUQsTUFBTUcsaUJBQWlCLEdBQUcsTUFDeEJGLGVBQUEsQ0FBRUcsT0FBRixDQUFVSixJQUFJLENBQUNLLFVBQWYsS0FDQSxDQUFDSixlQUFBLENBQUVLLE9BQUYsQ0FBVU4sSUFBSSxDQUFDSyxVQUFmLENBREQsSUFFQUosZUFBQSxDQUFFTSxLQUFGLENBQVFQLElBQUksQ0FBQ0ssVUFBYixFQUF5QkosZUFBQSxDQUFFQyxhQUEzQixDQUhGOztFQUlBLE1BQU1NLGtCQUFrQixHQUFHLE1BQU1QLGVBQUEsQ0FBRUMsYUFBRixDQUFnQkYsSUFBSSxDQUFDUyxXQUFyQixDQUFqQzs7RUFDQSxJQUFJUixlQUFBLENBQUVT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