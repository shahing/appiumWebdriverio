"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LogMixin = LogMixin;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function LogMixin(Base) {
  class LogCommands extends Base {
    constructor(...args) {
      super(...args);
      this.supportedLogTypes = this.supportedLogTypes ?? {};
    }

    async getLogTypes() {
      this.log.debug('Retrieving supported log types');
      return _lodash.default.keys(this.supportedLogTypes);
    }

    async getLog(logType) {
      this.log.debug(`Retrieving '${logType}' logs`);

      if (!(await this.getLogTypes()).includes(logType)) {
        const logsTypesWithDescriptions = _lodash.default.mapValues(this.supportedLogTypes, 'description');

        throw new Error(`Unsupported log type '${logType}'. ` + `Supported types: ${JSON.stringify(logsTypesWithDescriptions)}`);
      }

      return await this.supportedLogTypes[logType].getter(this);
    }

  }

  return LogCommands;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMb2dNaXhpbiIsIkJhc2UiLCJMb2dDb21tYW5kcyIsImNvbnN0cnVjdG9yIiwiYXJncyIsInN1cHBvcnRlZExvZ1R5cGVzIiwiZ2V0TG9nVHlwZXMiLCJsb2ciLCJkZWJ1ZyIsIl8iLCJrZXlzIiwiZ2V0TG9nIiwibG9nVHlwZSIsImluY2x1ZGVzIiwibG9nc1R5cGVzV2l0aERlc2NyaXB0aW9ucyIsIm1hcFZhbHVlcyIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldHRlciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2xvZy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWF3YWl0ICovXG4vLyBAdHMtY2hlY2tcblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuLyoqXG4gKlxuICogQHBhcmFtIHtGaW5kQmFzZX0gQmFzZVxuICogQHJldHVybnMge0xvZ0Jhc2V9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBMb2dNaXhpbihCYXNlKSB7XG4gIC8qKlxuICAgKiBAaW1wbGVtZW50cyB7SUxvZ0NvbW1hbmRzfVxuICAgKi9cbiAgY2xhc3MgTG9nQ29tbWFuZHMgZXh0ZW5kcyBCYXNlIHtcbiAgICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgICBzdXBlciguLi5hcmdzKTtcbiAgICAgIC8qKiBAdHlwZSB7UmVjb3JkPHN0cmluZywgTG9nVHlwZTxEcml2ZXI+Pn0gKi9cbiAgICAgIHRoaXMuc3VwcG9ydGVkTG9nVHlwZXMgPSB0aGlzLnN1cHBvcnRlZExvZ1R5cGVzID8/IHt9O1xuICAgIH1cblxuICAgIGFzeW5jIGdldExvZ1R5cGVzKCkge1xuICAgICAgdGhpcy5sb2cuZGVidWcoJ1JldHJpZXZpbmcgc3VwcG9ydGVkIGxvZyB0eXBlcycpO1xuICAgICAgcmV0dXJuIF8ua2V5cyh0aGlzLnN1cHBvcnRlZExvZ1R5cGVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAdGhpcyB7RHJpdmVyfVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsb2dUeXBlXG4gICAgICovXG4gICAgYXN5bmMgZ2V0TG9nKGxvZ1R5cGUpIHtcbiAgICAgIHRoaXMubG9nLmRlYnVnKGBSZXRyaWV2aW5nICcke2xvZ1R5cGV9JyBsb2dzYCk7XG5cbiAgICAgIGlmICghKGF3YWl0IHRoaXMuZ2V0TG9nVHlwZXMoKSkuaW5jbHVkZXMobG9nVHlwZSkpIHtcbiAgICAgICAgY29uc3QgbG9nc1R5cGVzV2l0aERlc2NyaXB0aW9ucyA9IF8ubWFwVmFsdWVzKHRoaXMuc3VwcG9ydGVkTG9nVHlwZXMsICdkZXNjcmlwdGlvbicpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFVuc3VwcG9ydGVkIGxvZyB0eXBlICcke2xvZ1R5cGV9Jy4gYCArXG4gICAgICAgICAgICBgU3VwcG9ydGVkIHR5cGVzOiAke0pTT04uc3RyaW5naWZ5KGxvZ3NUeXBlc1dpdGhEZXNjcmlwdGlvbnMpfWBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuc3VwcG9ydGVkTG9nVHlwZXNbbG9nVHlwZV0uZ2V0dGVyKHRoaXMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gTG9nQ29tbWFuZHM7XG59XG5cbi8qKlxuICogQHR5cGVkZWYge2ltcG9ydCgnQGFwcGl1bS90eXBlcycpLkxvZ0NvbW1hbmRzfSBJTG9nQ29tbWFuZHNcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5Ecml2ZXJ9IERyaXZlclxuICogQHR5cGVkZWYge2ltcG9ydCgnLi9maW5kJykuRmluZEJhc2V9IEZpbmRCYXNlXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuLi9kcml2ZXInKS5CYXNlRHJpdmVyQmFzZTxpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5UaW1lb3V0Q29tbWFuZHMgJiBpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5FdmVudENvbW1hbmRzICYgaW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuRmluZENvbW1hbmRzICYgSUxvZ0NvbW1hbmRzPn0gTG9nQmFzZVxuICovXG5cbi8qKlxuICogQHRlbXBsYXRlIFRcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5Mb2dUeXBlPFQ+fSBMb2dUeXBlXG4gKi9cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBR0E7Ozs7QUFPTyxTQUFTQSxRQUFULENBQWtCQyxJQUFsQixFQUF3QjtFQUk3QixNQUFNQyxXQUFOLFNBQTBCRCxJQUExQixDQUErQjtJQUM3QkUsV0FBVyxDQUFDLEdBQUdDLElBQUosRUFBVTtNQUNuQixNQUFNLEdBQUdBLElBQVQ7TUFFQSxLQUFLQyxpQkFBTCxHQUF5QixLQUFLQSxpQkFBTCxJQUEwQixFQUFuRDtJQUNEOztJQUVnQixNQUFYQyxXQUFXLEdBQUc7TUFDbEIsS0FBS0MsR0FBTCxDQUFTQyxLQUFULENBQWUsZ0NBQWY7TUFDQSxPQUFPQyxlQUFBLENBQUVDLElBQUYsQ0FBTyxLQUFLTCxpQkFBWixDQUFQO0lBQ0Q7O0lBTVcsTUFBTk0sTUFBTSxDQUFDQyxPQUFELEVBQVU7TUFDcEIsS0FBS0wsR0FBTCxDQUFTQyxLQUFULENBQWdCLGVBQWNJLE9BQVEsUUFBdEM7O01BRUEsSUFBSSxDQUFDLENBQUMsTUFBTSxLQUFLTixXQUFMLEVBQVAsRUFBMkJPLFFBQTNCLENBQW9DRCxPQUFwQyxDQUFMLEVBQW1EO1FBQ2pELE1BQU1FLHlCQUF5QixHQUFHTCxlQUFBLENBQUVNLFNBQUYsQ0FBWSxLQUFLVixpQkFBakIsRUFBb0MsYUFBcEMsQ0FBbEM7O1FBQ0EsTUFBTSxJQUFJVyxLQUFKLENBQ0gseUJBQXdCSixPQUFRLEtBQWpDLEdBQ0csb0JBQW1CSyxJQUFJLENBQUNDLFNBQUwsQ0FBZUoseUJBQWYsQ0FBMEMsRUFGNUQsQ0FBTjtNQUlEOztNQUVELE9BQU8sTUFBTSxLQUFLVCxpQkFBTCxDQUF1Qk8sT0FBdkIsRUFBZ0NPLE1BQWhDLENBQXVDLElBQXZDLENBQWI7SUFDRDs7RUE1QjRCOztFQThCL0IsT0FBT2pCLFdBQVA7QUFDRCJ9