{"version":3,"file":"device-settings.js","names":["MAX_SETTINGS_SIZE","DeviceSettings","_settings","_onSettingsUpdate","constructor","defaultSettings","onSettingsUpdate","update","newSettings","_","isPlainObject","errors","InvalidArgumentError","JSON","stringify","node","getObjectSize","util","toReadableSizeString","props","keys","prop","isUndefined","log","debug","getSettings"],"sources":["../../../lib/basedriver/device-settings.js"],"sourcesContent":["import _ from 'lodash';\nimport log from './logger';\nimport {node, util} from '@appium/support';\nimport {errors} from '../protocol/errors';\n\n/**\n * Maximum size (in bytes) of a given driver's settings object (which is internal to {@linkcode DriverSettings}).\n */\nexport const MAX_SETTINGS_SIZE = 20 * 1024 * 1024; // 20 MB\n\n/**\n * @template T\n * @implements {IDeviceSettings<T>}\n */\nclass DeviceSettings {\n  /**\n   * @protected\n   * @type {Record<string,T>}\n   */\n  _settings;\n\n  /**\n   * @protected\n   * @type {import('@appium/types').SettingsUpdateListener<T>}\n   */\n  _onSettingsUpdate;\n\n  /**\n   * Creates a _shallow copy_ of the `defaultSettings` parameter!\n   * @param {Record<string,T>} [defaultSettings]\n   * @param {import('@appium/types').SettingsUpdateListener<T>} [onSettingsUpdate]\n   */\n  constructor(defaultSettings = {}, onSettingsUpdate = async () => {}) {\n    this._settings = {...defaultSettings};\n    this._onSettingsUpdate = onSettingsUpdate;\n  }\n\n  /**\n   * calls updateSettings from implementing driver every time a setting is changed.\n   * @param {Record<string,T>} newSettings\n   */\n  async update(newSettings) {\n    if (!_.isPlainObject(newSettings)) {\n      throw new errors.InvalidArgumentError(\n        `Settings update should be called with valid JSON. Got ` +\n          `${JSON.stringify(newSettings)} instead`\n      );\n    }\n\n    if (node.getObjectSize({...this._settings, ...newSettings}) >= MAX_SETTINGS_SIZE) {\n      throw new errors.InvalidArgumentError(\n        `New settings cannot be applied, because the overall ` +\n          `object size exceeds the allowed limit of ${util.toReadableSizeString(MAX_SETTINGS_SIZE)}`\n      );\n    }\n\n    const props = /** @type {(keyof T & string)[]} */ (_.keys(newSettings));\n    for (const prop of props) {\n      if (!_.isUndefined(this._settings[prop])) {\n        if (this._settings[prop] === newSettings[prop]) {\n          log.debug(`The value of '${prop}' setting did not change. Skipping the update for it`);\n          continue;\n        }\n      }\n      await this._onSettingsUpdate(prop, newSettings[prop], this._settings[prop]);\n      this._settings[prop] = newSettings[prop];\n    }\n  }\n\n  getSettings() {\n    return this._settings;\n  }\n}\n\nexport default DeviceSettings;\nexport {DeviceSettings};\n\n/**\n * @template T\n * @typedef {import('@appium/types').DeviceSettings<T>} IDeviceSettings\n */\n"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAKO,MAAMA,iBAAiB,GAAG,KAAK,IAAL,GAAY,IAAtC;;;AAMP,MAAMC,cAAN,CAAqB;EAKnBC,SAAS;EAMTC,iBAAiB;;EAOjBC,WAAW,CAACC,eAAe,GAAG,EAAnB,EAAuBC,gBAAgB,GAAG,YAAY,CAAE,CAAxD,EAA0D;IACnE,KAAKJ,SAAL,GAAiB,EAAC,GAAGG;IAAJ,CAAjB;IACA,KAAKF,iBAAL,GAAyBG,gBAAzB;EACD;;EAMW,MAANC,MAAM,CAACC,WAAD,EAAc;IACxB,IAAI,CAACC,eAAA,CAAEC,aAAF,CAAgBF,WAAhB,CAAL,EAAmC;MACjC,MAAM,IAAIG,cAAA,CAAOC,oBAAX,CACH,wDAAD,GACG,GAAEC,IAAI,CAACC,SAAL,CAAeN,WAAf,CAA4B,UAF7B,CAAN;IAID;;IAED,IAAIO,aAAA,CAAKC,aAAL,CAAmB,EAAC,GAAG,KAAKd,SAAT;MAAoB,GAAGM;IAAvB,CAAnB,KAA2DR,iBAA/D,EAAkF;MAChF,MAAM,IAAIW,cAAA,CAAOC,oBAAX,CACH,sDAAD,GACG,4CAA2CK,aAAA,CAAKC,oBAAL,CAA0BlB,iBAA1B,CAA6C,EAFvF,CAAN;IAID;;IAED,MAAMmB,KAAK,GAAwCV,eAAA,CAAEW,IAAF,CAAOZ,WAAP,CAAnD;;IACA,KAAK,MAAMa,IAAX,IAAmBF,KAAnB,EAA0B;MACxB,IAAI,CAACV,eAAA,CAAEa,WAAF,CAAc,KAAKpB,SAAL,CAAemB,IAAf,CAAd,CAAL,EAA0C;QACxC,IAAI,KAAKnB,SAAL,CAAemB,IAAf,MAAyBb,WAAW,CAACa,IAAD,CAAxC,EAAgD;UAC9CE,eAAA,CAAIC,KAAJ,CAAW,iBAAgBH,IAAK,sDAAhC;;UACA;QACD;MACF;;MACD,MAAM,KAAKlB,iBAAL,CAAuBkB,IAAvB,EAA6Bb,WAAW,CAACa,IAAD,CAAxC,EAAgD,KAAKnB,SAAL,CAAemB,IAAf,CAAhD,CAAN;MACA,KAAKnB,SAAL,CAAemB,IAAf,IAAuBb,WAAW,CAACa,IAAD,CAAlC;IACD;EACF;;EAEDI,WAAW,GAAG;IACZ,OAAO,KAAKvB,SAAZ;EACD;;AAzDkB;;;eA4DND,c"}