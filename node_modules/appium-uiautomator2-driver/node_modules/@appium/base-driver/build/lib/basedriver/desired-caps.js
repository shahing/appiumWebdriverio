"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validator = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("./logger"));

var _validate = _interopRequireDefault(require("validate.js"));

var _bluebird = _interopRequireDefault(require("bluebird"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const validator = _validate.default;
exports.validator = validator;

validator.validators.isString = function isString(value) {
  if (typeof value === 'string') {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type string';
};

validator.validators.isNumber = function isNumber(value) {
  if (typeof value === 'number') {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  if (typeof value === 'string' && !isNaN(Number(value))) {
    _logger.default.warn('Number capability passed in as string. Functionality may be compromised.');

    return null;
  }

  return 'must be of type number';
};

validator.validators.isBoolean = function isBoolean(value) {
  if (typeof value === 'boolean') {
    return null;
  }

  if (typeof value === 'string' && ['true', 'false', ''].includes(value)) {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type boolean';
};

validator.validators.isObject = function isObject(value) {
  if (typeof value === 'object') {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type object';
};

validator.validators.isArray = function isArray(value) {
  if (Array.isArray(value)) {
    return null;
  }

  if (typeof value === 'undefined') {
    return null;
  }

  return 'must be of type array';
};

validator.validators.deprecated = function deprecated(value, options, key) {
  if (options) {
    _logger.default.warn(`${key} is a deprecated capability`);
  }

  return null;
};

validator.validators.inclusionCaseInsensitive = function inclusionCaseInsensitive(value, options) {
  if (typeof value === 'undefined') {
    return null;
  } else if (typeof value !== 'string') {
    return 'unrecognised';
  }

  for (let option of options) {
    if (option.toLowerCase() === value.toLowerCase()) {
      return null;
    }
  }

  return `${value} not part of ${options.toString()}`;
};

validator.promise = _bluebird.default;

validator.prettify = function prettify(val) {
  return val;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2YWxpZGF0b3IiLCJfdmFsaWRhdG9yIiwidmFsaWRhdG9ycyIsImlzU3RyaW5nIiwidmFsdWUiLCJpc051bWJlciIsImlzTmFOIiwiTnVtYmVyIiwibG9nIiwid2FybiIsImlzQm9vbGVhbiIsImluY2x1ZGVzIiwiaXNPYmplY3QiLCJpc0FycmF5IiwiQXJyYXkiLCJkZXByZWNhdGVkIiwib3B0aW9ucyIsImtleSIsImluY2x1c2lvbkNhc2VJbnNlbnNpdGl2ZSIsIm9wdGlvbiIsInRvTG93ZXJDYXNlIiwidG9TdHJpbmciLCJwcm9taXNlIiwiQiIsInByZXR0aWZ5IiwidmFsIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2Jhc2Vkcml2ZXIvZGVzaXJlZC1jYXBzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBsb2cgZnJvbSAnLi9sb2dnZXInO1xuaW1wb3J0IF92YWxpZGF0b3IgZnJvbSAndmFsaWRhdGUuanMnO1xuaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuXG5leHBvcnQgY29uc3QgdmFsaWRhdG9yID1cbiAgLyoqIEB0eXBlIHtpbXBvcnQoJ3ZhbGlkYXRlLmpzJykuVmFsaWRhdGVKUyAmIHtwcm9taXNlOiB0eXBlb2YgaW1wb3J0KCdibHVlYmlyZCcpfX0gKi8gKFxuICAgIF92YWxpZGF0b3JcbiAgKTtcblxudmFsaWRhdG9yLnZhbGlkYXRvcnMuaXNTdHJpbmcgPSBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAnbXVzdCBiZSBvZiB0eXBlIHN0cmluZyc7XG59O1xudmFsaWRhdG9yLnZhbGlkYXRvcnMuaXNOdW1iZXIgPSBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIGFsbG93IGEgc3RyaW5nIHZhbHVlXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnICYmICFpc05hTihOdW1iZXIodmFsdWUpKSkge1xuICAgIGxvZy53YXJuKCdOdW1iZXIgY2FwYWJpbGl0eSBwYXNzZWQgaW4gYXMgc3RyaW5nLiBGdW5jdGlvbmFsaXR5IG1heSBiZSBjb21wcm9taXNlZC4nKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAnbXVzdCBiZSBvZiB0eXBlIG51bWJlcic7XG59O1xudmFsaWRhdG9yLnZhbGlkYXRvcnMuaXNCb29sZWFuID0gZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gYWxsb3cgYSBzdHJpbmcgdmFsdWVcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgWyd0cnVlJywgJ2ZhbHNlJywgJyddLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAnbXVzdCBiZSBvZiB0eXBlIGJvb2xlYW4nO1xufTtcbnZhbGlkYXRvci52YWxpZGF0b3JzLmlzT2JqZWN0ID0gZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gJ211c3QgYmUgb2YgdHlwZSBvYmplY3QnO1xufTtcbnZhbGlkYXRvci52YWxpZGF0b3JzLmlzQXJyYXkgPSBmdW5jdGlvbiBpc0FycmF5KHZhbHVlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAnbXVzdCBiZSBvZiB0eXBlIGFycmF5Jztcbn07XG52YWxpZGF0b3IudmFsaWRhdG9ycy5kZXByZWNhdGVkID0gZnVuY3Rpb24gZGVwcmVjYXRlZCh2YWx1ZSwgb3B0aW9ucywga2V5KSB7XG4gIGlmIChvcHRpb25zKSB7XG4gICAgbG9nLndhcm4oYCR7a2V5fSBpcyBhIGRlcHJlY2F0ZWQgY2FwYWJpbGl0eWApO1xuICB9XG4gIHJldHVybiBudWxsO1xufTtcbnZhbGlkYXRvci52YWxpZGF0b3JzLmluY2x1c2lvbkNhc2VJbnNlbnNpdGl2ZSA9IGZ1bmN0aW9uIGluY2x1c2lvbkNhc2VJbnNlbnNpdGl2ZSh2YWx1ZSwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gJ3VucmVjb2duaXNlZCc7XG4gIH1cbiAgZm9yIChsZXQgb3B0aW9uIG9mIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9uLnRvTG93ZXJDYXNlKCkgPT09IHZhbHVlLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYCR7dmFsdWV9IG5vdCBwYXJ0IG9mICR7b3B0aW9ucy50b1N0cmluZygpfWA7XG59O1xuXG52YWxpZGF0b3IucHJvbWlzZSA9IEI7XG52YWxpZGF0b3IucHJldHRpZnkgPSBmdW5j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