{"version":3,"file":"driver.js","names":["EVENT_SESSION_INIT","EVENT_SESSION_START","EVENT_SESSION_QUIT_START","EVENT_SESSION_QUIT_DONE","ON_UNEXPECTED_SHUTDOWN_EVENT","BaseDriverCore","DriverCore","cliArgs","caps","originalCaps","desiredCapConstraints","opts","BASE_DESIRED_CAP_CONSTRAINTS","constructor","shouldValidateCaps","_desiredCapConstraints","Object","freeze","_","merge","executeCommand","cmd","args","startTime","Date","now","protocol","determineProtocol","logEvent","DELETE_SESSION_COMMAND","clearNewCommandTimeout","shutdownUnexpectedly","errors","NoSuchDriverError","NotYetImplementedError","unexpectedShutdownListener","commandExecutor","B","race","resolve","reject","eventEmitter","on","finally","removeListener","res","isCommandsQueueEnabled","commandsQueueGuard","acquire","BaseDriver","name","startNewCommandTimeout","endTime","_eventHistory","commands","push","startUnexpectedShutdown","err","emit","sessionId","deleteSession","newCommandTimeoutMs","noCommandTimer","setTimeout","log","warn","errorMessage","Error","assignServer","server","host","port","path","serverHost","serverPort","serverPath","reset","debug","currentConfig","property","resetOnUnexpectedShutdown","createSession","key","value","toPairs","w3cCapabilities1","w3cCapabilities2","w3cCapabilities","driverData","SessionNotCreatedError","cloneDeep","find","isW3cCaps","setProtocolW3C","JSON","stringify","processCapabilities","APPIUM_OPTS_CAP","PREFIXED_APPIUM_OPTS_CAP","promoteAppiumOptions","fixCaps","e","message","validateDesiredCaps","util","uuidV4","initialOpts","noReset","fullReset","fastReset","skipUninstall","app","trim","isUndefined","newCommandTimeout","_log","prefix","helpers","generateDriverLogPrefix","info","isBusy","keys","queues","logExtraCaps","extraCaps","difference","length","cap","validateCaps","errorAndThrow","createBaseDriverClass"],"sources":["../../../lib/basedriver/driver.js"],"sourcesContent":["/* eslint-disable require-await */\n/* eslint-disable no-unused-vars */\n\nimport {\n  validateCaps,\n  APPIUM_OPTS_CAP,\n  PREFIXED_APPIUM_OPTS_CAP,\n  processCapabilities,\n  promoteAppiumOptions,\n} from './capabilities';\nimport {DriverCore} from './core';\nimport {util} from '@appium/support';\nimport B from 'bluebird';\nimport _ from 'lodash';\nimport {fixCaps, isW3cCaps} from '../helpers/capabilities';\nimport {DELETE_SESSION_COMMAND, determineProtocol, errors} from '../protocol';\nimport {createBaseDriverClass} from './commands';\nimport helpers from './helpers';\nimport {BASE_DESIRED_CAP_CONSTRAINTS} from '@appium/types';\n\nconst EVENT_SESSION_INIT = 'newSessionRequested';\nconst EVENT_SESSION_START = 'newSessionStarted';\nconst EVENT_SESSION_QUIT_START = 'quitSessionRequested';\nconst EVENT_SESSION_QUIT_DONE = 'quitSessionFinished';\nconst ON_UNEXPECTED_SHUTDOWN_EVENT = 'onUnexpectedShutdown';\n\n/**\n * @implements {SessionHandler<C>}\n * @template {Constraints} C\n * @template {StringRecord} [CArgs=StringRecord]\n * @extends {DriverCore<C>}\n */\nexport class BaseDriverCore extends DriverCore {\n  /**\n   * @type {CArgs & ServerArgs}\n   */\n  cliArgs;\n\n  /**\n   * @type {Capabilities<C>}\n   */\n  caps;\n\n  /**\n   * @type {W3CCapabilities<C>}\n   */\n  originalCaps;\n\n  /**\n   * @type {C}\n   */\n  desiredCapConstraints;\n\n  /**\n   * @type {DriverOpts<C> & DriverOpts<BaseDriverCapConstraints>}\n   */\n  opts;\n\n  static BASE_DESIRED_CAP_CONSTRAINTS = BASE_DESIRED_CAP_CONSTRAINTS;\n\n  /**\n   *\n   * @param {DriverOpts<C>} opts\n   * @param {boolean} shouldValidateCaps\n   */\n  constructor(opts = /** @type {DriverOpts<C>} */ ({}), shouldValidateCaps = true) {\n    super(opts, shouldValidateCaps);\n\n    /**\n     * This must be assigned here because the declaration of {@linkcode BaseDriverCore.opts} above\n     * blows away {@linkcode DriverCore.opts}.\n     */\n    this.opts = opts;\n  }\n\n  /**\n   * Contains the base constraints plus whatever the subclass wants to add.\n   *\n   * Subclasses _shouldn't_ need to use this. If you need to use this, please create\n   * an issue:\n   * @see https://github.com/appium/appium/issues/new\n   * @type {Readonly<BaseDriverCapConstraints & C>}\n   * @protected\n   */\n  get _desiredCapConstraints() {\n    return Object.freeze(_.merge({}, BASE_DESIRED_CAP_CONSTRAINTS, this.desiredCapConstraints));\n  }\n\n  // This is the main command handler for the driver. It wraps command\n  // execution with timeout logic, checking that we have a valid session,\n  // and ensuring that we execute commands one at a time. This method is called\n  // by MJSONWP's express router.\n  /**\n   * @param {string} cmd\n   * @param  {...any} args\n   * @returns {Promise<any>}\n   */\n  async executeCommand(cmd, ...args) {\n    // get start time for this command, and log in special cases\n    let startTime = Date.now();\n\n    if (cmd === 'createSession') {\n      // If creating a session determine if W3C or MJSONWP protocol was requested and remember the choice\n      this.protocol = determineProtocol(args);\n      this.logEvent(EVENT_SESSION_INIT);\n    } else if (cmd === DELETE_SESSION_COMMAND) {\n      this.logEvent(EVENT_SESSION_QUIT_START);\n    }\n\n    // if we had a command timer running, clear it now that we're starting\n    // a new command and so don't want to time out\n    await this.clearNewCommandTimeout();\n\n    if (this.shutdownUnexpectedly) {\n      throw new errors.NoSuchDriverError('The driver was unexpectedly shut down!');\n    }\n\n    // If we don't have this command, it must not be implemented\n    if (!this[cmd]) {\n      throw new errors.NotYetImplementedError();\n    }\n\n    let unexpectedShutdownListener;\n    const commandExecutor = async () =>\n      await B.race([\n        this[cmd](...args),\n        new B((resolve, reject) => {\n          unexpectedShutdownListener = reject;\n          this.eventEmitter.on(ON_UNEXPECTED_SHUTDOWN_EVENT, unexpectedShutdownListener);\n        }),\n      ]).finally(() => {\n        if (unexpectedShutdownListener) {\n          // This is needed to prevent memory leaks\n          this.eventEmitter.removeListener(\n            ON_UNEXPECTED_SHUTDOWN_EVENT,\n            unexpectedShutdownListener\n          );\n          unexpectedShutdownListener = null;\n        }\n      });\n    const res = this.isCommandsQueueEnabled\n      ? await this.commandsQueueGuard.acquire(BaseDriver.name, commandExecutor)\n      : await commandExecutor();\n\n    // if we have set a new command timeout (which is the default), start a\n    // timer once we've finished executing this command. If we don't clear\n    // the timer (which is done when a new command comes in), we will trigger\n    // automatic session deletion in this.onCommandTimeout. Of course we don't\n    // want to trigger the timer when the user is shutting down the session\n    // intentionally\n    if (this.isCommandsQueueEnabled && cmd !== DELETE_SESSION_COMMAND) {\n      // resetting existing timeout\n      await this.startNewCommandTimeout();\n    }\n\n    // log timing information about this command\n    const endTime = Date.now();\n    this._eventHistory.commands.push({cmd, startTime, endTime});\n    if (cmd === 'createSession') {\n      this.logEvent(EVENT_SESSION_START);\n    } else if (cmd === DELETE_SESSION_COMMAND) {\n      this.logEvent(EVENT_SESSION_QUIT_DONE);\n    }\n\n    return res;\n  }\n\n  /**\n   *\n   * @param {Error|import('../protocol/errors').NoSuchDriverError} err\n   */\n  async startUnexpectedShutdown(\n    err = new errors.NoSuchDriverError('The driver was unexpectedly shut down!')\n  ) {\n    this.eventEmitter.emit(ON_UNEXPECTED_SHUTDOWN_EVENT, err); // allow others to listen for this\n    this.shutdownUnexpectedly = true;\n    try {\n      if (this.sessionId !== null) {\n        await this.deleteSession(this.sessionId);\n      }\n    } finally {\n      this.shutdownUnexpectedly = false;\n    }\n  }\n\n  async startNewCommandTimeout() {\n    // make sure there are no rogue timeouts\n    await this.clearNewCommandTimeout();\n\n    // if command timeout is 0, it is disabled\n    if (!this.newCommandTimeoutMs) return; // eslint-disable-line curly\n\n    this.noCommandTimer = setTimeout(async () => {\n      this.log.warn(\n        `Shutting down because we waited ` +\n          `${this.newCommandTimeoutMs / 1000.0} seconds for a command`\n      );\n      const errorMessage =\n        `New Command Timeout of ` +\n        `${this.newCommandTimeoutMs / 1000.0} seconds ` +\n        `expired. Try customizing the timeout using the ` +\n        `'newCommandTimeout' desired capability`;\n      await this.startUnexpectedShutdown(new Error(errorMessage));\n    }, this.newCommandTimeoutMs);\n  }\n\n  /**\n   *\n   * @param {import('@appium/types').AppiumServer} server\n   * @param {string} host\n   * @param {number} port\n   * @param {string} path\n   */\n  assignServer(server, host, port, path) {\n    this.server = server;\n    this.serverHost = host;\n    this.serverPort = port;\n    this.serverPath = path;\n  }\n\n  /*\n   * Restart the session with the original caps,\n   * preserving the timeout config.\n   */\n  async reset() {\n    this.log.debug('Resetting app mid-session');\n    this.log.debug('Running generic full reset');\n\n    // preserving state\n    let currentConfig = {};\n    for (let property of [\n      'implicitWaitMs',\n      'newCommandTimeoutMs',\n      'sessionId',\n      'resetOnUnexpectedShutdown',\n    ]) {\n      currentConfig[property] = this[property];\n    }\n\n    // We also need to preserve the unexpected shutdown, and make sure it is not cancelled during reset.\n    this.resetOnUnexpectedShutdown = () => {};\n\n    try {\n      if (this.sessionId !== null) {\n        await this.deleteSession(this.sessionId);\n      }\n      this.log.debug('Restarting app');\n      await this.createSession(this.originalCaps);\n    } finally {\n      // always restore state.\n      for (let [key, value] of _.toPairs(currentConfig)) {\n        this[key] = value;\n      }\n    }\n    await this.clearNewCommandTimeout();\n  }\n\n  /**\n   *\n   * Historically the first two arguments were reserved for JSONWP capabilities.\n   * Appium 2 has dropped the support of these, so now we only accept capability\n   * objects in W3C format and thus allow any of the three arguments to represent\n   * the latter.\n   * @param {W3CCapabilities<C>} w3cCapabilities1\n   * @param {W3CCapabilities<C>} [w3cCapabilities2]\n   * @param {W3CCapabilities<C>} [w3cCapabilities]\n   * @param {DriverData[]} [driverData]\n   * @returns {Promise<[string,Capabilities<C>]>}\n   */\n  async createSession(w3cCapabilities1, w3cCapabilities2, w3cCapabilities, driverData) {\n    if (this.sessionId !== null) {\n      throw new errors.SessionNotCreatedError(\n        'Cannot create a new session while one is in progress'\n      );\n    }\n\n    this.log.debug();\n\n    const originalCaps = _.cloneDeep(\n      [w3cCapabilities, w3cCapabilities1, w3cCapabilities2].find(isW3cCaps)\n    );\n    if (!originalCaps) {\n      throw new errors.SessionNotCreatedError(\n        'Appium only supports W3C-style capability objects. ' +\n          'Your client is sending an older capabilities format. Please update your client library.'\n      );\n    }\n\n    this.setProtocolW3C();\n\n    this.originalCaps = originalCaps;\n    this.log.debug(\n      `Creating session with W3C capabilities: ${JSON.stringify(originalCaps, null, 2)}`\n    );\n\n    /** @type {Capabilities<C>} */\n    let caps;\n    try {\n      caps = processCapabilities(\n        originalCaps,\n        this._desiredCapConstraints,\n        this.shouldValidateCaps\n      );\n      if (caps[APPIUM_OPTS_CAP]) {\n        this.log.debug(\n          `Found ${PREFIXED_APPIUM_OPTS_CAP} capability present; will promote items inside to caps`\n        );\n        caps = promoteAppiumOptions(caps);\n      }\n      caps = fixCaps(caps, this._desiredCapConstraints, this.log);\n    } catch (e) {\n      throw new errors.SessionNotCreatedError(e.message);\n    }\n\n    this.validateDesiredCaps(caps);\n\n    this.sessionId = util.uuidV4();\n    this.caps = caps;\n    // merge caps onto opts so we don't need to worry about what's where\n    this.opts = {..._.cloneDeep(this.initialOpts), ...this.caps};\n\n    // deal with resets\n    // some people like to do weird things by setting noReset and fullReset\n    // both to true, but this is misguided and strange, so error here instead\n    if (this.opts.noReset && this.opts.fullReset) {\n      throw new Error(\n        \"The 'noReset' and 'fullReset' capabilities are mutually \" +\n          'exclusive and should not both be set to true. You ' +\n          \"probably meant to just use 'fullReset' on its own\"\n      );\n    }\n    if (this.opts.noReset === true) {\n      this.opts.fullReset = false;\n    }\n    if (this.opts.fullReset === true) {\n      this.opts.noReset = false;\n    }\n    this.opts.fastReset = !this.opts.fullReset && !this.opts.noReset;\n    this.opts.skipUninstall = this.opts.fastReset || this.opts.noReset;\n\n    // Prevents empty string caps so we don't need to test it everywhere\n    if (typeof this.opts.app === 'string' && this.opts.app.trim() === '') {\n      delete this.opts.app;\n    }\n\n    if (!_.isUndefined(this.caps.newCommandTimeout)) {\n      this.newCommandTimeoutMs = /** @type {number} */ (this.caps.newCommandTimeout) * 1000;\n    }\n\n    this._log.prefix = helpers.generateDriverLogPrefix(this, this.sessionId);\n\n    this.log.info(`Session created with session id: ${this.sessionId}`);\n\n    return [this.sessionId, caps];\n  }\n\n  /**\n   *\n   * @param {string} [sessionId]\n   * @param {DriverData[]} [driverData]\n   * @returns {Promise<void>}\n   */\n  async deleteSession(sessionId, driverData) {\n    await this.clearNewCommandTimeout();\n    if (this.isCommandsQueueEnabled && this.commandsQueueGuard.isBusy()) {\n      // simple hack to release pending commands if they exist\n      // @ts-ignore\n      for (const key of _.keys(this.commandsQueueGuard.queues)) {\n        // @ts-ignore\n        this.commandsQueueGuard.queues[key] = [];\n      }\n    }\n    this.sessionId = null;\n    this._log.prefix = helpers.generateDriverLogPrefix(this);\n  }\n\n  /**\n   *\n   * @param {Capabilities} caps\n   */\n  logExtraCaps(caps) {\n    let extraCaps = _.difference(_.keys(caps), _.keys(this._desiredCapConstraints));\n    if (extraCaps.length) {\n      this.log.warn(\n        `The following capabilities were provided, but are not ` + `recognized by Appium:`\n      );\n      for (const cap of extraCaps) {\n        this.log.warn(`  ${cap}`);\n      }\n    }\n  }\n\n  /**\n   *\n   * @param {Capabilities<C>} caps\n   * @returns {boolean}\n   */\n  validateDesiredCaps(caps) {\n    if (!this.shouldValidateCaps) {\n      return true;\n    }\n\n    try {\n      validateCaps(caps, this._desiredCapConstraints);\n    } catch (e) {\n      this.log.errorAndThrow(\n        new errors.SessionNotCreatedError(\n          `The desiredCapabilities object was not valid for the ` +\n            `following reason(s): ${e.message}`\n        )\n      );\n    }\n\n    this.logExtraCaps(caps);\n\n    return true;\n  }\n}\n\n/**\n * This ensures that all of the mixins correctly implement the interface described in {@linkcode Driver}.\n * @template {Constraints} [C={}]\n * @implements {Driver<C>}\n */\nexport class BaseDriver extends createBaseDriverClass(BaseDriverCore) {}\nexport default BaseDriver;\n\n/**\n * @typedef {import('@appium/types').HTTPMethod} HTTPMethod\n * @typedef {import('@appium/types').ExternalDriver} ExternalDriver\n * @typedef {import('@appium/types').DriverData} DriverData\n * @typedef {import('@appium/types').Constraints} Constraints\n * @typedef {import('@appium/types').Constraint} Constraint\n * @typedef {import('@appium/types').StringRecord} StringRecord\n * @typedef {import('@appium/types').BaseDriverCapConstraints} BaseDriverCapConstraints\n * @typedef {import('@appium/types').ServerArgs} ServerArgs\n */\n\n/**\n * @callback UpdateServerCallback\n * @param {import('express').Express} app - Express app\n * @param {import('@appium/types').AppiumServer} httpServer - HTTP server\n * @returns {import('type-fest').Promisable<void>}\n */\n\n/**\n * This is used to extend {@linkcode BaseDriverCore} by the mixins and also external drivers.\n * @template [Proto={}]\n * @template [Static={}]\n * @typedef {import('@appium/types').Class<BaseDriverCore & Proto,import('@appium/types').DriverStatic & Static>} BaseDriverBase\n */\n\n/**\n * @template {Constraints} [C=BaseDriverCapConstraints]\n * @typedef {import('@appium/types').SessionHandler<[string, object],void, C>} SessionHandler\n */\n\n/**\n * @template {Constraints} [C=BaseDriverCapConstraints]\n * @template {StringRecord|void} [Extra=void]\n * @typedef {import('@appium/types').Capabilities<C, Extra>} Capabilities\n */\n\n/**\n * @template {Constraints} [C=BaseDriverCapConstraints]\n * @template {StringRecord|void} [Extra=void]\n * @typedef {import('@appium/types').W3CCapabilities<C, Extra>} W3CCapabilities\n */\n\n/**\n * @template {Constraints} C\n * @typedef {import('@appium/types').ConstraintsToCaps<C>} ConstraintsToCaps\n */\n\n/**\n * @template {Constraints} C\n * @typedef {import('@appium/types').Driver<C>} Driver\n */\n\n/**\n * @template {Constraints} C\n * @typedef {import('@appium/types').DriverOpts<C>} DriverOpts\n */\n"],"mappings":"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"}