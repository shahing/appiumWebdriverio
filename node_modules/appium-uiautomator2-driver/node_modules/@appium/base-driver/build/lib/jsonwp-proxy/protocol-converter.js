"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.COMMAND_URLS_CONFLICTS = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _support = require("@appium/support");

var _helpers = require("../basedriver/helpers");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const COMMAND_URLS_CONFLICTS = [{
  commandNames: ['execute', 'executeAsync'],
  jsonwpConverter: url => url.replace(/\/execute.*/, url.includes('async') ? '/execute_async' : '/execute'),
  w3cConverter: url => url.replace(/\/execute.*/, url.includes('async') ? '/execute/async' : '/execute/sync')
}, {
  commandNames: ['getElementScreenshot'],
  jsonwpConverter: url => url.replace(/\/element\/([^/]+)\/screenshot$/, '/screenshot/$1'),
  w3cConverter: url => url.replace(/\/screenshot\/([^/]+)/, '/element/$1/screenshot')
}, {
  commandNames: ['getWindowHandles', 'getWindowHandle'],

  jsonwpConverter(url) {
    return /\/window$/.test(url) ? url.replace(/\/window$/, '/window_handle') : url.replace(/\/window\/handle(s?)$/, '/window_handle$1');
  },

  w3cConverter(url) {
    return /\/window_handle$/.test(url) ? url.replace(/\/window_handle$/, '/window') : url.replace(/\/window_handles$/, '/window/handles');
  }

}, {
  commandNames: ['getProperty'],
  jsonwpConverter: w3cUrl => {
    const w3cPropertyRegex = /\/element\/([^/]+)\/property\/([^/]+)/;
    const jsonwpUrl = w3cUrl.replace(w3cPropertyRegex, '/element/$1/attribute/$2');
    return jsonwpUrl;
  },
  w3cConverter: jsonwpUrl => jsonwpUrl
}];
exports.COMMAND_URLS_CONFLICTS = COMMAND_URLS_CONFLICTS;
const {
  MJSONWP,
  W3C
} = _constants.PROTOCOLS;

const DEFAULT_LOG = _support.logger.getLogger('Protocol Converter');

class ProtocolConverter {
  constructor(proxyFunc, log = null) {
    this.proxyFunc = proxyFunc;
    this._downstreamProtocol = null;
    this._log = log;
  }

  get log() {
    return this._log ?? DEFAULT_LOG;
  }

  set downstreamProtocol(value) {
    this._downstreamProtocol = value;
  }

  get downstreamProtocol() {
    return this._downstreamProtocol;
  }

  getTimeoutRequestObjects(body) {
    if (this.downstreamProtocol === W3C && _lodash.default.has(body, 'ms') && _lodash.default.has(body, 'type')) {
      const typeToW3C = x => x === 'page load' ? 'pageLoad' : x;

      return [{
        [typeToW3C(body.type)]: body.ms
      }];
    }

    if (this.downstreamProtocol === MJSONWP && (!_lodash.default.has(body, 'ms') || !_lodash.default.has(body, 'type'))) {
      const typeToJSONWP = x => x === 'pageLoad' ? 'page load' : x;

      return _lodash.default.toPairs(body).filter(pair => /^\d+(?:[.,]\d*?)?$/.test(`${pair[1]}`)).map(function (pair) {
        return {
          type: typeToJSONWP(pair[0]),
          ms: pair[1]
        };
      });
    }

    return [body];
  }

  async proxySetTimeouts(url, method, body) {
    let response, resBody;
    const timeoutRequestObjects = this.getTimeoutRequestObjects(body);
    this.log.debug(`Will send the following request bodies to /timeouts: ${JSON.stringify(timeoutRequestObjects)}`);

    for (const timeoutObj of timeoutRequestObjects) {
      [response, resBody] = await this.proxyFunc(url, method, timeoutObj);

      if (this.downstreamProtocol !== MJSONWP) {
        return [response, resBody];
      }

      if (response.statusCode >= 400) {
        return [response, resBody];
      }
    }

    return [response, resBody];
  }

  async proxySetWindow(url, method, body) {
    const bodyObj = _support.util.safeJsonParse(body);

    if (_lodash.default.isPlainObject(bodyObj)) {
      if (this.downstreamProtocol === W3C && _lodash.default.has(bodyObj, 'name') && !_lodash.default.has(bodyObj, 'handle')) {
        this.log.debug(`Copied 'name' value '${bodyObj.name}' to 'handle' as per W3C spec`);
        return await this.proxyFunc(url, method, { ...bodyObj,
          handle: bodyObj.name
        });
      }

      if (this.downstreamProtocol === MJSONWP && _lodash.default.has(bodyObj, 'handle') && !_lodash.default.has(bodyObj, 'name')) {
        this.log.debug(`Copied 'handle' value '${bodyObj.handle}' to 'name' as per JSONWP spec`);
        return await this.proxyFunc(url, method, { ...bodyObj,
          name: bodyObj.handle
        });
      }
    }

    return await this.proxyFunc(url, method, body);
  }

  async proxySetValue(url, method, body) {
    const bodyObj = _support.util.safeJsonParse(body);

    if (_lodash.default.isPlainObject(bodyObj) && (_support.util.hasValue(bodyObj.text) || _support.util.hasValue(bodyObj.value))) {
      let {
        text,
        value
      } = bodyObj;

      if (_support.util.hasValue(text) && !_support.util.hasValue(value)) {
        value = _lodash.default.isString(text) ? [...text] : _lodash.default.isArray(text) ? text : [];
        this.log.debug(`Added 'value' property ${JSON.stringify(value)} to 'setValue' request body`);
      } else if (!_support.util.hasValue(text) && _support.util.hasValue(value)) {
        text = _lodash.default.isArray(value) ? value.join('') : _lodash.default.isString(value) ? value : '';
        this.log.debug(`Added 'text' property ${JSON.stringify(text)} to 'setValue' request body`);
      }

      return await this.proxyFunc(url, method, Object.assign({}, bodyObj, {
        text,
        value
      }));
    }

    return await this.proxyFunc(url, method, body);
  }

  async proxySetFrame(url, method, body) {
    const bodyObj = _support.util.safeJsonParse(body);

    return _lodash.default.has(bodyObj, 'id') && _lodash.default.isPlainObject(bodyObj.id) ? await this.proxyFunc(url, method, { ...bodyObj,
      id: (0, _helpers.duplicateKeys)(bodyObj.id, _constants.MJSONWP_ELEMENT_KEY, _constants.W3C_ELEMENT_KEY)
    }) : await this.proxyFunc(url, method, body);
  }

  async proxyPerformActions(url, method, body) {
    const bodyObj = _support.util.safeJsonParse(body);

    return _lodash.default.isPlainObject(bodyObj) ? await this.proxyFunc(url, method, (0, _helpers.duplicateKeys)(bodyObj, _constants.MJSONWP_ELEMENT_KEY, _constants.W3C_ELEMENT_KEY)) : await this.proxyFunc(url, method, body);
  }

  async proxyReleaseActions(url, method) {
    return await this.proxyFunc(url, method);
  }

  async convertAndProxy(commandName, url, method, body) {
    if (!this.downstreamProtocol) {
      return await this.proxyFunc(url, method, body);
    }

    switch (commandName) {
      case 'timeouts':
        return await this.proxySetTimeouts(url, method, body);

      case 'setWindow':
        return await this.proxySetWindow(url, method, body);

      case 'setValue':
        return await this.proxySetValue(url, method, body);

      case 'performActions':
        return await this.proxyPerformActions(url, method, body);

      case 'releaseActions':
        return await this.proxyReleaseActions(url, method);

      case 'setFrame':
        return await this.proxySetFrame(url, method, body);

      default:
        break;
    }

    for (const {
      commandNames,
      jsonwpConverter,
      w3cConverter
    } of COMMAND_URLS_CONFLICTS) {
      if (!commandNames.includes(commandName)) {
        continue;
      }

      const rewrittenUrl = this.downstreamProtocol === MJSONWP ? jsonwpConverter(url) : w3cConverter(url);

      if (rewrittenUrl === url) {
        this.log.debug(`Did not know how to rewrite the original URL '${url}' ` + `for ${this.downstreamProtocol} protocol`);
        break;
      }

      this.log.info(`Rewrote the original URL '${url}' to '${rewrittenUrl}' ` + `for ${this.downstreamProtocol} protocol`);
      return await this.proxyFunc(rewrittenUrl, method, body);
    }

    return await this.proxyFunc(url, method, body);
  }

}

var _default = ProtocolConverter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,