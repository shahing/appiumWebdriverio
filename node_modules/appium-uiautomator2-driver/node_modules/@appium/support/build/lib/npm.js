"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.npm = exports.NPM = exports.INSTALL_LOCKFILE_RELATIVE_PATH = exports.CACHE_DIR_RELATIVE_PATH = void 0;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _semver = _interopRequireDefault(require("semver"));

var _env = require("./env");

var _teen_process = require("teen_process");

var _fs = require("./fs");

var util = _interopRequireWildcard(require("./util"));

var system = _interopRequireWildcard(require("./system"));

var _resolveFrom = _interopRequireDefault(require("resolve-from"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CACHE_DIR_RELATIVE_PATH = _path.default.join('node_modules', '.cache', 'appium');

exports.CACHE_DIR_RELATIVE_PATH = CACHE_DIR_RELATIVE_PATH;

const INSTALL_LOCKFILE_RELATIVE_PATH = _path.default.join(CACHE_DIR_RELATIVE_PATH, '.install.lock');

exports.INSTALL_LOCKFILE_RELATIVE_PATH = INSTALL_LOCKFILE_RELATIVE_PATH;

class NPM {
  _getInstallLockfilePath(cwd) {
    return _path.default.join(cwd, INSTALL_LOCKFILE_RELATIVE_PATH);
  }

  async exec(cmd, args, opts, execOpts = {}) {
    let {
      cwd,
      json,
      lockFile
    } = opts;
    const teenProcessExecOpts = { ...execOpts,
      cwd
    };
    args.unshift(cmd);

    if (json) {
      args.push('--json');
    }

    const npmCmd = system.isWindows() ? 'npm.cmd' : 'npm';

    let runner = async () => await (0, _teen_process.exec)(npmCmd, args, teenProcessExecOpts);

    if (lockFile) {
      const acquireLock = util.getLockFileGuard(lockFile);
      const _runner = runner;

      runner = async () => await acquireLock(_runner);
    }

    let ret;

    try {
      const {
        stdout,
        stderr,
        code
      } = await runner();
      ret = {
        stdout,
        stderr,
        code
      };

      try {
        ret.json = JSON.parse(stdout);
      } catch (ign) {}
    } catch (e) {
      const {
        stdout = '',
        stderr = '',
        code = null
      } = e;
      const err = new Error(`npm command '${args.join(' ')}' failed with code ${code}.\n\nSTDOUT:\n${stdout.trim()}\n\nSTDERR:\n${stderr.trim()}`);
      throw err;
    }

    return ret;
  }

  async getLatestVersion(cwd, pkg) {
    try {
      var _await$this$exec$json;

      return ((_await$this$exec$json = (await this.exec('view', [pkg, 'dist-tags'], {
        json: true,
        cwd
      })).json) === null || _await$this$exec$json === void 0 ? void 0 : _await$this$exec$json.latest) ?? null;
    } catch (err) {
      if (!(err !== null && err !== void 0 && err.message.includes('E404'))) {
        throw err;
      }

      return null;
    }
  }

  async getLatestSafeUpgradeVersion(cwd, pkg, curVersion) {
    try {
      const allVersions = (await this.exec('view', [pkg, 'versions'], {
        json: true,
        cwd
      })).json;
      return this.getLatestSafeUpgradeFromVersions(curVersion, allVersions);
    } catch (err) {
      if (!(err !== null && err !== void 0 && err.message.includes('E404'))) {
        throw err;
      }

      return null;
    }
  }

  async list(cwd, pkg) {
    return (await this.exec('list', pkg ? [pkg] : [], {
      cwd,
      json: true
    })).json;
  }

  getLatestSafeUpgradeFromVersions(curVersion, allVersions) {
    let safeUpgradeVer = null;

    const curSemver = _semver.default.parse(curVersion);

    if (curSemver === null) {
      throw new Error(`Could not parse current version '${curVersion}'`);
    }

    for (const testVer of allVersions) {
      const testSemver = _semver.default.parse(testVer);

      if (testSemver === null) {
        throw new Error(`Could not parse version to test against: '${testVer}'`);
      }

      if (testSemver.prerelease.length > 0) {
        continue;
      }

      if (curSemver.compare(testSemver) === 1) {
        continue;
      }

      if (testSemver.major > curSemver.major) {
        continue;
      }

      if (safeUpgradeVer === null || testSemver.compare(safeUpgradeVer) === 1) {
        safeUpgradeVer = testSemver;
      }
    }

    if (safeUpgradeVer) {
      safeUpgradeVer = safeUpgradeVer.format();
    }

    return safeUpgradeVer;
  }

  async installPackage(cwd, pkgName, {
    pkgVer
  } = {}) {
    let dummyPkgJson;

    const dummyPkgPath = _path.default.join(cwd, 'package.json');

    try {
      dummyPkgJson = JSON.parse(await _fs.fs.readFile(dummyPkgPath, 'utf8'));
    } catch (err) {
      if (err.code === 'ENOENT') {
        dummyPkgJson = {};
        await _fs.fs.writeFile(dummyPkgPath, JSON.stringify(dummyPkgJson, null, 2), 'utf8');
      } else {
        throw err;
      }
    }

    const installOpts = ['--save-dev'];

    if (!(await (0, _env.hasAppiumDependency)(cwd))) {
      if (process.env.APPIUM_OMIT_PEER_DEPS) {
        installOpts.push('--omit=peer');
      }

      installOpts.push('--save-exact', '--global-style', '--no-package-lock');
    }

    const res = await this.exec('install', [...installOpts, pkgVer ? `${pkgName}@${pkgVer}` : pkgName], {
      cwd,
      json: true,
      lockFile: this._getInstallLockfilePath(cwd)
    });

    if (res.json) {
      if (res.json.error) {
        throw new Error(res.json.error);
      }
    }

    const pkgJsonPath = (0, _resolveFrom.default)(cwd, `${pkgName}/package.json`);

    try {
      return require(pkgJsonPath);
    } catch {
      throw new Error('The package was not downloaded correctly; its package.json ' + 'did not exist or was unreadable. We looked for it at ' + pkgJsonPath);
    }
  }

  async uninstallPackage(cwd, pkg) {
    await this.exec('uninstall', [pkg], {
      cwd,
      lockFile: this._getInstallLockfilePath(cwd)
    });
  }

}

exports.NPM = NPM;
const npm = new NPM();
exports.npm = npm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,