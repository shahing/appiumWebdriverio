"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_TIMEOUT_KEY = void 0;
exports.checkAppPresent = checkAppPresent;
exports.clearLogs = clearLogs;
exports.clearSystemFiles = clearSystemFiles;
exports.detectUdid = detectUdid;
exports.encodeBase64OrUpload = encodeBase64OrUpload;
exports.getAndCheckIosSdkVersion = getAndCheckIosSdkVersion;
exports.getAndCheckXcodeVersion = getAndCheckXcodeVersion;
exports.getDriverInfo = getDriverInfo;
exports.getPIDsListeningOnPort = getPIDsListeningOnPort;
exports.isLocalHost = isLocalHost;
exports.markSystemFilesForCleanup = markSystemFilesForCleanup;
exports.normalizeCommandTimeouts = normalizeCommandTimeouts;
exports.normalizePlatformVersion = normalizePlatformVersion;
exports.printUser = printUser;
exports.removeAllSessionWebSocketHandlers = removeAllSessionWebSocketHandlers;
exports.requireArgs = requireArgs;
exports.translateDeviceName = translateDeviceName;
require("source-map-support/register");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _appiumIosDevice = require("appium-ios-device");
var _support = require("appium/support");
var _path = _interopRequireDefault(require("path"));
var _teen_process = require("teen_process");
var _appiumXcode = _interopRequireDefault(require("appium-xcode"));
var _lodash = _interopRequireDefault(require("lodash"));
var _logger = _interopRequireDefault(require("./logger"));
var _iosGenericSimulators = _interopRequireDefault(require("./ios-generic-simulators"));
var _url = _interopRequireDefault(require("url"));
var _os = _interopRequireDefault(require("os"));
var _semver = _interopRequireDefault(require("semver"));
var _driver = require("appium/driver");
const DEFAULT_TIMEOUT_KEY = 'default';
exports.DEFAULT_TIMEOUT_KEY = DEFAULT_TIMEOUT_KEY;
const XCTEST_LOG_FILES_PATTERNS = [/^Session-WebDriverAgentRunner.*\.log$/i, /^StandardOutputAndStandardError\.txt$/i];
const XCTEST_LOGS_CACHE_FOLDER_PREFIX = 'com.apple.dt.XCTest';
async function detectUdid() {
  _logger.default.debug('Auto-detecting real device udid...');
  const udids = await _appiumIosDevice.utilities.getConnectedDevices();
  if (_lodash.default.isEmpty(udids)) {
    throw new Error('No device is connected to the host');
  }
  const udid = _lodash.default.last(udids);
  if (udids.length > 1) {
    _logger.default.warn(`Multiple devices found: ${udids.join(', ')}`);
    _logger.default.warn(`Choosing '${udid}'. If this is wrong, manually set with 'udid' desired capability`);
  }
  _logger.default.debug(`Detected real device udid: '${udid}'`);
  return udid;
}
async function getAndCheckXcodeVersion() {
  let version;
  try {
    version = await _appiumXcode.default.getVersion(true);
  } catch (err) {
    _logger.default.debug(err);
    _logger.default.errorAndThrow(`Could not determine Xcode version: ${err.message}`);
  }
  if (version.versionFloat < 7.3) {
    _logger.default.errorAndThrow(`Xcode version '${version.versionString}'. Support for ` + `Xcode ${version.versionString} is not supported. ` + `Please upgrade to version 7.3 or higher`);
  }
  return version;
}
async function getAndCheckIosSdkVersion() {
  try {
    return await _appiumXcode.default.getMaxIOSSDK();
  } catch (err) {
    _logger.default.errorAndThrow(`Could not determine iOS SDK version: ${err.message}`);
  }
}
function getGenericSimulatorForIosVersion(platformVersion, deviceName) {
  const genericSimulators = _iosGenericSimulators.default[deviceName];
  if (!genericSimulators) {
    return null;
  }
  let result = null;
  const compareVersions = ([simOne], [simTwo]) => _support.util.compareVersions(simOne, '<', simTwo) ? -1 : 1;
  for (const [platformVersionFromList, iosSimulator] of genericSimulators.sort(compareVersions)) {
    if (_support.util.compareVersions(platformVersionFromList, '>', platformVersion)) {
      break;
    }
    result = iosSimulator;
  }
  return result;
}
function translateDeviceName(platformVersion, deviceName) {
  if (!deviceName) {
    return deviceName;
  }
  const deviceNameTranslated = getGenericSimulatorForIosVersion(platformVersion, `${deviceName}`.toLowerCase().trim());
  if (!deviceNameTranslated) {
    return deviceName;
  }
  _logger.default.debug(`Changing deviceName from '${deviceName}' to '${deviceNameTranslated}'`);
  return deviceNameTranslated;
}
async function clearLogs(locations) {
  _logger.default.debug('Clearing log files');
  const cleanupPromises = [];
  for (const location of locations) {
    if (!(await _support.fs.exists(location))) {
      continue;
    }
    cleanupPromises.push((async () => {
      let size;
      try {
        const {
          stdout
        } = await (0, _teen_process.exec)('du', ['-sh', location]);
        size = stdout.trim().split(/\s+/)[0];
      } catch (ign) {}
      try {
        _logger.default.debug(`Deleting '${location}'. ${size ? `Freeing ${size}.` : ''}`);
        await _support.fs.rimraf(location);
      } catch (err) {
        _logger.default.warn(`Unable to delete '${location}': ${err.message}`);
      }
    })());
  }
  if (!_lodash.default.isEmpty(cleanupPromises)) {
    await _bluebird.default.all(cleanupPromises);
  }
  _logger.default.debug('Finished clearing log files');
}
const derivedDataCleanupMarkers = new Map();
async function markSystemFilesForCleanup(wda) {
  if (!wda || !(await wda.retrieveDerivedDataPath())) {
    _logger.default.warn('No WebDriverAgent derived data available, so unable to mark system files for cleanup');
    return;
  }
  const logsRoot = _path.default.resolve(await wda.retrieveDerivedDataPath(), 'Logs');
  let markersCount = 0;
  if (derivedDataCleanupMarkers.has(logsRoot)) {
    markersCount = derivedDataCleanupMarkers.get(logsRoot);
  }
  derivedDataCleanupMarkers.set(logsRoot, ++markersCount);
}
async function clearSystemFiles(wda) {
  if (!wda || !(await wda.retrieveDerivedDataPath())) {
    _logger.default.warn('No WebDriverAgent derived data available, so unable to clear system files');
    return;
  }
  const logsRoot = _path.default.resolve(await wda.retrieveDerivedDataPath(), 'Logs');
  if (derivedDataCleanupMarkers.has(logsRoot)) {
    let markersCount = derivedDataCleanupMarkers.get(logsRoot);
    derivedDataCleanupMarkers.set(logsRoot, --markersCount);
    if (markersCount > 0) {
      _logger.default.info(`Not cleaning '${logsRoot}' folder, because the other session does not expect it to be cleaned`);
      return;
    }
  }
  derivedDataCleanupMarkers.set(logsRoot, 0);
  const globPattern = `${_os.default.tmpdir()}/${XCTEST_LOGS_CACHE_FOLDER_PREFIX}*/`;
  const dstFolders = await _support.fs.glob(globPattern);
  if (_lodash.default.isEmpty(dstFolders)) {
    _logger.default.debug(`Did not find the temporary XCTest logs root at '${globPattern}'`);
  } else {
    for (const dstFolder of dstFolders) {
      let scheduledFilesCount = 0;
      _bluebird.default.resolve(_support.fs.walkDir(dstFolder, true, (itemPath, isDir) => {
        if (isDir) {
          return;
        }
        const fileName = _path.default.basename(itemPath);
        if (!XCTEST_LOG_FILES_PATTERNS.some(p => p.test(fileName))) {
          return;
        }
        _support.fs.unlink(itemPath).catch(e => {
          _logger.default.info(e.message);
        });
        scheduledFilesCount++;
      })).finally(() => {
        if (scheduledFilesCount > 0) {
          _logger.default.info(`Scheduled ${scheduledFilesCount} temporary XCTest log ` + `${_support.util.pluralize('file', scheduledFilesCount)} for cleanup in '${dstFolder}'`);
        }
      }).catch(e => {
        _logger.default.info(e.message);
      });
    }
    _logger.default.debug(`Started background XCTest logs cleanup in '${dstFolders}'`);
  }
  if (await _support.fs.exists(logsRoot)) {
    _logger.default.info(`Cleaning test logs in '${logsRoot}' folder`);
    await clearLogs([logsRoot]);
    return;
  }
  _logger.default.info(`There is no ${logsRoot} folder, so not cleaning files`);
}
async function checkAppPresent(app) {
  _logger.default.debug(`Checking whether app '${app}' is actually present on file system`);
  if (!(await _support.fs.exists(app))) {
    _logger.default.errorAndThrow(`Could not find app at '${app}'`);
  }
  _logger.default.debug('App is present');
}
async function getDriverInfo() {
  const stat = await _support.fs.stat(_path.default.resolve(__dirname, '..'));
  const built = stat.mtime.getTime();
  const pkg = require(__filename.includes('build/lib/utils') ? '../../package.json' : '../package.json');
  const version = pkg.version;
  return {
    built,
    version
  };
}
function normalizeCommandTimeouts(value) {
  if (typeof value !== 'string') {
    return value;
  }
  let result = {};
  if (!isNaN(value)) {
    result[DEFAULT_TIMEOUT_KEY] = _lodash.default.toInteger(value);
    return result;
  }
  try {
    result = JSON.parse(value);
    if (!_lodash.default.isPlainObject(result)) {
      throw new Error();
    }
  } catch (err) {
    _logger.default.errorAndThrow(`"commandTimeouts" capability should be a valid JSON object. "${value}" was given instead`);
  }
  for (let [cmd, timeout] of _lodash.default.toPairs(result)) {
    if (!_lodash.default.isInteger(timeout) || timeout <= 0) {
      _logger.default.errorAndThrow(`The timeout for "${cmd}" should be a valid natural number of milliseconds. "${timeout}" was given instead`);
    }
  }
  return result;
}
async function printUser() {
  try {
    let {
      stdout
    } = await (0, _teen_process.exec)('whoami');
    _logger.default.debug(`Current user: '${stdout.trim()}'`);
  } catch (err) {
    _logger.default.debug(`Unable to get username running server: ${err.message}`);
  }
}
async function getPIDsListeningOnPort(port, filteringFunc = null) {
  const result = [];
  try {
    const {
      stdout
    } = await (0, _teen_process.exec)('lsof', ['-ti', `tcp:${port}`]);
    result.push(...stdout.trim().split(/\n+/));
  } catch (e) {
    return result;
  }
  if (!_lodash.default.isFunction(filteringFunc)) {
    return result;
  }
  return await _bluebird.default.filter(result, async x => {
    const {
      stdout
    } = await (0, _teen_process.exec)('ps', ['-p', x, '-o', 'command']);
    return await filteringFunc(stdout);
  });
}
async function encodeBase64OrUpload(localPath, remotePath = null, uploadOptions = {}) {
  if (!(await _support.fs.exists(localPath))) {
    _logger.default.errorAndThrow(`The file at '${localPath}' does not exist or is not accessible`);
  }
  if (_lodash.default.isEmpty(remotePath)) {
    const {
      size
    } = await _support.fs.stat(localPath);
    _logger.default.debug(`The size of the file is ${_support.util.toReadableSizeString(size)}`);
    return (await _support.util.toInMemoryBase64(localPath)).toString();
  }
  const {
    user,
    pass,
    method,
    headers,
    fileFieldName,
    formFields
  } = uploadOptions;
  const options = {
    method: method || 'PUT',
    headers,
    fileFieldName,
    formFields
  };
  if (user && pass) {
    options.auth = {
      user,
      pass
    };
  }
  await _support.net.uploadFile(localPath, remotePath, options);
  return '';
}
async function removeAllSessionWebSocketHandlers(server, sessionId) {
  if (!server || !_lodash.default.isFunction(server.getWebSocketHandlers)) {
    return;
  }
  const activeHandlers = await server.getWebSocketHandlers(sessionId);
  for (const pathname of _lodash.default.keys(activeHandlers)) {
    await server.removeWebSocketHandler(pathname);
  }
}
function isLocalHost(urlString) {
  try {
    const {
      hostname
    } = _url.default.parse(urlString);
    return ['localhost', '127.0.0.1', '::1', '::ffff:127.0.0.1'].includes(hostname);
  } catch (ign) {
    _logger.default.warn(`'${urlString}' cannot be parsed as a valid URL`);
  }
  return false;
}
function normalizePlatformVersion(originalVersion) {
  const normalizedVersion = _semver.default.coerce(originalVersion);
  if (!normalizedVersion) {
    throw new Error(`The platform version '${originalVersion}' should be a valid version number`);
  }
  return `${normalizedVersion.major}.${normalizedVersion.minor}`;
}
function requireArgs(argNames, opts = {}) {
  for (const argName of _lodash.default.isArray(argNames) ? argNames : [argNames]) {
    if (!_lodash.default.has(opts, argName)) {
      throw new _driver.errors.InvalidArgumentError(`'${argName}' argument must be provided`);
    }
  }
  return opts;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJERUZBVUxUX1RJTUVPVVRfS0VZIiwiWENURVNUX0xPR19GSUxFU19QQVRURVJOUyIsIlhDVEVTVF9MT0dTX0NBQ0hFX0ZPTERFUl9QUkVGSVgiLCJkZXRlY3RVZGlkIiwibG9nIiwiZGVidWciLCJ1ZGlkcyIsInV0aWxpdGllcyIsImdldENvbm5lY3RlZERldmljZXMiLCJfIiwiaXNFbXB0eSIsIkVycm9yIiwidWRpZCIsImxhc3QiLCJsZW5ndGgiLCJ3YXJuIiwiam9pbiIsImdldEFuZENoZWNrWGNvZGVWZXJzaW9uIiwidmVyc2lvbiIsInhjb2RlIiwiZ2V0VmVyc2lvbiIsImVyciIsImVycm9yQW5kVGhyb3ciLCJtZXNzYWdlIiwidmVyc2lvbkZsb2F0IiwidmVyc2lvblN0cmluZyIsImdldEFuZENoZWNrSW9zU2RrVmVyc2lvbiIsImdldE1heElPU1NESyIsImdldEdlbmVyaWNTaW11bGF0b3JGb3JJb3NWZXJzaW9uIiwicGxhdGZvcm1WZXJzaW9uIiwiZGV2aWNlTmFtZSIsImdlbmVyaWNTaW11bGF0b3JzIiwiaW9zR2VuZXJpY1NpbXVsYXRvcnMiLCJyZXN1bHQiLCJjb21wYXJlVmVyc2lvbnMiLCJzaW1PbmUiLCJzaW1Ud28iLCJ1dGlsIiwicGxhdGZvcm1WZXJzaW9uRnJvbUxpc3QiLCJpb3NTaW11bGF0b3IiLCJzb3J0IiwidHJhbnNsYXRlRGV2aWNlTmFtZSIsImRldmljZU5hbWVUcmFuc2xhdGVkIiwidG9Mb3dlckNhc2UiLCJ0cmltIiwiY2xlYXJMb2dzIiwibG9jYXRpb25zIiwiY2xlYW51cFByb21pc2VzIiwibG9jYXRpb24iLCJmcyIsImV4aXN0cyIsInB1c2giLCJzaXplIiwic3Rkb3V0IiwiZXhlYyIsInNwbGl0IiwiaWduIiwicmltcmFmIiwiQiIsImFsbCIsImRlcml2ZWREYXRhQ2xlYW51cE1hcmtlcnMiLCJNYXAiLCJtYXJrU3lzdGVtRmlsZXNGb3JDbGVhbnVwIiwid2RhIiwicmV0cmlldmVEZXJpdmVkRGF0YVBhdGgiLCJsb2dzUm9vdCIsInBhdGgiLCJyZXNvbHZlIiwibWFya2Vyc0NvdW50IiwiaGFzIiwiZ2V0Iiwic2V0IiwiY2xlYXJTeXN0ZW1GaWxlcyIsImluZm8iLCJnbG9iUGF0dGVybiIsIm9zIiwidG1wZGlyIiwiZHN0Rm9sZGVycyIsImdsb2IiLCJkc3RGb2xkZXIiLCJzY2hlZHVsZWRGaWxlc0NvdW50Iiwid2Fsa0RpciIsIml0ZW1QYXRoIiwiaXNEaXIiLCJmaWxlTmFtZSIsImJhc2VuYW1lIiwic29tZSIsInAiLCJ0ZXN0IiwidW5saW5rIiwiY2F0Y2giLCJlIiwiZmluYWxseSIsInBsdXJhbGl6ZSIsImNoZWNrQXBwUHJlc2VudCIsImFwcCIsImdldERyaXZlckluZm8iLCJzdGF0IiwiX19kaXJuYW1lIiwiYnVpbHQiLCJtdGltZSIsImdldFRpbWUiLCJwa2ciLCJyZXF1aXJlIiwiX19maWxlbmFtZSIsImluY2x1ZGVzIiwibm9ybWFsaXplQ29tbWFuZFRpbWVvdXRzIiwidmFsdWUiLCJpc05hTiIsInRvSW50ZWdlciIsIkpTT04iLCJwYXJzZSIsImlzUGxhaW5PYmplY3QiLCJjbWQiLCJ0aW1lb3V0IiwidG9QYWlycyIsImlzSW50ZWdlciIsInByaW50VXNlciIsImdldFBJRHNMaXN0ZW5pbmdPblBvcnQiLCJwb3J0IiwiZmlsdGVyaW5nRnVuYyIsImlzRnVuY3Rpb24iLCJmaWx0ZXIiLCJ4IiwiZW5jb2RlQmFzZTY0T3JVcGxvYWQiLCJsb2NhbFBhdGgiLCJyZW1vdGVQYXRoIiwidXBsb2FkT3B0aW9ucyIsInRvUmVhZGFibGVTaXplU3RyaW5nIiwidG9Jbk1lbW9yeUJhc2U2NCIsInRvU3RyaW5nIiwidXNlciIsInBhc3MiLCJtZXRob2QiLCJoZWFkZXJzIiwiZmlsZUZpZWxkTmFtZSIsImZvcm1GaWVsZHMiLCJvcHRpb25zIiwiYXV0aCIsIm5ldCIsInVwbG9hZEZpbGUiLCJyZW1vdmVBbGxTZXNzaW9uV2ViU29ja2V0SGFuZGxlcnMiLCJzZXJ2ZXIiLCJzZXNzaW9uSWQiLCJnZXRXZWJTb2NrZXRIYW5kbGVycyIsImFjdGl2ZUhhbmRsZXJzIiwicGF0aG5hbWUiLCJrZXlzIiwicmVtb3ZlV2ViU29ja2V0SGFuZGxlciIsImlzTG9jYWxIb3N0IiwidXJsU3RyaW5nIiwiaG9zdG5hbWUiLCJ1cmwiLCJub3JtYWxpemVQbGF0Zm9ybVZlcnNpb24iLCJvcmlnaW5hbFZlcnNpb24iLCJub3JtYWxpemVkVmVyc2lvbiIsInNlbXZlciIsImNvZXJjZSIsIm1ham9yIiwibWlub3IiLCJyZXF1aXJlQXJncyIsImFyZ05hbWVzIiwib3B0cyIsImFyZ05hbWUiLCJpc0FycmF5IiwiZXJyb3JzIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiXSwic291cmNlcyI6WyIuLi8uLi9saWIvdXRpbHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEIgZnJvbSAnYmx1ZWJpcmQnO1xuaW1wb3J0IHsgdXRpbGl0aWVzIH0gZnJvbSAnYXBwaXVtLWlvcy1kZXZpY2UnO1xuaW1wb3J0IHsgZnMsIHV0aWwsIG5ldCB9IGZyb20gJ2FwcGl1bS9zdXBwb3J0JztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ3RlZW5fcHJvY2Vzcyc7XG5pbXBvcnQgeGNvZGUgZnJvbSAnYXBwaXVtLXhjb2RlJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCBpb3NHZW5lcmljU2ltdWxhdG9ycyBmcm9tICcuL2lvcy1nZW5lcmljLXNpbXVsYXRvcnMnO1xuaW1wb3J0IHVybCBmcm9tICd1cmwnO1xuaW1wb3J0IG9zIGZyb20gJ29zJztcbmltcG9ydCBzZW12ZXIgZnJvbSAnc2VtdmVyJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJ2FwcGl1bS9kcml2ZXInO1xuXG5cbmNvbnN0IERFRkFVTFRfVElNRU9VVF9LRVkgPSAnZGVmYXVsdCc7XG5jb25zdCBYQ1RFU1RfTE9HX0ZJTEVTX1BBVFRFUk5TID0gW1xuICAvXlNlc3Npb24tV2ViRHJpdmVyQWdlbnRSdW5uZXIuKlxcLmxvZyQvaSxcbiAgL15TdGFuZGFyZE91dHB1dEFuZFN0YW5kYXJkRXJyb3JcXC50eHQkL2ksXG5dO1xuY29uc3QgWENURVNUX0xPR1NfQ0FDSEVfRk9MREVSX1BSRUZJWCA9ICdjb20uYXBwbGUuZHQuWENUZXN0JztcblxuXG5hc3luYyBmdW5jdGlvbiBkZXRlY3RVZGlkICgpIHtcbiAgbG9nLmRlYnVnKCdBdXRvLWRldGVjdGluZyByZWFsIGRldmljZSB1ZGlkLi4uJyk7XG4gIGNvbnN0IHVkaWRzID0gYXdhaXQgdXRpbGl0aWVzLmdldENvbm5lY3RlZERldmljZXMoKTtcbiAgaWYgKF8uaXNFbXB0eSh1ZGlkcykpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGRldmljZSBpcyBjb25uZWN0ZWQgdG8gdGhlIGhvc3QnKTtcbiAgfVxuICBjb25zdCB1ZGlkID0gXy5sYXN0KHVkaWRzKTtcbiAgaWYgKHVkaWRzLmxlbmd0aCA+IDEpIHtcbiAgICBsb2cud2FybihgTXVsdGlwbGUgZGV2aWNlcyBmb3VuZDogJHt1ZGlkcy5qb2luKCcsICcpfWApO1xuICAgIGxvZy53YXJuKGBDaG9vc2luZyAnJHt1ZGlkfScuIElmIHRoaXMgaXMgd3JvbmcsIG1hbnVhbGx5IHNldCB3aXRoICd1ZGlkJyBkZXNpcmVkIGNhcGFiaWxpdHlgKTtcbiAgfVxuICBsb2cuZGVidWcoYERldGVjdGVkIHJlYWwgZGV2aWNlIHVkaWQ6ICcke3VkaWR9J2ApO1xuICByZXR1cm4gdWRpZDtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0QW5kQ2hlY2tYY29kZVZlcnNpb24gKCkge1xuICBsZXQgdmVyc2lvbjtcbiAgdHJ5IHtcbiAgICB2ZXJzaW9uID0gYXdhaXQgeGNvZGUuZ2V0VmVyc2lvbih0cnVlKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmRlYnVnKGVycik7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBkZXRlcm1pbmUgWGNvZGUgdmVyc2lvbjogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxuXG4gIC8vIHdlIGRvIG5vdCBzdXBwb3J0IFhjb2RlcyA8IDcuMyxcbiAgaWYgKHZlcnNpb24udmVyc2lvbkZsb2F0IDwgNy4zKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYFhjb2RlIHZlcnNpb24gJyR7dmVyc2lvbi52ZXJzaW9uU3RyaW5nfScuIFN1cHBvcnQgZm9yIGAgK1xuICAgICAgICAgICAgICAgICAgICAgIGBYY29kZSAke3ZlcnNpb24udmVyc2lvblN0cmluZ30gaXMgbm90IHN1cHBvcnRlZC4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgYFBsZWFzZSB1cGdyYWRlIHRvIHZlcnNpb24gNy4zIG9yIGhpZ2hlcmApO1xuICB9XG4gIHJldHVybiB2ZXJzaW9uO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRBbmRDaGVja0lvc1Nka1ZlcnNpb24gKCkge1xuICB0cnkge1xuICAgIHJldHVybiBhd2FpdCB4Y29kZS5nZXRNYXhJT1NTREsoKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgbG9nLmVycm9yQW5kVGhyb3coYENvdWxkIG5vdCBkZXRlcm1pbmUgaU9TIFNESyB2ZXJzaW9uOiAke2Vyci5tZXNzYWdlfWApO1xuICB9XG59XG5cbi8qKlxuICogR2V0IHRoZSBnZW5lcmljIHNpbXVsYXRvciBmb3IgYSBnaXZlbiBJT1MgdmVyc2lvbiBhbmQgZGV2aWNlIHR5cGUgKGlQaG9uZSwgaVBhZClcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHBsYXRmb3JtVmVyc2lvbiBJT1MgdmVyc2lvbi4gZS5nLikgMTMuMFxuICogQHBhcmFtIHtzdHJpbmd9IGRldmljZU5hbWUgVHlwZSBvZiBJT1MgZGV2aWNlLiBDYW4gYmUgaVBob25lLCBpUGFkIChwb3NzaWJseSBtb3JlIGluIHRoZSBmdXR1cmUpXG4gKlxuICogQHJldHVybnMge3N0cmluZz99IEdlbmVyaWMgaVBob25lIG9yIGlQYWQgc2ltdWxhdG9yIChpZiBhcHBsaWNhYmxlKVxuICovXG5mdW5jdGlvbiBnZXRHZW5lcmljU2ltdWxhdG9yRm9ySW9zVmVyc2lvbiAocGxhdGZvcm1WZXJzaW9uLCBkZXZpY2VOYW1lKSB7XG4gIGNvbnN0IGdlbmVyaWNTaW11bGF0b3JzID0gaW9zR2VuZXJpY1NpbXVsYXRvcnNbZGV2aWNlTmFtZV07XG4gIGlmICghZ2VuZXJpY1NpbXVsYXRvcnMpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIEZpbmQgdGhlIGhpZ2hlc3QgaU9TIHZlcnNpb24gaW4gdGhlIGxpc3QgdGhhdCBpcyBiZWxvdyB0aGUgcHJvdmlkZWQgdmVyc2lvblxuICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgY29uc3QgY29tcGFyZVZlcnNpb25zID0gKFtzaW1PbmVdLCBbc2ltVHdvXSkgPT4gdXRpbC5jb21wYXJlVmVyc2lvbnMoc2ltT25lLCAnPCcsIHNpbVR3bykgPyAtMSA6IDE7XG4gIGZvciAoY29uc3QgW3BsYXRmb3JtVmVyc2lvbkZyb21MaXN0LCBpb3NTaW11bGF0b3JdIG9mIGdlbmVyaWNTaW11bGF0b3JzLnNvcnQoY29tcGFyZVZlcnNpb25zKSkge1xuICAgIGlmICh1dGlsLmNvbXBhcmVWZXJzaW9ucyhwbGF0Zm9ybVZlcnNpb25Gcm9tTGlzdCwgJz4nLCBwbGF0Zm9ybVZlcnNpb24pKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgcmVzdWx0ID0gaW9zU2ltdWxhdG9yO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHRyYW5zbGF0ZURldmljZU5hbWUgKHBsYXRmb3JtVmVyc2lvbiwgZGV2aWNlTmFtZSkge1xuICBpZiAoIWRldmljZU5hbWUpIHtcbiAgICByZXR1cm4gZGV2aWNlTmFtZTtcbiAgfVxuICBjb25zdCBkZXZpY2VOYW1lVHJhbnNsYXRlZCA9IGdldEdlbmVyaWNTaW11bGF0b3JGb3JJb3NWZXJzaW9uKHBsYXRmb3JtVmVyc2lvbiwgYCR7ZGV2aWNlTmFtZX1gLnRvTG93ZXJDYXNlKCkudHJpbSgpKTtcbiAgaWYgKCFkZXZpY2VOYW1lVHJhbnNsYXRlZCkge1xuICAgIHJldHVybiBkZXZpY2VOYW1lO1xuICB9XG5cbiAgbG9nLmRlYnVnKGBDaGFuZ2luZyBkZXZpY2VOYW1lIGZyb20gJyR7ZGV2aWNlTmFtZX0nIHRvICcke2RldmljZU5hbWVUcmFuc2xhdGVkfSdgKTtcbiAgcmV0dXJuIGRldmljZU5hbWVUcmFuc2xhdGVkO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjbGVhckxvZ3MgKGxvY2F0aW9ucykge1xuICBsb2cuZGVidWcoJ0NsZWFyaW5nIGxvZyBmaWxlcycpO1xuICBjb25zdCBjbGVhbnVwUHJvbWlzZXMgPSBbXTtcbiAgZm9yIChjb25zdCBsb2NhdGlvbiBvZiBsb2NhdGlvbnMpIHtcbiAgICBpZiAoIWF3YWl0IGZzLmV4aXN0cyhsb2NhdGlvbikpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNsZWFudXBQcm9taXNlcy5wdXNoKChhc3luYyAoKSA9PiB7XG4gICAgICBsZXQgc2l6ZTtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygnZHUnLCBbJy1zaCcsIGxvY2F0aW9uXSk7XG4gICAgICAgIHNpemUgPSBzdGRvdXQudHJpbSgpLnNwbGl0KC9cXHMrLylbMF07XG4gICAgICB9IGNhdGNoIChpZ24pIHt9XG4gICAgICB0cnkge1xuICAgICAgICBsb2cuZGVidWcoYERlbGV0aW5nICcke2xvY2F0aW9ufScuICR7c2l6ZSA/IGBGcmVlaW5nICR7c2l6ZX0uYCA6ICcnfWApO1xuICAgICAgICBhd2FpdCBmcy5yaW1yYWYobG9jYXRpb24pO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGxvZy53YXJuKGBVbmFibGUgdG8gZGVsZXRlICcke2xvY2F0aW9ufSc6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICB9XG4gICAgfSkoKSk7XG4gIH1cbiAgaWYgKCFfLmlzRW1wdHkoY2xlYW51cFByb21pc2VzKSkge1xuICAgIGF3YWl0IEIuYWxsKGNsZWFudXBQcm9taXNlcyk7XG4gIH1cbiAgbG9nLmRlYnVnKCdGaW5pc2hlZCBjbGVhcmluZyBsb2cgZmlsZXMnKTtcbn1cblxuLy8gVGhpcyBtYXAgY29udGFpbnMgZGVyaXZlZCBkYXRhIGxvZ3MgZm9sZGVycyBhcyBrZXlzXG4vLyBhbmQgdmFsdWVzIGFyZSB0aGUgY291bnQgb2YgdGltZXMgdGhlIHBhcnRpY3VsYXJcbi8vIGZvbGRlciBoYXMgYmVlbiBzY2hlZHVsZWQgZm9yIHJlbW92YWxcbmNvbnN0IGRlcml2ZWREYXRhQ2xlYW51cE1hcmtlcnMgPSBuZXcgTWFwKCk7XG5cbmFzeW5jIGZ1bmN0aW9uIG1hcmtTeXN0ZW1GaWxlc0ZvckNsZWFudXAgKHdkYSkge1xuICBpZiAoIXdkYSB8fCAhYXdhaXQgd2RhLnJldHJpZXZlRGVyaXZlZERhdGFQYXRoKCkpIHtcbiAgICBsb2cud2FybignTm8gV2ViRHJpdmVyQWdlbnQgZGVyaXZlZCBkYXRhIGF2YWlsYWJsZSwgc28gdW5hYmxlIHRvIG1hcmsgc3lzdGVtIGZpbGVzIGZvciBjbGVhbnVwJyk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgbG9nc1Jvb3QgPSBwYXRoLnJlc29sdmUoYXdhaXQgd2RhLnJldHJpZXZlRGVyaXZlZERhdGFQYXRoKCksICdMb2dzJyk7XG4gIGxldCBtYXJrZXJzQ291bnQgPSAwO1xuICBpZiAoZGVyaXZlZERhdGFDbGVhbnVwTWFya2Vycy5oYXMobG9nc1Jvb3QpKSB7XG4gICAgbWFya2Vyc0NvdW50ID0gZGVyaXZlZERhdGFDbGVhbnVwTWFya2Vycy5nZXQobG9nc1Jvb3QpO1xuICB9XG4gIGRlcml2ZWREYXRhQ2xlYW51cE1hcmtlcnMuc2V0KGxvZ3NSb290LCArK21hcmtlcnNDb3VudCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNsZWFyU3lzdGVtRmlsZXMgKHdkYSkge1xuICAvLyBvbmx5IHdhbnQgdG8gY2xlYXIgdGhlIHN5c3RlbSBmaWxlcyBmb3IgdGhlIHBhcnRpY3VsYXIgV0RBIHhjb2RlIHJ1blxuICBpZiAoIXdkYSB8fCAhYXdhaXQgd2RhLnJldHJpZXZlRGVyaXZlZERhdGFQYXRoKCkpIHtcbiAgICBsb2cud2FybignTm8gV2ViRHJpdmVyQWdlbnQgZGVyaXZlZCBkYXRhIGF2YWlsYWJsZSwgc28gdW5hYmxlIHRvIGNsZWFyIHN5c3RlbSBmaWxlcycpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IGxvZ3NSb290ID0gcGF0aC5yZXNvbHZlKGF3YWl0IHdkYS5yZXRyaWV2ZURlcml2ZWREYXRhUGF0aCgpLCAnTG9ncycpO1xuICBpZiAoZGVyaXZlZERhdGFDbGVhbnVwTWFya2Vycy5oYXMobG9nc1Jvb3QpKSB7XG4gICAgbGV0IG1hcmtlcnNDb3VudCA9IGRlcml2ZWREYXRhQ2xlYW51cE1hcmtlcnMuZ2V0KGxvZ3NSb290KTtcbiAgICBkZXJpdmVkRGF0YUNsZWFudXBNYXJrZXJzLnNldChsb2dzUm9vdCwgLS1tYXJrZXJzQ291bnQpO1xuICAgIGlmIChtYXJrZXJzQ291bnQgPiAwKSB7XG4gICAgICBsb2cuaW5mbyhgTm90IGNsZWFuaW5nICcke2xvZ3NSb290fScgZm9sZGVyLCBiZWNhdXNlIHRoZSBvdGhlciBzZXNzaW9uIGRvZXMgbm90IGV4cGVjdCBpdCB0byBiZSBjbGVhbmVkYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9XG4gIGRlcml2ZWREYXRhQ2xlYW51cE1hcmtlcnMuc2V0KGxvZ3NSb290LCAwKTtcblxuICAvLyBDbGVhbmluZyB1cCBiaWcgdGVtcG9yYXJ5IGZpbGVzIGNyZWF0ZWQgYnkgWENUZXN0OiBodHRwczovL2dpdGh1Yi5jb20vYXBwaXVtL2FwcGl1bS9pc3N1ZXMvOTQxMFxuICBjb25zdCBnbG9iUGF0dGVybiA9IGAke29zLnRtcGRpcigpfS8ke1hDVEVTVF9MT0dTX0NBQ0hFX0ZPTERFUl9QUkVGSVh9Ki9gO1xuICBjb25zdCBkc3RGb2xkZXJzID0gYXdhaXQgZnMuZ2xvYihnbG9iUGF0dGVybik7XG4gIGlmIChfLmlzRW1wdHkoZHN0Rm9sZGVycykpIHtcbiAgICBsb2cuZGVidWcoYERpZCBub3QgZmluZCB0aGUgdGVtcG9yYXJ5IFhDVGVzdCBsb2dzIHJvb3QgYXQgJyR7Z2xvYlBhdHRlcm59J2ApO1xuICB9IGVsc2Uge1xuICAgIC8vIHBlcmZvcm0gdGhlIGNsZWFudXAgYXN5bmNocm9ub3VzbHlcbiAgICBmb3IgKGNvbnN0IGRzdEZvbGRlciBvZiBkc3RGb2xkZXJzKSB7XG4gICAgICBsZXQgc2NoZWR1bGVkRmlsZXNDb3VudCA9IDA7XG4gICAgICBCLnJlc29sdmUoZnMud2Fsa0Rpcihkc3RGb2xkZXIsIHRydWUsIChpdGVtUGF0aCwgaXNEaXIpID0+IHtcbiAgICAgICAgaWYgKGlzRGlyKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGZpbGVOYW1lID0gcGF0aC5iYXNlbmFtZShpdGVtUGF0aCk7XG4gICAgICAgIGlmICghWENURVNUX0xPR19GSUxFU19QQVRURVJOUy5zb21lKChwKSA9PiBwLnRlc3QoZmlsZU5hbWUpKSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRlbGV0ZSB0aGUgZmlsZSBhc3luY2hyb25vdXNseVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tdGhlblxuICAgICAgICBmcy51bmxpbmsoaXRlbVBhdGgpLmNhdGNoKChlKSA9PiB7XG4gICAgICAgICAgbG9nLmluZm8oZS5tZXNzYWdlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHNjaGVkdWxlZEZpbGVzQ291bnQrKztcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByb21pc2UvcHJlZmVyLWF3YWl0LXRvLXRoZW5cbiAgICAgIH0pKS5maW5hbGx5KCgpID0+IHtcbiAgICAgICAgaWYgKHNjaGVkdWxlZEZpbGVzQ291bnQgPiAwKSB7XG4gICAgICAgICAgbG9nLmluZm8oYFNjaGVkdWxlZCAke3NjaGVkdWxlZEZpbGVzQ291bnR9IHRlbXBvcmFyeSBYQ1Rlc3QgbG9nIGAgK1xuICAgICAgICAgICAgYCR7dXRpbC5wbHVyYWxpemUoJ2ZpbGUnLCBzY2hlZHVsZWRGaWxlc0NvdW50KX0gZm9yIGNsZWFudXAgaW4gJyR7ZHN0Rm9sZGVyfSdgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tdGhlblxuICAgICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgbG9nLmluZm8oZS5tZXNzYWdlKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBsb2cuZGVidWcoYFN0YXJ0ZWQgYmFja2dyb3VuZCBYQ1Rlc3QgbG9ncyBjbGVhbnVwIGluICcke2RzdEZvbGRlcnN9J2ApO1xuICB9XG5cbiAgaWYgKGF3YWl0IGZzLmV4aXN0cyhsb2dzUm9vdCkpIHtcbiAgICBsb2cuaW5mbyhgQ2xlYW5pbmcgdGVzdCBsb2dzIGluICcke2xvZ3NSb290fScgZm9sZGVyYCk7XG4gICAgYXdhaXQgY2xlYXJMb2dzKFtsb2dzUm9vdF0pO1xuICAgIHJldHVybjtcbiAgfVxuICBsb2cuaW5mbyhgVGhlcmUgaXMgbm8gJHtsb2dzUm9vdH0gZm9sZGVyLCBzbyBub3QgY2xlYW5pbmcgZmlsZXNgKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tBcHBQcmVzZW50IChhcHApIHtcbiAgbG9nLmRlYnVnKGBDaGVja2luZyB3aGV0aGVyIGFwcCAnJHthcHB9JyBpcyBhY3R1YWxseSBwcmVzZW50IG9uIGZpbGUgc3lzdGVtYCk7XG4gIGlmICghKGF3YWl0IGZzLmV4aXN0cyhhcHApKSkge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBDb3VsZCBub3QgZmluZCBhcHAgYXQgJyR7YXBwfSdgKTtcbiAgfVxuICBsb2cuZGVidWcoJ0FwcCBpcyBwcmVzZW50Jyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldERyaXZlckluZm8gKCkge1xuICBjb25zdCBzdGF0ID0gYXdhaXQgZnMuc3RhdChwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nKSk7XG4gIGNvbnN0IGJ1aWx0ID0gc3RhdC5tdGltZS5nZXRUaW1lKCk7XG5cbiAgLy8gZ2V0IHRoZSBwYWNrYWdlLmpzb24gYW5kIHRoZSB2ZXJzaW9uIGZyb20gaXRcbiAgY29uc3QgcGtnID0gcmVxdWlyZShfX2ZpbGVuYW1lLmluY2x1ZGVzKCdidWlsZC9saWIvdXRpbHMnKSA/ICcuLi8uLi9wYWNrYWdlLmpzb24nIDogJy4uL3BhY2thZ2UuanNvbicpO1xuICBjb25zdCB2ZXJzaW9uID0gcGtnLnZlcnNpb247XG5cbiAgcmV0dXJuIHtcbiAgICBidWlsdCxcbiAgICB2ZXJzaW9uLFxuICB9O1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVDb21tYW5kVGltZW91dHMgKHZhbHVlKSB7XG4gIC8vIFRoZSB2YWx1ZSBpcyBub3JtYWxpemVkIGFscmVhZHlcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBsZXQgcmVzdWx0ID0ge307XG4gIC8vIFVzZSBhcyBkZWZhdWx0IHRpbWVvdXQgZm9yIGFsbCBjb21tYW5kcyBpZiBhIHNpbmdsZSBpbnRlZ2VyIHZhbHVlIGlzIHByb3ZpZGVkXG4gIGlmICghaXNOYU4odmFsdWUpKSB7XG4gICAgcmVzdWx0W0RFRkFVTFRfVElNRU9VVF9LRVldID0gXy50b0ludGVnZXIodmFsdWUpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyBKU09OIG9iamVjdCBoYXMgYmVlbiBwcm92aWRlZC4gTGV0J3MgcGFyc2UgaXRcbiAgdHJ5IHtcbiAgICByZXN1bHQgPSBKU09OLnBhcnNlKHZhbHVlKTtcbiAgICBpZiAoIV8uaXNQbGFpbk9iamVjdChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGxvZy5lcnJvckFuZFRocm93KGBcImNvbW1hbmRUaW1lb3V0c1wiIGNhcGFiaWxpdHkgc2hvdWxkIGJlIGEgdmFsaWQgSlNPTiBvYmplY3QuIFwiJHt2YWx1ZX1cIiB3YXMgZ2l2ZW4gaW5zdGVhZGApO1xuICB9XG4gIGZvciAobGV0IFtjbWQsIHRpbWVvdXRdIG9mIF8udG9QYWlycyhyZXN1bHQpKSB7XG4gICAgaWYgKCFfLmlzSW50ZWdlcih0aW1lb3V0KSB8fCB0aW1lb3V0IDw9IDApIHtcbiAgICAgIGxvZy5lcnJvckFuZFRocm93KGBUaGUgdGltZW91dCBmb3IgXCIke2NtZH1cIiBzaG91bGQgYmUgYSB2YWxpZCBuYXR1cmFsIG51bWJlciBvZiBtaWxsaXNlY29uZHMuIFwiJHt0aW1lb3V0fVwiIHdhcyBnaXZlbiBpbnN0ZWFkYCk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHByaW50VXNlciAoKSB7XG4gIHRyeSB7XG4gICAgbGV0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygnd2hvYW1pJyk7XG4gICAgbG9nLmRlYnVnKGBDdXJyZW50IHVzZXI6ICcke3N0ZG91dC50cmltKCl9J2ApO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICBsb2cuZGVidWcoYFVuYWJsZSB0byBnZXQgdXNlcm5hbWUgcnVubmluZyBzZXJ2ZXI6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIElEcyBvZiBwcm9jZXNzZXMgbGlzdGVuaW5nIG9uIHRoZSBwYXJ0aWN1bGFyIHN5c3RlbSBwb3J0LlxuICogSXQgaXMgYWxzbyBwb3NzaWJsZSB0byBhcHBseSBhZGRpdGlvbmFsIGZpbHRlcmluZyBiYXNlZCBvbiB0aGVcbiAqIHByb2Nlc3MgY29tbWFuZCBsaW5lLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gcG9ydCAtIFRoZSBwb3J0IG51bWJlci5cbiAqIEBwYXJhbSB7P0Z1bmN0aW9ufSBmaWx0ZXJpbmdGdW5jIC0gT3B0aW9uYWwgbGFtYmRhIGZ1bmN0aW9uLCB3aGljaFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWNlaXZlcyBjb21tYW5kIGxpbmUgc3RyaW5nIG9mIHRoZSBwYXJ0aWN1bGFyIHByb2Nlc3NcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuaW5nIG9uIGdpdmVuIHBvcnQsIGFuZCBpcyBleHBlY3RlZCB0byByZXR1cm5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWl0aGVyIHRydWUgb3IgZmFsc2UgdG8gaW5jbHVkZS9leGNsdWRlIHRoZSBjb3JyZXNwb25kaW5nIFBJRFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIHRoZSByZXN1bHRpbmcgYXJyYXkuXG4gKiBAcmV0dXJucyB7QXJyYXk8c3RyaW5nPn0gLSB0aGUgbGlzdCBvZiBtYXRjaGVkIHByb2Nlc3MgaWRzLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRQSURzTGlzdGVuaW5nT25Qb3J0IChwb3J0LCBmaWx0ZXJpbmdGdW5jID0gbnVsbCkge1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgdHJ5IHtcbiAgICAvLyBUaGlzIG9ubHkgd29ya3Mgc2luY2UgTWFjIE9TIFggRWwgQ2FwaXRhblxuICAgIGNvbnN0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygnbHNvZicsIFsnLXRpJywgYHRjcDoke3BvcnR9YF0pO1xuICAgIHJlc3VsdC5wdXNoKC4uLihzdGRvdXQudHJpbSgpLnNwbGl0KC9cXG4rLykpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoIV8uaXNGdW5jdGlvbihmaWx0ZXJpbmdGdW5jKSkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGF3YWl0IEIuZmlsdGVyKHJlc3VsdCwgYXN5bmMgKHgpID0+IHtcbiAgICBjb25zdCB7c3Rkb3V0fSA9IGF3YWl0IGV4ZWMoJ3BzJywgWyctcCcsIHgsICctbycsICdjb21tYW5kJ10pO1xuICAgIHJldHVybiBhd2FpdCBmaWx0ZXJpbmdGdW5jKHN0ZG91dCk7XG4gIH0pO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFVwbG9hZE9wdGlvbnNcbiAqXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHVzZXIgLSBUaGUgbmFtZSBvZiB0aGUgdXNlciBmb3IgdGhlIHJlbW90ZSBhdXRoZW50aWNhdGlvbi4gT25seSB3b3JrcyBpZiBgcmVtb3RlUGF0aGAgaXMgcHJvdmlkZWQuXG4gKiBAcHJvcGVydHkgez9zdHJpbmd9IHBhc3MgLSBUaGUgcGFzc3dvcmQgZm9yIHRoZSByZW1vdGUgYXV0aGVudGljYXRpb24uIE9ubHkgd29ya3MgaWYgYHJlbW90ZVBhdGhgIGlzIHByb3ZpZGVkLlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSBtZXRob2QgLSBUaGUgaHR0cCBtdWx0aXBhcnQgdXBsb2FkIG1ldGhvZCBuYW1lLiBUaGUgJ1BVVCcgb25lIGlzIHVzZWQgYnkgZGVmYXVsdC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT25seSB3b3JrcyBpZiBgcmVtb3RlUGF0aGAgaXMgcHJvdmlkZWQuXG4gKiBAcHJvcGVydHkgez9PYmplY3R9IGhlYWRlcnMgLSBBZGRpdGlvbmFsIGhlYWRlcnMgbWFwcGluZyBmb3IgbXVsdGlwYXJ0IGh0dHAocykgdXBsb2Fkc1xuICogQHByb3BlcnR5IHs/c3RyaW5nfSBmaWxlRmllbGROYW1lIFtmaWxlXSAtIFRoZSBuYW1lIG9mIHRoZSBmb3JtIGZpZWxkLCB3aGVyZSB0aGUgZmlsZSBjb250ZW50IEJMT0Igc2hvdWxkIGJlIHN0b3JlZCBmb3JcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodHRwKHMpIHVwbG9hZHNcbiAqIEBwcm9wZXJ0eSB7P09iamVjdHxBcnJheTxQYWlyPn0gZm9ybUZpZWxkcyAtIEFkZGl0aW9uYWwgZm9ybSBmaWVsZHMgZm9yIG11bHRpcGFydCBodHRwKHMpIHVwbG9hZHNcbiAqL1xuXG5cbi8qKlxuICogRW5jb2RlcyB0aGUgZ2l2ZW4gbG9jYWwgZmlsZSB0byBiYXNlNjQgYW5kIHJldHVybnMgdGhlIHJlc3VsdGluZyBzdHJpbmdcbiAqIG9yIHVwbG9hZHMgaXQgdG8gYSByZW1vdGUgc2VydmVyIHVzaW5nIGh0dHAvaHR0cHMgb3IgZnRwIHByb3RvY29sc1xuICogaWYgYHJlbW90ZVBhdGhgIGlzIHNldFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBsb2NhbFBhdGggLSBUaGUgcGF0aCB0byBhbiBleGlzdGluZyBsb2NhbCBmaWxlXG4gKiBAcGFyYW0gez9zdHJpbmd9IHJlbW90ZVBhdGggLSBUaGUgcGF0aCB0byB0aGUgcmVtb3RlIGxvY2F0aW9uLCB3aGVyZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBmaWxlIHNob3VsZCBiZSB1cGxvYWRlZFxuICogQHBhcmFtIHs/VXBsb2FkT3B0aW9uc30gdXBsb2FkT3B0aW9ucyAtIFNldCBvZiB1cGxvYWQgb3B0aW9uc1xuICogQHJldHVybnMge3N0cmluZ30gRWl0aGVyIGFuIGVtcHR5IHN0cmluZyBpZiB0aGUgdXBsb2FkIHdhcyBzdWNjZXNzZnVsIG9yXG4gKiBiYXNlNjQtZW5jb2RlZCBmaWxlIHJlcHJlc2VudGF0aW9uIGlmIGByZW1vdGVQYXRoYCBpcyBmYWxzeVxuICovXG5hc3luYyBmdW5jdGlvbiBlbmNvZGVCYXNlNjRPclVwbG9hZCAobG9jYWxQYXRoLCByZW1vdGVQYXRoID0gbnVsbCwgdXBsb2FkT3B0aW9ucyA9IHt9KSB7XG4gIGlmICghYXdhaXQgZnMuZXhpc3RzKGxvY2FsUGF0aCkpIHtcbiAgICBsb2cuZXJyb3JBbmRUaHJvdyhgVGhlIGZpbGUgYXQgJyR7bG9jYWxQYXRofScgZG9lcyBub3QgZXhpc3Qgb3IgaXMgbm90IGFjY2Vzc2libGVgKTtcbiAgfVxuXG4gIGlmIChfLmlzRW1wdHkocmVtb3RlUGF0aCkpIHtcbiAgICBjb25zdCB7c2l6ZX0gPSBhd2FpdCBmcy5zdGF0KGxvY2FsUGF0aCk7XG4gICAgbG9nLmRlYnVnKGBUaGUgc2l6ZSBvZiB0aGUgZmlsZSBpcyAke3V0aWwudG9SZWFkYWJsZVNpemVTdHJpbmcoc2l6ZSl9YCk7XG4gICAgcmV0dXJuIChhd2FpdCB1dGlsLnRvSW5NZW1vcnlCYXNlNjQobG9jYWxQYXRoKSkudG9TdHJpbmcoKTtcbiAgfVxuXG4gIGNvbnN0IHt1c2VyLCBwYXNzLCBtZXRob2QsIGhlYWRlcnMsIGZpbGVGaWVsZE5hbWUsIGZvcm1GaWVsZHN9ID0gdXBsb2FkT3B0aW9ucztcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICBtZXRob2Q6IG1ldGhvZCB8fCAnUFVUJyxcbiAgICBoZWFkZXJzLFxuICAgIGZpbGVGaWVsZE5hbWUsXG4gICAgZm9ybUZpZWxkcyxcbiAgfTtcbiAgaWYgKHVzZXIgJiYgcGFzcykge1xuICAgIG9wdGlvbnMuYXV0aCA9IHt1c2VyLCBwYXNzfTtcbiAgfVxuICBhd2FpdCBuZXQudXBsb2FkRmlsZShsb2NhbFBhdGgsIHJlbW90ZVBhdGgsIG9wdGlvbnMpO1xuICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogU3RvcHMgYW5kIHJlbW92ZXMgYWxsIHdlYiBzb2NrZXQgaGFuZGxlcnMgdGhhdCBhcmUgbGlzdGVuaW5nXG4gKiBpbiBzY29wZSBvZiB0aGUgY3VycmVjdCBzZXNzaW9uLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXJ2ZXIgLSBUaGUgaW5zdGFuY2Ugb2YgTm9kZUpzIEhUVFAgc2VydmVyLFxuICogd2hpY2ggaG9zdHMgQXBwaXVtXG4gKiBAcGFyYW0ge3N0cmluZ30gc2Vzc2lvbklkIC0gVGhlIGlkIG9mIHRoZSBjdXJyZW50IHNlc3Npb25cbiAqL1xuYXN5bmMgZnVuY3Rpb24gcmVtb3ZlQWxsU2Vzc2lvbldlYlNvY2tldEhhbmRsZXJzIChzZXJ2ZXIsIHNlc3Npb25JZCkge1xuICBpZiAoIXNlcnZlciB8fCAhXy5pc0Z1bmN0aW9uKHNlcnZlci5nZXRXZWJTb2NrZXRIYW5kbGVycykpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBhY3RpdmVIYW5kbGVycyA9IGF3YWl0IHNlcnZlci5nZXRXZWJTb2NrZXRIYW5kbGVycyhzZXNzaW9uSWQpO1xuICBmb3IgKGNvbnN0IHBhdGhuYW1lIG9mIF8ua2V5cyhhY3RpdmVIYW5kbGVycykpIHtcbiAgICBhd2FpdCBzZXJ2ZXIucmVtb3ZlV2ViU29ja2V0SGFuZGxlcihwYXRobmFtZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgdGhlIHVybFN0cmluZyBpcyBsb2NhbGhvc3RcbiAqIEBwYXJhbSB7P3N0cmluZ30gdXJsU3RyaW5nXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJuIHRydWUgaWYgdGhlIHVybFN0cmluZyBpcyBsb2NhbGhvc3RcbiAqL1xuZnVuY3Rpb24gaXNMb2NhbEhvc3QgKHVybFN0cmluZykge1xuICB0cnkge1xuICAgIGNvbnN0IHtob3N0bmFtZX0gPSB1cmwucGFyc2UodXJsU3RyaW5nKTtcbiAgICByZXR1cm4gWydsb2NhbGhvc3QnLCAnMTI3LjAuMC4xJywgJzo6MScsICc6OmZmZmY6MTI3LjAuMC4xJ10uaW5jbHVkZXMoaG9zdG5hbWUpO1xuICB9IGNhdGNoIChpZ24pIHtcbiAgICBsb2cud2FybihgJyR7dXJsU3RyaW5nfScgY2Fubm90IGJlIHBhcnNlZCBhcyBhIHZhbGlkIFVSTGApO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBOb3JtYWxpemVzIHBsYXRmb3JtVmVyc2lvbiB0byBhIHZhbGlkIGlPUyB2ZXJzaW9uIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBvcmlnaW5hbFZlcnNpb24gLSBMb29zZSB2ZXJzaW9uIG51bWJlciwgdGhhdCBjYW4gYmUgcGFyc2VkIGJ5IHNlbXZlclxuICogQHJldHVybiB7c3RyaW5nfSBpT1MgdmVyc2lvbiBudW1iZXIgaW4gPG1ham9yPi48bWlub3I+IGZvcm1hdFxuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSB2ZXJzaW9uIG51bWJlciBjYW5ub3QgYmUgcGFyc2VkXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBsYXRmb3JtVmVyc2lvbiAob3JpZ2luYWxWZXJzaW9uKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWRWZXJzaW9uID0gc2VtdmVyLmNvZXJjZShvcmlnaW5hbFZlcnNpb24pO1xuICBpZiAoIW5vcm1hbGl6ZWRWZXJzaW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgcGxhdGZvcm0gdmVyc2lvbiAnJHtvcmlnaW5hbFZlcnNpb259JyBzaG91bGQgYmUgYSB2YWxpZCB2ZXJzaW9uIG51bWJlcmApO1xuICB9XG4gIHJldHVybiBgJHtub3JtYWxpemVkVmVyc2lvbi5tYWpvcn0uJHtub3JtYWxpemVkVmVyc2lvbi5taW5vcn1gO1xufVxuXG4vKipcbiAgKiBBc3NlcnQgdGhlIHByZXNlbmNlIG9mIHBhcnRpY3VsYXIga2V5cyBpbiB0aGUgZ2l2ZW4gb2JqZWN0XG4gICpcbiAgKiBAcGFyYW0ge3N0cmluZ3xBcnJheTxzdHJpbmc+fSBhcmdOYW1lcyBvbmUgb3IgbW9yZSBrZXkgbmFtZXNcbiAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyB0aGUgb2JqZWN0IHRvIGNoZWNrXG4gICogQHJldHVybnMge09iamVjdH0gdGhlIHNhbWUgZ2l2ZW4gb2JqZWN0XG4gICovXG5mdW5jdGlvbiByZXF1aXJlQXJncyAoYXJnTmFtZXMsIG9wdHMgPSB7fSkge1xuICBmb3IgKGNvbnN0IGFyZ05hbWUgb2YgKF8uaXNBcnJheShhcmdOYW1lcykgPyBhcmdOYW1lcyA6IFthcmdOYW1lc10pKSB7XG4gICAgaWYgKCFfLmhhcyhvcHRzLCBhcmdOYW1lKSkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgJyR7YXJnTmFtZX0nIGFyZ3VtZW50IG11c3QgYmUgcHJvdmlkZWRgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9wdHM7XG59XG5cblxuZXhwb3J0IHtcbiAgZGV0ZWN0VWRpZCwgZ2V0QW5kQ2hlY2tYY29kZVZlcnNpb24sIGdldEFuZENoZWNrSW9zU2RrVmVyc2lvbixcbiAgY2hlY2tBcHBQcmVzZW50LCBnZXREcml2ZXJJbmZvLFxuICBjbGVhclN5c3RlbUZpbGVzLCB0cmFuc2xhdGVEZXZpY2VOYW1lLCBub3JtYWxpemVDb21tYW5kVGltZW91dHMsXG4gIERFRkFVTFRfVElNRU9VVF9LRVksIG1hcmtTeXN0ZW1GaWxlc0ZvckNsZWFudXAsIHByaW50VXNlcixcbiAgZ2V0UElEc0xpc3RlbmluZ09uUG9ydCwgZW5jb2RlQmFzZTY0T3JVcGxvYWQsIHJlbW92ZUFsbFNlc3Npb25XZWJTb2NrZXRIYW5kbGVycyxcbiAgaXNMb2NhbEhvc3QsIG5vcm1hbGl6ZVBsYXRmb3JtVmVyc2lvbiwgY2xlYXJMb2dzLCByZXF1aXJlQXJnc1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0EsTUFBTUEsbUJBQW1CLEdBQUcsU0FBUztBQUFDO0FBQ3RDLE1BQU1DLHlCQUF5QixHQUFHLENBQ2hDLHdDQUF3QyxFQUN4Qyx3Q0FBd0MsQ0FDekM7QUFDRCxNQUFNQywrQkFBK0IsR0FBRyxxQkFBcUI7QUFHN0QsZUFBZUMsVUFBVSxHQUFJO0VBQzNCQyxlQUFHLENBQUNDLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQztFQUMvQyxNQUFNQyxLQUFLLEdBQUcsTUFBTUMsMEJBQVMsQ0FBQ0MsbUJBQW1CLEVBQUU7RUFDbkQsSUFBSUMsZUFBQyxDQUFDQyxPQUFPLENBQUNKLEtBQUssQ0FBQyxFQUFFO0lBQ3BCLE1BQU0sSUFBSUssS0FBSyxDQUFDLG9DQUFvQyxDQUFDO0VBQ3ZEO0VBQ0EsTUFBTUMsSUFBSSxHQUFHSCxlQUFDLENBQUNJLElBQUksQ0FBQ1AsS0FBSyxDQUFDO0VBQzFCLElBQUlBLEtBQUssQ0FBQ1EsTUFBTSxHQUFHLENBQUMsRUFBRTtJQUNwQlYsZUFBRyxDQUFDVyxJQUFJ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