"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IOSPerformanceLog = void 0;
require("source-map-support/register");
var _support = require("appium/support");
var _lodash = _interopRequireDefault(require("lodash"));
const log = _support.logger.getLogger('IOSPerformanceLog');
const MAX_EVENTS = 5000;
class IOSPerformanceLog {
  constructor(remoteDebugger, maxEvents = MAX_EVENTS) {
    this.remoteDebugger = remoteDebugger;
    this.maxEvents = parseInt(maxEvents, 10);
    this.timelineEvents = [];
  }
  async startCapture() {
    log.debug('Starting performance (Timeline) log capture');
    this.timelineEvents = [];
    return await this.remoteDebugger.startTimeline(this.onTimelineEvent.bind(this));
  }
  async stopCapture() {
    log.debug('Stopping performance (Timeline) log capture');
    return await this.remoteDebugger.stopTimeline();
  }
  onTimelineEvent(event) {
    log.debug(`Received Timeline event: ${_lodash.default.truncate(JSON.stringify(event))}`);
    this.timelineEvents.push(event);
    if (this.timelineEvents.length > this.maxEvents) {
      let removedEvent = this.timelineEvents.shift();
      log.warn(`Too many Timeline events, removing earliest: ${_lodash.default.truncate(JSON.stringify(removedEvent))}`);
    }
  }
  async getLogs() {
    let events = this.timelineEvents;
    log.debug('Flushing Timeline events');
    this.timelineEvents = [];
    return events;
  }
  async getAllLogs() {
    return this.getLogs();
  }
}
exports.IOSPerformanceLog = IOSPerformanceLog;
var _default = IOSPerformanceLog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2ciLCJsb2dnZXIiLCJnZXRMb2dnZXIiLCJNQVhfRVZFTlRTIiwiSU9TUGVyZm9ybWFuY2VMb2ciLCJjb25zdHJ1Y3RvciIsInJlbW90ZURlYnVnZ2VyIiwibWF4RXZlbnRzIiwicGFyc2VJbnQiLCJ0aW1lbGluZUV2ZW50cyIsInN0YXJ0Q2FwdHVyZSIsImRlYnVnIiwic3RhcnRUaW1lbGluZSIsIm9uVGltZWxpbmVFdmVudCIsImJpbmQiLCJzdG9wQ2FwdHVyZSIsInN0b3BUaW1lbGluZSIsImV2ZW50IiwiXyIsInRydW5jYXRlIiwiSlNPTiIsInN0cmluZ2lmeSIsInB1c2giLCJsZW5ndGgiLCJyZW1vdmVkRXZlbnQiLCJzaGlmdCIsIndhcm4iLCJnZXRMb2dzIiwiZXZlbnRzIiwiZ2V0QWxsTG9ncyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9kZXZpY2UtbG9nL2lvcy1wZXJmb3JtYW5jZS1sb2cuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuY29uc3QgbG9nID0gbG9nZ2VyLmdldExvZ2dlcignSU9TUGVyZm9ybWFuY2VMb2cnKTtcbmNvbnN0IE1BWF9FVkVOVFMgPSA1MDAwO1xuXG5jbGFzcyBJT1NQZXJmb3JtYW5jZUxvZyB7XG4gIGNvbnN0cnVjdG9yIChyZW1vdGVEZWJ1Z2dlciwgbWF4RXZlbnRzID0gTUFYX0VWRU5UUykge1xuICAgIHRoaXMucmVtb3RlRGVidWdnZXIgPSByZW1vdGVEZWJ1Z2dlcjtcbiAgICB0aGlzLm1heEV2ZW50cyA9IHBhcnNlSW50KG1heEV2ZW50cywgMTApO1xuXG4gICAgdGhpcy50aW1lbGluZUV2ZW50cyA9IFtdO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRDYXB0dXJlICgpIHtcbiAgICBsb2cuZGVidWcoJ1N0YXJ0aW5nIHBlcmZvcm1hbmNlIChUaW1lbGluZSkgbG9nIGNhcHR1cmUnKTtcbiAgICB0aGlzLnRpbWVsaW5lRXZlbnRzID0gW107XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMucmVtb3RlRGVidWdnZXIuc3RhcnRUaW1lbGluZSh0aGlzLm9uVGltZWxpbmVFdmVudC5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGFzeW5jIHN0b3BDYXB0dXJlICgpIHtcbiAgICBsb2cuZGVidWcoJ1N0b3BwaW5nIHBlcmZvcm1hbmNlIChUaW1lbGluZSkgbG9nIGNhcHR1cmUnKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5yZW1vdGVEZWJ1Z2dlci5zdG9wVGltZWxpbmUoKTtcbiAgfVxuXG4gIG9uVGltZWxpbmVFdmVudCAoZXZlbnQpIHtcbiAgICBsb2cuZGVidWcoYFJlY2VpdmVkIFRpbWVsaW5lIGV2ZW50OiAke18udHJ1bmNhdGUoSlNPTi5zdHJpbmdpZnkoZXZlbnQpKX1gKTtcbiAgICB0aGlzLnRpbWVsaW5lRXZlbnRzLnB1c2goZXZlbnQpO1xuXG4gICAgLy8gaWYgd2UgaGF2ZSB0b28gbWFueSwgZ2V0IHJpZCBvZiB0aGUgb2xkZXN0IGxvZyBsaW5lXG4gICAgaWYgKHRoaXMudGltZWxpbmVFdmVudHMubGVuZ3RoID4gdGhpcy5tYXhFdmVudHMpIHtcbiAgICAgIGxldCByZW1vdmVkRXZlbnQgPSB0aGlzLnRpbWVsaW5lRXZlbnRzLnNoaWZ0KCk7XG4gICAgICBsb2cud2FybihgVG9vIG1hbnkgVGltZWxpbmUgZXZlbnRzLCByZW1vdmluZyBlYXJsaWVzdDogJHtfLnRydW5jYXRlKEpTT04uc3RyaW5naWZ5KHJlbW92ZWRFdmVudCkpfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldExvZ3MgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICBsZXQgZXZlbnRzID0gdGhpcy50aW1lbGluZUV2ZW50cztcblxuICAgIC8vIGZsdXNoIGV2ZW50c1xuICAgIGxvZy5kZWJ1ZygnRmx1c2hpbmcgVGltZWxpbmUgZXZlbnRzJyk7XG4gICAgdGhpcy50aW1lbGluZUV2ZW50cyA9IFtdO1xuXG4gICAgcmV0dXJuIGV2ZW50cztcbiAgfVxuXG4gIGFzeW5jIGdldEFsbExvZ3MgKCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgICByZXR1cm4gdGhpcy5nZXRMb2dzKCk7XG4gIH1cbn1cblxuXG5leHBvcnQgeyBJT1NQZXJmb3JtYW5jZUxvZyB9O1xuZXhwb3J0IGRlZmF1bHQgSU9TUGVyZm9ybWFuY2VMb2c7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUVBLE1BQU1BLEdBQUcsR0FBR0MsZUFBTSxDQUFDQyxTQUFTLENBQUMsbUJBQW1CLENBQUM7QUFDakQsTUFBTUMsVUFBVSxHQUFHLElBQUk7QUFFdkIsTUFBTUMsaUJBQWlCLENBQUM7RUFDdEJDLFdBQVcsQ0FBRUMsY0FBYyxFQUFFQyxTQUFTLEdBQUdKLFVBQVUsRUFBRTtJQUNuRCxJQUFJLENBQUNHLGNBQWMsR0FBR0EsY0FBYztJQUNwQyxJQUFJLENBQUNDLFNBQVMsR0FBR0MsUUFBUSxDQUFDRCxTQUFTLEVBQUUsRUFBRSxDQUFDO0lBRXhDLElBQUksQ0FBQ0UsY0FBYyxHQUFHLEVBQUU7RUFDMUI7RUFFQSxNQUFNQyxZQUFZLEdBQUk7SUFDcEJWLEdBQUcsQ0FBQ1csS0FBSyxDQUFDLDZDQUE2QyxDQUFDO0lBQ3hELElBQUksQ0FBQ0YsY0FBYyxHQUFHLEVBQUU7SUFDeEIsT0FBTyxNQUFNLElBQUksQ0FBQ0gsY0FBYyxDQUFDTSxhQUFhLENBQUMsSUFBSSxDQUFDQyxlQUFlLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztFQUNqRjtFQUVBLE1BQU1DLFdBQVcsR0FBSTtJQUNuQmYsR0FBRyxDQUFDVyxLQUFLLENBQUMsNkNBQTZDLENBQUM7SUFDeEQsT0FBTyxNQUFNLElBQUksQ0FBQ0wsY0FBYyxDQUFDVSxZQUFZLEVBQUU7RUFDakQ7RUFFQUgsZUFBZSxDQUFFSSxLQUFLLEVBQUU7SUFDdEJqQixHQUFHLENBQUNXLEtBQUssQ0FBRSw0QkFBMkJPLGVBQUMsQ0FBQ0MsUUFBUSxDQUFDQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0osS0FBSyxDQUFDLENBQUUsRUFBQyxDQUFDO0lBQzFFLElBQUksQ0FBQ1IsY0FBYyxDQUFDYSxJQUFJLENBQUNMLEtBQUssQ0FBQztJQUcvQixJQUFJLElBQUksQ0FBQ1IsY0FBYyxDQUFDYyxNQUFNLEdBQUcsSUFBSSxDQUFDaEIsU0FBUyxFQUFFO01BQy9DLElBQUlpQixZQUFZLEdBQUcsSUFBSSxDQUFDZixjQUFjLENBQUNnQixLQUFLLEVBQUU7TUFDOUN6QixHQUFHLENBQUMwQixJQUFJLENBQUUsZ0RBQStDUixlQUFDLENBQUNDLFFBQVEsQ0FBQ0MsSUFBSSxDQUFDQyxTQUFTLENBQUNHLFlBQVksQ0FBQyxDQUFFLEVBQUMsQ0FBQztJQUN0RztFQUNGO0VBRUEsTUFBTUcsT0FBTyxHQUFJO0lBQ2YsSUFBSUMsTUFBTSxHQUFHLElBQUksQ0FBQ25CLGNBQWM7SUFHaENULEdBQUcsQ0FBQ1csS0FBSyxDQUFDLDBCQUEwQixDQUFDO0lBQ3JDLElBQUksQ0FBQ0YsY0FBYyxHQUFHLEVBQUU7SUFFeEIsT0FBT21CLE1BQU07RUFDZjtFQUVBLE1BQU1DLFVBQVUsR0FBSTtJQUNsQixPQUFPLElBQUksQ0FBQ0YsT0FBTyxFQUFFO0VBQ3ZCO0FBQ0Y7QUFBQztBQUFBLGVBSWN2QixpQkFBaUI7QUFBQSJ9