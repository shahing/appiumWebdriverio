"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IOSCrashLog = void 0;
require("source-map-support/register");
var _support = require("appium/support");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _logger = _interopRequireDefault(require("../logger"));
var _appiumIosDevice = require("appium-ios-device");
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _pyIosDeviceClient = _interopRequireDefault(require("../py-ios-device-client"));
const REAL_DEVICE_MAGIC = '3620bbb0-fb9f-4b62-a668-896f2edc4d88';
const MAGIC_SEP = '/';
class IOSCrashLog {
  constructor(opts = {}) {
    this.udid = opts.udid;
    this.pyideviceClient = this.udid ? new _pyIosDeviceClient.default(this.udid) : null;
    const logDir = opts.udid ? _path.default.resolve(process.env.HOME, 'Library', 'Logs', 'CrashReporter', 'MobileDevice') : _path.default.resolve(process.env.HOME, 'Library', 'Logs', 'DiagnosticReports');
    this.logDir = logDir || _path.default.resolve(process.env.HOME || '/', 'Library', 'Logs', 'DiagnosticReports');
    this.prevLogs = [];
    this.logsSinceLastRequest = [];
    this.phoneName = null;
    this.sim = opts.sim;
  }
  async _gatherFromRealDevice() {
    if (await this.pyideviceClient.assertExists(false)) {
      return (await this.pyideviceClient.listCrashes()).map(x => `${REAL_DEVICE_MAGIC}${MAGIC_SEP}${x}`);
    }
    let crashLogsRoot = this.logDir;
    if (this.udid) {
      this.phoneName = this.phoneName || (await _appiumIosDevice.utilities.getDeviceName(this.udid));
      crashLogsRoot = _path.default.resolve(crashLogsRoot, this.phoneName);
    }
    if (!(await _support.fs.exists(crashLogsRoot))) {
      _logger.default.debug(`Crash reports root '${crashLogsRoot}' does not exist. Got nothing to gather.`);
      return [];
    }
    const foundFiles = await _support.fs.glob(`${crashLogsRoot}/**/*.crash`, {
      strict: false
    });
    return foundFiles;
  }
  async _gatherFromSimulator() {
    if (!(await _support.fs.exists(this.logDir))) {
      _logger.default.debug(`Crash reports root '${this.logDir}' does not exist. Got nothing to gather.`);
      return [];
    }
    const foundFiles = await _support.fs.glob(`${this.logDir}/**/*.+(crash|ips)`, {
      strict: false
    });
    return await _bluebird.default.filter(foundFiles, async x => {
      try {
        const content = await _support.fs.readFile(x, 'utf8');
        return content.toUpperCase().includes(this.sim.udid.toUpperCase());
      } catch (err) {
        return false;
      }
    });
  }
  async getCrashes() {
    return this.udid ? await this._gatherFromRealDevice() : await this._gatherFromSimulator();
  }
  async startCapture() {
    this.prevLogs = await this.getCrashes();
  }
  async stopCapture() {}
  async getLogs() {
    let crashFiles = await this.getCrashes();
    let diff = _lodash.default.difference(crashFiles, this.prevLogs, this.logsSinceLastRequest);
    this.logsSinceLastRequest = _lodash.default.union(this.logsSinceLastRequest, diff);
    return await this.filesToJSON(diff);
  }
  async getAllLogs() {
    let crashFiles = await this.getCrashes();
    let logFiles = _lodash.default.difference(crashFiles, this.prevLogs);
    return await this.filesToJSON(logFiles);
  }
  async filesToJSON(paths) {
    const tmpRoot = await _support.tempDir.openDir();
    try {
      return (await _bluebird.default.map(paths, async fullPath => {
        if (_lodash.default.includes(fullPath, REAL_DEVICE_MAGIC)) {
          const fileName = _lodash.default.last(fullPath.split(MAGIC_SEP));
          try {
            await this.pyideviceClient.exportCrash(fileName, tmpRoot);
          } catch (e) {
            _logger.default.warn(`Cannot export the crash report '${fileName}'. Skipping it. ` + `Original error: ${e.message}`);
            return;
          }
          fullPath = _path.default.join(tmpRoot, fileName);
        }
        const stat = await _support.fs.stat(fullPath);
        return {
          timestamp: stat.ctime.getTime(),
          level: 'ALL',
          message: await _support.fs.readFile(fullPath, 'utf8')
        };
      })).filter(Boolean);
    } finally {
      await _support.fs.rimraf(tmpRoot);
    }
  }
}
exports.IOSCrashLog = IOSCrashLog;
var _default = IOSCrashLog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,