"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.IOSLog = void 0;
require("source-map-support/register");
var _events = require("events");
const MAX_LOG_ENTRIES_COUNT = 10000;
class IOSLog extends _events.EventEmitter {
  constructor() {
    super();
    this.logs = [];
    this.logIdxSinceLastRequest = -1;
    this.maxBufferSize = MAX_LOG_ENTRIES_COUNT;
  }
  async startCapture() {
    throw new Error(`Sub-classes need to implement a 'startCapture' function`);
  }
  async stopCapture() {
    throw new Error(`Sub-classes need to implement a 'stopCapture' function`);
  }
  get isCapturing() {
    throw new Error(`Sub-classes need to implement a 'isCapturing' function`);
  }
  broadcast(logLine) {
    const logObj = {
      timestamp: Date.now(),
      level: 'ALL',
      message: logLine
    };
    this.logs.push(logObj);
    this.emit('output', logObj);
    if (this.logs.length > this.maxBufferSize) {
      this.logs.shift();
      if (this.logIdxSinceLastRequest > 0) {
        --this.logIdxSinceLastRequest;
      }
    }
  }
  getLogs() {
    if (this.logs.length && this.logIdxSinceLastRequest < this.logs.length) {
      let result = this.logs;
      if (this.logIdxSinceLastRequest > 0) {
        result = result.slice(this.logIdxSinceLastRequest);
      }
      this.logIdxSinceLastRequest = this.logs.length;
      return result;
    }
    return [];
  }
  getAllLogs() {
    return this.logs;
  }
}
exports.IOSLog = IOSLog;
var _default = IOSLog;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNQVhfTE9HX0VOVFJJRVNfQ09VTlQiLCJJT1NMb2ciLCJFdmVudEVtaXR0ZXIiLCJjb25zdHJ1Y3RvciIsImxvZ3MiLCJsb2dJZHhTaW5jZUxhc3RSZXF1ZXN0IiwibWF4QnVmZmVyU2l6ZSIsInN0YXJ0Q2FwdHVyZSIsIkVycm9yIiwic3RvcENhcHR1cmUiLCJpc0NhcHR1cmluZyIsImJyb2FkY2FzdCIsImxvZ0xpbmUiLCJsb2dPYmoiLCJ0aW1lc3RhbXAiLCJEYXRlIiwibm93IiwibGV2ZWwiLCJtZXNzYWdlIiwicHVzaCIsImVtaXQiLCJsZW5ndGgiLCJzaGlmdCIsImdldExvZ3MiLCJyZXN1bHQiLCJzbGljZSIsImdldEFsbExvZ3MiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvZGV2aWNlLWxvZy9pb3MtbG9nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gJ2V2ZW50cyc7XG5cbi8vIFdlIGtlZXAgb25seSB0aGUgbW9zdCByZWNlbnQgbG9nIGVudHJpZXMgdG8gYXZvaWQgb3V0IG9mIG1lbW9yeSBlcnJvclxuY29uc3QgTUFYX0xPR19FTlRSSUVTX0NPVU5UID0gMTAwMDA7XG5cbmNsYXNzIElPU0xvZyBleHRlbmRzIEV2ZW50RW1pdHRlciB7XG5cbiAgY29uc3RydWN0b3IgKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5sb2dzID0gW107XG4gICAgdGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0ID0gLTE7XG4gICAgdGhpcy5tYXhCdWZmZXJTaXplID0gTUFYX0xPR19FTlRSSUVTX0NPVU5UO1xuICB9XG5cbiAgYXN5bmMgc3RhcnRDYXB0dXJlICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gICAgdGhyb3cgbmV3IEVycm9yKGBTdWItY2xhc3NlcyBuZWVkIHRvIGltcGxlbWVudCBhICdzdGFydENhcHR1cmUnIGZ1bmN0aW9uYCk7XG4gIH1cblxuICBhc3luYyBzdG9wQ2FwdHVyZSAoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIHRocm93IG5ldyBFcnJvcihgU3ViLWNsYXNzZXMgbmVlZCB0byBpbXBsZW1lbnQgYSAnc3RvcENhcHR1cmUnIGZ1bmN0aW9uYCk7XG4gIH1cblxuICBnZXQgaXNDYXB0dXJpbmcgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgU3ViLWNsYXNzZXMgbmVlZCB0byBpbXBsZW1lbnQgYSAnaXNDYXB0dXJpbmcnIGZ1bmN0aW9uYCk7XG4gIH1cblxuICBicm9hZGNhc3QgKGxvZ0xpbmUpIHtcbiAgICBjb25zdCBsb2dPYmogPSB7XG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICBsZXZlbDogJ0FMTCcsXG4gICAgICBtZXNzYWdlOiBsb2dMaW5lXG4gICAgfTtcbiAgICB0aGlzLmxvZ3MucHVzaChsb2dPYmopO1xuICAgIHRoaXMuZW1pdCgnb3V0cHV0JywgbG9nT2JqKTtcbiAgICBpZiAodGhpcy5sb2dzLmxlbmd0aCA+IHRoaXMubWF4QnVmZmVyU2l6ZSkge1xuICAgICAgdGhpcy5sb2dzLnNoaWZ0KCk7XG4gICAgICBpZiAodGhpcy5sb2dJZHhTaW5jZUxhc3RSZXF1ZXN0ID4gMCkge1xuICAgICAgICAtLXRoaXMubG9nSWR4U2luY2VMYXN0UmVxdWVzdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXRMb2dzICgpIHtcbiAgICBpZiAodGhpcy5sb2dzLmxlbmd0aCAmJiB0aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3QgPCB0aGlzLmxvZ3MubGVuZ3RoKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gdGhpcy5sb2dzO1xuICAgICAgaWYgKHRoaXMubG9nSWR4U2luY2VMYXN0UmVxdWVzdCA+IDApIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LnNsaWNlKHRoaXMubG9nSWR4U2luY2VMYXN0UmVxdWVzdCk7XG4gICAgICB9XG4gICAgICB0aGlzLmxvZ0lkeFNpbmNlTGFzdFJlcXVlc3QgPSB0aGlzLmxvZ3MubGVuZ3RoO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgZ2V0QWxsTG9ncyAoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9ncztcbiAgfVxufVxuXG5leHBvcnQgeyBJT1NMb2cgfTtcbmV4cG9ydCBkZWZhdWx0IElPU0xvZztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBR0EsTUFBTUEscUJBQXFCLEdBQUcsS0FBSztBQUVuQyxNQUFNQyxNQUFNLFNBQVNDLG9CQUFZLENBQUM7RUFFaENDLFdBQVcsR0FBSTtJQUNiLEtBQUssRUFBRTtJQUNQLElBQUksQ0FBQ0MsSUFBSSxHQUFHLEVBQUU7SUFDZCxJQUFJLENBQUNDLHNCQUFzQixHQUFHLENBQUMsQ0FBQztJQUNoQyxJQUFJLENBQUNDLGFBQWEsR0FBR04scUJBQXFCO0VBQzVDO0VBRUEsTUFBTU8sWUFBWSxHQUFJO0lBQ3BCLE1BQU0sSUFBSUMsS0FBSyxDQUFFLHlEQUF3RCxDQUFDO0VBQzVFO0VBRUEsTUFBTUMsV0FBVyxHQUFJO0lBQ25CLE1BQU0sSUFBSUQsS0FBSyxDQUFFLHdEQUF1RCxDQUFDO0VBQzNFO0VBRUEsSUFBSUUsV0FBVyxHQUFJO0lBQ2pCLE1BQU0sSUFBSUYsS0FBSyxDQUFFLHdEQUF1RCxDQUFDO0VBQzNFO0VBRUFHLFNBQVMsQ0FBRUMsT0FBTyxFQUFFO0lBQ2xCLE1BQU1DLE1BQU0sR0FBRztNQUNiQyxTQUFTLEVBQUVDLElBQUksQ0FBQ0MsR0FBRyxFQUFFO01BQ3JCQyxLQUFLLEVBQUUsS0FBSztNQUNaQyxPQUFPLEVBQUVOO0lBQ1gsQ0FBQztJQUNELElBQUksQ0FBQ1IsSUFBSSxDQUFDZSxJQUFJLENBQUNOLE1BQU0sQ0FBQztJQUN0QixJQUFJLENBQUNPLElBQUksQ0FBQyxRQUFRLEVBQUVQLE1BQU0sQ0FBQztJQUMzQixJQUFJLElBQUksQ0FBQ1QsSUFBSSxDQUFDaUIsTUFBTSxHQUFHLElBQUksQ0FBQ2YsYUFBYSxFQUFFO01BQ3pDLElBQUksQ0FBQ0YsSUFBSSxDQUFDa0IsS0FBSyxFQUFFO01BQ2pCLElBQUksSUFBSSxDQUFDakIsc0JBQXNCLEdBQUcsQ0FBQyxFQUFFO1FBQ25DLEVBQUUsSUFBSSxDQUFDQSxzQkFBc0I7TUFDL0I7SUFDRjtFQUNGO0VBRUFrQixPQUFPLEdBQUk7SUFDVCxJQUFJLElBQUksQ0FBQ25CLElBQUksQ0FBQ2lCLE1BQU0sSUFBSSxJQUFJLENBQUNoQixzQkFBc0IsR0FBRyxJQUFJLENBQUNELElBQUksQ0FBQ2lCLE1BQU0sRUFBRTtNQUN0RSxJQUFJRyxNQUFNLEdBQUcsSUFBSSxDQUFDcEIsSUFBSTtNQUN0QixJQUFJLElBQUksQ0FBQ0Msc0JBQXNCLEdBQUcsQ0FBQyxFQUFFO1FBQ25DbUIsTUFBTSxHQUFHQSxNQUFNLENBQUNDLEtBQUssQ0FBQyxJQUFJLENBQUNwQixzQkFBc0IsQ0FBQztNQUNwRDtNQUNBLElBQUksQ0FBQ0Esc0JBQXNCLEdBQUcsSUFBSSxDQUFDRCxJQUFJLENBQUNpQixNQUFNO01BQzlDLE9BQU9HLE1BQU07SUFDZjtJQUNBLE9BQU8sRUFBRTtFQUNYO0VBRUFFLFVBQVUsR0FBSTtJQUNaLE9BQU8sSUFBSSxDQUFDdEIsSUFBSTtFQUNsQjtBQUNGO0FBQUM7QUFBQSxlQUdjSCxNQUFNO0FBQUEifQ==