"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.desiredCapConstraints = exports.default = exports.PLATFORM_NAME_TVOS = exports.PLATFORM_NAME_IOS = void 0;
require("source-map-support/register");
const PLATFORM_NAME_IOS = 'iOS';
exports.PLATFORM_NAME_IOS = PLATFORM_NAME_IOS;
const PLATFORM_NAME_TVOS = 'tvOS';
exports.PLATFORM_NAME_TVOS = PLATFORM_NAME_TVOS;
const desiredCapConstraints = {
  platformName: {
    presence: true,
    isString: true,
    inclusionCaseInsensitive: [PLATFORM_NAME_IOS, PLATFORM_NAME_TVOS]
  },
  browserName: {
    isString: true
  },
  app: {
    isString: true
  },
  calendarFormat: {
    isString: true
  },
  bundleId: {
    isString: true
  },
  udid: {
    isString: true
  },
  autoAcceptAlerts: {
    isBoolean: true
  },
  autoDismissAlerts: {
    isBoolean: true
  },
  nativeWebTap: {
    isBoolean: true
  },
  safariInitialUrl: {
    isString: true
  },
  safariAllowPopups: {
    isBoolean: true
  },
  safariIgnoreFraudWarning: {
    isBoolean: true
  },
  safariOpenLinksInBackground: {
    isBoolean: true
  },
  safariShowFullResponse: {
    isBoolean: true
  },
  keepKeyChains: {
    isBoolean: true
  },
  resetLocationService: {
    isBoolean: true
  },
  localizableStringsDir: {
    isString: true
  },
  processArguments: {},
  showIOSLog: {
    isBoolean: true
  },
  webviewConnectRetries: {
    isNumber: true
  },
  clearSystemFiles: {
    isBoolean: true
  },
  customSSLCert: {
    isString: true
  },
  webkitResponseTimeout: {
    isNumber: true
  },
  remoteDebugProxy: {
    isString: true
  },
  enablePerformanceLogging: {
    isBoolean: true
  },
  enableAsyncExecuteFromHttps: {
    isBoolean: true
  },
  fullContextList: {
    isBoolean: true
  },
  ignoreAboutBlankUrl: {
    isBoolean: true
  },
  skipLogCapture: {
    isBoolean: true
  },
  deviceName: {
    isString: true
  },
  showXcodeLog: {
    isBoolean: true
  },
  wdaLocalPort: {
    isNumber: true
  },
  wdaBaseUrl: {
    isString: true
  },
  iosInstallPause: {
    isNumber: true
  },
  xcodeConfigFile: {
    isString: true
  },
  xcodeOrgId: {
    isString: true
  },
  xcodeSigningId: {
    isString: true
  },
  keychainPath: {
    isString: true
  },
  keychainPassword: {
    isString: true
  },
  bootstrapPath: {
    isString: true
  },
  agentPath: {
    isString: true
  },
  tapWithShortPressDuration: {
    isNumber: true
  },
  scaleFactor: {
    isString: true
  },
  usePrebuiltWDA: {
    isBoolean: true
  },
  webDriverAgentUrl: {
    isString: true
  },
  derivedDataPath: {
    isString: true
  },
  launchWithIDB: {
    isBoolean: true
  },
  useNewWDA: {
    isBoolean: true
  },
  wdaLaunchTimeout: {
    isNumber: true
  },
  wdaConnectionTimeout: {
    isNumber: true
  },
  updatedWDABundleId: {
    isString: true
  },
  resetOnSessionStartOnly: {
    isBoolean: true
  },
  commandTimeouts: {},
  wdaStartupRetries: {
    isNumber: true
  },
  wdaStartupRetryInterval: {
    isNumber: true
  },
  prebuildWDA: {
    isBoolean: true
  },
  connectHardwareKeyboard: {
    isBoolean: true
  },
  forceTurnOnSoftwareKeyboardSimulator: {
    isBoolean: true
  },
  simulatorPasteboardAutomaticSync: {
    isString: true
  },
  simulatorDevicesSetPath: {
    isString: true
  },
  calendarAccessAuthorized: {
    isBoolean: true
  },
  useSimpleBuildTest: {
    isBoolean: true
  },
  waitForQuiescence: {
    isBoolean: true
  },
  maxTypingFrequency: {
    isNumber: true
  },
  nativeTyping: {
    isBoolean: true
  },
  simpleIsVisibleCheck: {
    isBoolean: true
  },
  shouldUseSingletonTestManager: {
    isBoolean: true
  },
  isHeadless: {
    isBoolean: true
  },
  useXctestrunFile: {
    isBoolean: true
  },
  absoluteWebLocations: {
    isBoolean: true
  },
  simulatorWindowCenter: {
    isString: true
  },
  simulatorStartupTimeout: {
    isNumber: true
  },
  simulatorTracePointer: {
    isBoolean: true
  },
  useJSONSource: {
    isBoolean: true
  },
  enforceFreshSimulatorCreation: {
    isBoolean: true
  },
  shutdownOtherSimulators: {
    isBoolean: true
  },
  keychainsExcludePatterns: {
    isString: true
  },
  showSafariConsoleLog: {
    isBoolean: true
  },
  showSafariNetworkLog: {
    isBoolean: true
  },
  safariGarbageCollect: {
    isBoolean: true
  },
  safariGlobalPreferences: {
    isObject: true
  },
  safariLogAllCommunication: {
    isBoolean: true
  },
  safariLogAllCommunicationHexDump: {
    isBoolean: true
  },
  safariSocketChunkSize: {
    isNumber: true
  },
  mjpegServerPort: {
    isNumber: true
  },
  reduceMotion: {
    isBoolean: true
  },
  reduceTransparency: {
    isBoolean: true
  },
  mjpegScreenshotUrl: {
    isString: true
  },
  permissions: {
    isString: true
  },
  screenshotQuality: {
    isNumber: true
  },
  wdaEventloopIdleDelay: {
    isNumber: true
  },
  otherApps: {
    isString: true
  },
  includeSafariInWebviews: {
    isBoolean: true
  },
  additionalWebviewBundleIds: {},
  webviewConnectTimeout: {
    isNumber: true
  },
  iosSimulatorLogsPredicate: {
    isString: true
  },
  appPushTimeout: {
    isNumber: true
  },
  nativeWebTapStrict: {
    isBoolean: true
  },
  safariWebInspectorMaxFrameLength: {
    isNumber: true
  },
  allowProvisioningDeviceRegistration: {
    isBoolean: true
  },
  waitForIdleTimeout: {
    isNumber: true
  },
  resultBundlePath: {
    isString: true
  },
  resultBundleVersion: {
    isNumber: true
  },
  safariIgnoreWebHostnames: {
    isString: true
  },
  includeDeviceCapsToSessionInfo: {
    isBoolean: true
  },
  disableAutomaticScreenshots: {
    isBoolean: true
  },
  shouldTerminateApp: {
    isBoolean: true
  },
  forceAppLaunch: {
    isBoolean: true
  },
  useNativeCachingStrategy: {
    isBoolean: true
  },
  appInstallStrategy: {
    isString: true,
    inclusionCaseInsensitive: ['serial', 'parallel', 'ios-deploy']
  }
};
exports.desiredCapConstraints = desiredCapConstraints;
var _default = desiredCapConstraints;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,