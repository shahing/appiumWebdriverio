"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSim = createSim;
exports.getExistingSim = getExistingSim;
exports.installToSimulator = installToSimulator;
exports.runSimulatorReset = runSimulatorReset;
exports.setLocalizationPrefs = setLocalizationPrefs;
exports.setSafariPrefs = setSafariPrefs;
exports.shutdownOtherSimulators = shutdownOtherSimulators;
exports.shutdownSimulator = shutdownSimulator;
require("source-map-support/register");
var _appiumIosSimulator = require("appium-ios-simulator");
var _nodeSimctl = _interopRequireDefault(require("node-simctl"));
var _appiumWebdriveragent = require("appium-webdriveragent");
var _lodash = _interopRequireDefault(require("lodash"));
var _logger = _interopRequireDefault(require("./logger"));
var _support = require("appium/support");
var _desiredCaps = require("./desired-caps");
const APPIUM_SIM_PREFIX = 'appiumTest';
const SAFARI_OPTS_ALIASES_MAP = {
  safariAllowPopups: [['WebKitJavaScriptCanOpenWindowsAutomatically', 'JavaScriptCanOpenWindowsAutomatically'], x => Number(Boolean(x))],
  safariIgnoreFraudWarning: [['WarnAboutFraudulentWebsites'], x => Number(!x)],
  safariOpenLinksInBackground: [['OpenLinksInBackground'], x => Number(Boolean(x))]
};
async function createSim(caps, platform = _desiredCaps.PLATFORM_NAME_IOS) {
  const devicesSetPath = caps.simulatorDevicesSetPath;
  const udid = await new _nodeSimctl.default({
    devicesSetPath
  }).createDevice(`${APPIUM_SIM_PREFIX}-${_support.util.uuidV4().toUpperCase()}-${caps.deviceName}`, caps.deviceName, caps.platformVersion, {
    platform
  });
  return await (0, _appiumIosSimulator.getSimulator)(udid, {
    platform,
    checkExistence: false,
    devicesSetPath
  });
}
async function getExistingSim(opts = {}) {
  const {
    platformVersion,
    deviceName,
    simulatorDevicesSetPath: devicesSetPath
  } = opts;
  let appiumTestDevice;
  const simctl = new _nodeSimctl.default({
    devicesSetPath
  });
  for (const device of _lodash.default.values(await simctl.getDevices(platformVersion))) {
    if (deviceName && device.name === deviceName || !deviceName) {
      return await (0, _appiumIosSimulator.getSimulator)(device.udid, {
        platform: device.platform,
        checkExistence: false,
        devicesSetPath
      });
    }
    if (device.name.startsWith(APPIUM_SIM_PREFIX) && (deviceName && device.name.endsWith(deviceName) || !deviceName)) {
      appiumTestDevice = device;
      if (device.state === 'Booted') {
        break;
      }
    }
  }
  if (appiumTestDevice) {
    _logger.default.warn(`Unable to find device '${deviceName}'. ` + `Found '${appiumTestDevice.name}' (udid: '${appiumTestDevice.udid}') instead`);
    return await (0, _appiumIosSimulator.getSimulator)(appiumTestDevice.udid, {
      platform: appiumTestDevice.platform,
      checkExistence: false,
      devicesSetPath
    });
  }
  return null;
}
async function shutdownSimulator(device) {
  await (0, _appiumWebdriveragent.resetTestProcesses)(device.udid, true);
  await device.shutdown();
}
async function runSimulatorReset(device, opts) {
  const {
    noReset,
    fullReset,
    keychainsExcludePatterns,
    keepKeyChains,
    bundleId,
    app,
    browserName,
    enforceSimulatorShutdown
  } = opts;
  if (noReset && !fullReset) {
    _logger.default.debug('Reset: noReset is on. Leaving simulator as is');
    return;
  }
  if (!device) {
    _logger.default.debug('Reset: no device available. Skipping');
    return;
  }
  if (fullReset) {
    _logger.default.debug('Reset: fullReset is on. Cleaning simulator');
    await shutdownSimulator(device);
    const isKeychainsBackupSuccessful = (keychainsExcludePatterns || keepKeyChains) && (await device.backupKeychains());
    await device.clean();
    if (isKeychainsBackupSuccessful) {
      await device.restoreKeychains(keychainsExcludePatterns || []);
      _logger.default.info(`Successfully restored keychains after full reset`);
    } else if (keychainsExcludePatterns || keepKeyChains) {
      _logger.default.warn('Cannot restore keychains after full reset, because ' + 'the backup operation did not succeed');
    }
  } else if (bundleId) {
    try {
      await device.terminateApp(bundleId);
    } catch (err) {
      _logger.default.warn(`Reset: failed to terminate Simulator application with id "${bundleId}"`);
    }
    if (app) {
      _logger.default.info('Not scrubbing third party app in anticipation of uninstall');
    } else {
      const isSafari = _lodash.default.toLower(browserName) === 'safari';
      try {
        if (isSafari) {
          await device.scrubSafari();
        } else {
          await device.scrubApp(bundleId);
        }
      } catch (err) {
        _logger.default.debug(err.stack);
        _logger.default.warn(err.message);
        _logger.default.warn(`Reset: could not scrub ${isSafari ? 'Safari browser' : 'application with id "' + opts.bundleId + '"'}. ` + `Leaving as is.`);
      }
    }
    if (enforceSimulatorShutdown && (await device.isRunning())) {
      await shutdownSimulator(device);
    }
  }
}
async function installToSimulator(device, app, bundleId, opts = {}) {
  if (!app) {
    _logger.default.debug('No app path is given. Nothing to install.');
    return;
  }
  const {
    noReset = true,
    newSimulator = false
  } = opts;
  if (!newSimulator && bundleId && (await device.isAppInstalled(bundleId))) {
    if (noReset) {
      _logger.default.debug(`App '${bundleId}' is already installed. No need to reinstall.`);
      return;
    }
    _logger.default.debug(`Reset requested. Removing app with id '${bundleId}' from the device`);
    await device.removeApp(bundleId);
  }
  _logger.default.debug(`Installing '${app}' on Simulator with UUID '${device.udid}'...`);
  try {
    await device.installApp(app);
  } catch (e) {
    _logger.default.info(`Got an error on '${app}' install: ${e.message}`);
    _logger.default.info('Retrying application install');
    await device.installApp(app);
  }
  _logger.default.debug('The app has been installed successfully.');
}
async function shutdownOtherSimulators(currentDevice) {
  const simctl = new _nodeSimctl.default({
    devicesSetPath: currentDevice.devicesSetPath
  });
  const allDevices = _lodash.default.flatMap(_lodash.default.values(await simctl.getDevices()));
  const otherBootedDevices = allDevices.filter(device => device.udid !== currentDevice.udid && device.state === 'Booted');
  if (_lodash.default.isEmpty(otherBootedDevices)) {
    _logger.default.info('No other running simulators have been detected');
    return;
  }
  _logger.default.info(`Detected ${otherBootedDevices.length} other running ${_support.util.pluralize('Simulator', otherBootedDevices.length)}.` + `Shutting them down...`);
  for (const {
    udid
  } of otherBootedDevices) {
    await (0, _appiumWebdriveragent.resetTestProcesses)(udid, true);
    simctl.udid = udid;
    await simctl.shutdownDevice();
  }
}
async function setSafariPrefs(sim, opts = {}) {
  const safariSettings = _lodash.default.cloneDeep(opts.safariGlobalPreferences ?? {});
  for (const [name, [aliases, valueConverter]] of _lodash.default.toPairs(SAFARI_OPTS_ALIASES_MAP)) {
    if (!_lodash.default.has(opts, name)) {
      continue;
    }
    for (const alias of aliases) {
      safariSettings[alias] = valueConverter(opts[name]);
    }
  }
  if (_lodash.default.isEmpty(safariSettings)) {
    return false;
  }
  _logger.default.debug(`About to update Safari preferences: ${JSON.stringify(safariSettings)}`);
  await sim.updateSafariSettings(safariSettings);
  return true;
}
async function setLocalizationPrefs(sim, opts = {}) {
  const {
    language,
    locale,
    calendarFormat
  } = opts;
  const l10nConfig = {};
  if (language) {
    l10nConfig.language = {
      name: language
    };
  }
  if (locale) {
    l10nConfig.locale = {
      name: locale
    };
    if (calendarFormat) {
      l10nConfig.locale.calendar = calendarFormat;
    }
  }
  if (_lodash.default.isEmpty(l10nConfig)) {
    return false;
  }
  _logger.default.debug(`About to update localization preferences: ${JSON.stringify(l10nConfig)}`);
  await sim.configureLocalization(l10nConfig);
  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBUFBJVU1fU0lNX1BSRUZJWCIsIlNBRkFSSV9PUFRTX0FMSUFTRVNfTUFQIiwic2FmYXJpQWxsb3dQb3B1cHMiLCJ4IiwiTnVtYmVyIiwiQm9vbGVhbiIsInNhZmFyaUlnbm9yZUZyYXVkV2FybmluZyIsInNhZmFyaU9wZW5MaW5rc0luQmFja2dyb3VuZCIsImNyZWF0ZVNpbSIsImNhcHMiLCJwbGF0Zm9ybSIsIlBMQVRGT1JNX05BTUVfSU9TIiwiZGV2aWNlc1NldFBhdGgiLCJzaW11bGF0b3JEZXZpY2VzU2V0UGF0aCIsInVkaWQiLCJTaW1jdGwiLCJjcmVhdGVEZXZpY2UiLCJ1dGlsIiwidXVpZFY0IiwidG9VcHBlckNhc2UiLCJkZXZpY2VOYW1lIiwicGxhdGZvcm1WZXJzaW9uIiwiZ2V0U2ltdWxhdG9yIiwiY2hlY2tFeGlzdGVuY2UiLCJnZXRFeGlzdGluZ1NpbSIsIm9wdHMiLCJhcHBpdW1UZXN0RGV2aWNlIiwic2ltY3RsIiwiZGV2aWNlIiwiXyIsInZhbHVlcyIsImdldERldmljZXMiLCJuYW1lIiwic3RhcnRzV2l0aCIsImVuZHNXaXRoIiwic3RhdGUiLCJsb2ciLCJ3YXJuIiwic2h1dGRvd25TaW11bGF0b3IiLCJyZXNldFRlc3RQcm9jZXNzZXMiLCJzaHV0ZG93biIsInJ1blNpbXVsYXRvclJlc2V0Iiwibm9SZXNldCIsImZ1bGxSZXNldCIsImtleWNoYWluc0V4Y2x1ZGVQYXR0ZXJucyIsImtlZXBLZXlDaGFpbnMiLCJidW5kbGVJZCIsImFwcCIsImJyb3dzZXJOYW1lIiwiZW5mb3JjZVNpbXVsYXRvclNodXRkb3duIiwiZGVidWciLCJpc0tleWNoYWluc0JhY2t1cFN1Y2Nlc3NmdWwiLCJiYWNrdXBLZXljaGFpbnMiLCJjbGVhbiIsInJlc3RvcmVLZXljaGFpbnMiLCJpbmZvIiwidGVybWluYXRlQXBwIiwiZXJyIiwiaXNTYWZhcmkiLCJ0b0xvd2VyIiwic2NydWJTYWZhcmkiLCJzY3J1YkFwcCIsInN0YWNrIiwibWVzc2FnZSIsImlzUnVubmluZyIsImluc3RhbGxUb1NpbXVsYXRvciIsIm5ld1NpbXVsYXRvciIsImlzQXBwSW5zdGFsbGVkIiwicmVtb3ZlQXBwIiwiaW5zdGFsbEFwcCIsImUiLCJzaHV0ZG93bk90aGVyU2ltdWxhdG9ycyIsImN1cnJlbnREZXZpY2UiLCJhbGxEZXZpY2VzIiwiZmxhdE1hcCIsIm90aGVyQm9vdGVkRGV2aWNlcyIsImZpbHRlciIsImlzRW1wdHkiLCJsZW5ndGgiLCJwbHVyYWxpemUiLCJzaHV0ZG93bkRldmljZSIsInNldFNhZmFyaVByZWZzIiwic2ltIiwic2FmYXJpU2V0dGluZ3MiLCJjbG9uZURlZXAiLCJzYWZhcmlHbG9iYWxQcmVmZXJlbmNlcyIsImFsaWFzZXMiLCJ2YWx1ZUNvbnZlcnRlciIsInRvUGFpcnMiLCJoYXMiLCJhbGlhcyIsIkpTT04iLCJzdHJpbmdpZnkiLCJ1cGRhdGVTYWZhcmlTZXR0aW5ncyIsInNldExvY2FsaXphdGlvblByZWZzIiwibGFuZ3VhZ2UiLCJsb2NhbGUiLCJjYWxlbmRhckZvcm1hdCIsImwxMG5Db25maWciLCJjYWxlbmRhciIsImNvbmZpZ3VyZUxvY2FsaXphdGlvbiJdLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9zaW11bGF0b3ItbWFuYWdlbWVudC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRTaW11bGF0b3IgfSBmcm9tICdhcHBpdW0taW9zLXNpbXVsYXRvcic7XG5pbXBvcnQgU2ltY3RsIGZyb20gJ25vZGUtc2ltY3RsJztcbmltcG9ydCB7IHJlc2V0VGVzdFByb2Nlc3NlcyB9IGZyb20gJ2FwcGl1bS13ZWJkcml2ZXJhZ2VudCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtL3N1cHBvcnQnO1xuaW1wb3J0IHsgUExBVEZPUk1fTkFNRV9JT1MgfSBmcm9tICcuL2Rlc2lyZWQtY2Fwcyc7XG5cblxuY29uc3QgQVBQSVVNX1NJTV9QUkVGSVggPSAnYXBwaXVtVGVzdCc7XG5jb25zdCBTQUZBUklfT1BUU19BTElBU0VTX01BUCA9IHtcbiAgc2FmYXJpQWxsb3dQb3B1cHM6IFtcbiAgICBbJ1dlYktpdEphdmFTY3JpcHRDYW5PcGVuV2luZG93c0F1dG9tYXRpY2FsbHknLCAnSmF2YVNjcmlwdENhbk9wZW5XaW5kb3dzQXV0b21hdGljYWxseSddLFxuICAgICh4KSA9PiBOdW1iZXIoQm9vbGVhbih4KSksXG4gIF0sXG4gIHNhZmFyaUlnbm9yZUZyYXVkV2FybmluZzogW1xuICAgIFsnV2FybkFib3V0RnJhdWR1bGVudFdlYnNpdGVzJ10sXG4gICAgKHgpID0+IE51bWJlcigheCksXG4gIF0sXG4gIHNhZmFyaU9wZW5MaW5rc0luQmFja2dyb3VuZDogW1xuICAgIFsnT3BlbkxpbmtzSW5CYWNrZ3JvdW5kJ10sXG4gICAgKHgpID0+IE51bWJlcihCb29sZWFuKHgpKSxcbiAgXVxufTtcblxuLyoqXG4gKiBDYXBhYmlsaXR5IHNldCBieSBhIHVzZXJcbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGV2aWNlTmFtZSAtIEEgbmFtZSBmb3IgdGhlIGRldmljZVxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBsYXRmb3JtVmVyc2lvbiAtIFRoZSB2ZXJzaW9uIG9mIGlPUyB0byB1c2VcbiAqL1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgc2ltdWxhdG9yIHdpdGggYGFwcGl1bVRlc3QtYCBwcmVmaXggYW5kIHJldHVybiB0aGUgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBTaW1DcmVhdGlvbkNhcHMgLSBDYXBhYmlsaXR5IHNldCBieSBhIHVzZXIuIFRoZSBvcHRpb25zIGF2YWlsYWJsZSBhcmU6XG4gKiBAcHJvcGVydHkge3N0cmluZ30gcGxhdGZvcm0gW2lPU10gLSBQbGF0Zm9ybSBuYW1lIGluIG9yZGVyIHRvIHNwZWNpZnkgcnVudGltZSBzdWNoIGFzICdpT1MnLCAndHZPUycsICd3YXRjaE9TJ1xuICogQHJldHVybnMge29iamVjdH0gU2ltdWxhdG9yIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhlIHVkaWQgcGFzc2VkIGluLlxuICovXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVTaW0gKGNhcHMsIHBsYXRmb3JtID0gUExBVEZPUk1fTkFNRV9JT1MpIHtcbiAgY29uc3QgZGV2aWNlc1NldFBhdGggPSBjYXBzLnNpbXVsYXRvckRldmljZXNTZXRQYXRoO1xuICBjb25zdCB1ZGlkID0gYXdhaXQgbmV3IFNpbWN0bCh7ZGV2aWNlc1NldFBhdGh9KS5jcmVhdGVEZXZpY2UoXG4gICAgYCR7QVBQSVVNX1NJTV9QUkVGSVh9LSR7dXRpbC51dWlkVjQoKS50b1VwcGVyQ2FzZSgpfS0ke2NhcHMuZGV2aWNlTmFtZX1gLFxuICAgIGNhcHMuZGV2aWNlTmFtZSxcbiAgICBjYXBzLnBsYXRmb3JtVmVyc2lvbixcbiAgICB7cGxhdGZvcm19LFxuICApO1xuICByZXR1cm4gYXdhaXQgZ2V0U2ltdWxhdG9yKHVkaWQsIHtcbiAgICBwbGF0Zm9ybSxcbiAgICBjaGVja0V4aXN0ZW5jZTogZmFsc2UsXG4gICAgZGV2aWNlc1NldFBhdGgsXG4gIH0pO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNpbXVsYXRvckxvb2t1cE9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nP30gZGV2aWNlTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSBkZXZpY2UgdG8gbG9va3VwXG4gKiBAcHJvcGVydHkge3N0cmluZyF9IHBsYXRmb3JtVmVyc2lvbiAtIFRoZSBwbGF0Zm9ybSB2ZXJzaW9uIHN0cmluZ1xuICogQHByb3BlcnR5IHtzdHJpbmc/fSBzaW11bGF0b3JEZXZpY2VzU2V0UGF0aCAtIFRoZSBmdWxsIHBhdGggdG8gdGhlIHNpbXVsYXRvciBkZXZpY2VzIHNldFxuICovXG5cbi8qKlxuICogR2V0IGEgc2ltdWxhdG9yIHdoaWNoIGlzIGFscmVhZHkgcnVubmluZy5cbiAqXG4gKiBAcGFyYW0ge1NpbXVsYXRvckxvb2t1cE9wdGlvbnM/fSBvcHRzXG4gKiBAcmV0dXJucyB7U2ltdWxhdG9yP30gVGhlIG1hdGNoZWQgU2ltdWxhdG9yIGluc3RhbmNlIG9yIGBudWxsYCBpZiBubyBtYXRjaGluZyAgZGV2aWNlIGlzIGZvdW5kLlxuICovXG5hc3luYyBmdW5jdGlvbiBnZXRFeGlzdGluZ1NpbSAob3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBwbGF0Zm9ybVZlcnNpb24sXG4gICAgZGV2aWNlTmFtZSxcbiAgICBzaW11bGF0b3JEZXZpY2VzU2V0UGF0aDogZGV2aWNlc1NldFBhdGgsXG4gIH0gPSBvcHRzO1xuXG4gIGxldCBhcHBpdW1UZXN0RGV2aWNlO1xuICBjb25zdCBzaW1jdGwgPSBuZXcgU2ltY3RsKHtkZXZpY2VzU2V0UGF0aH0pO1xuICBmb3IgKGNvbnN0IGRldmljZSBvZiBfLnZhbHVlcyhhd2FpdCBzaW1jdGwuZ2V0RGV2aWNlcyhwbGF0Zm9ybVZlcnNpb24pKSkge1xuICAgIGlmICgoZGV2aWNlTmFtZSAmJiBkZXZpY2UubmFtZSA9PT0gZGV2aWNlTmFtZSkgfHwgIWRldmljZU5hbWUpIHtcbiAgICAgIHJldHVybiBhd2FpdCBnZXRTaW11bGF0b3IoZGV2aWNlLnVkaWQsIHtcbiAgICAgICAgcGxhdGZvcm06IGRldmljZS5wbGF0Zm9ybSxcbiAgICAgICAgY2hlY2tFeGlzdGVuY2U6IGZhbHNlLFxuICAgICAgICBkZXZpY2VzU2V0UGF0aCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChkZXZpY2UubmFtZS5zdGFydHNXaXRoKEFQUElVTV9TSU1fUFJFRklYKVxuICAgICAgJiYgKChkZXZpY2VOYW1lICYmIGRldmljZS5uYW1lLmVuZHNXaXRoKGRldmljZU5hbWUpKSB8fCAhZGV2aWNlTmFtZSkpIHtcbiAgICAgIGFwcGl1bVRlc3REZXZpY2UgPSBkZXZpY2U7XG4gICAgICAvLyBjaG9vc2UgdGhlIGZpcnN0IGJvb3RlZCBzaW11bGF0b3JcbiAgICAgIGlmIChkZXZpY2Uuc3RhdGUgPT09ICdCb290ZWQnKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChhcHBpdW1UZXN0RGV2aWNlKSB7XG4gICAgbG9nLndhcm4oYFVuYWJsZSB0byBmaW5kIGRldmljZSAnJHtkZXZpY2VOYW1lfScuIGAgK1xuICAgICAgYEZvdW5kICcke2FwcGl1bVRlc3REZXZpY2UubmFtZX0nICh1ZGlkOiAnJHthcHBpdW1UZXN0RGV2aWNlLnVkaWR9JykgaW5zdGVhZGApO1xuICAgIHJldHVybiBhd2FpdCBnZXRTaW11bGF0b3IoYXBwaXVtVGVzdERldmljZS51ZGlkLCB7XG4gICAgICBwbGF0Zm9ybTogYXBwaXVtVGVzdERldmljZS5wbGF0Zm9ybSxcbiAgICAgIGNoZWNrRXhpc3RlbmNlOiBmYWxzZSxcbiAgICAgIGRldmljZXNTZXRQYXRoLFxuICAgIH0pO1xuICB9XG4gIHJldHVybiBudWxsO1xufVxuXG5hc3luYyBmdW5jdGlvbiBzaHV0ZG93blNpbXVsYXRvciAoZGV2aWNlKSB7XG4gIC8vIHN0b3AgWENUZXN0IHByb2Nlc3NlcyBpZiBydW5uaW5nIHRvIGF2b2lkIHVuZXhwZWN0ZWQgc2lkZSBlZmZlY3RzXG4gIGF3YWl0IHJlc2V0VGVzdFByb2Nlc3NlcyhkZXZpY2UudWRpZCwgdHJ1ZSk7XG4gIGF3YWl0IGRldmljZS5zaHV0ZG93bigpO1xufVxuXG5hc3luYyBmdW5jdGlvbiBydW5TaW11bGF0b3JSZXNldCAoZGV2aWNlLCBvcHRzKSB7XG4gIGNvbnN0IHtcbiAgICBub1Jlc2V0LFxuICAgIGZ1bGxSZXNldCxcbiAgICBrZXljaGFpbnNFeGNsdWRlUGF0dGVybnMsXG4gICAga2VlcEtleUNoYWlucyxcbiAgICBidW5kbGVJZCxcbiAgICBhcHAsXG4gICAgYnJvd3Nlck5hbWUsXG4gICAgZW5mb3JjZVNpbXVsYXRvclNodXRkb3duLFxuICB9ID0gb3B0cztcbiAgaWYgKG5vUmVzZXQgJiYgIWZ1bGxSZXNldCkge1xuICAgIC8vIG5vUmVzZXQgPT09IHRydWUgJiYgZnVsbFJlc2V0ID09PSBmYWxzZVxuICAgIGxvZy5kZWJ1ZygnUmVzZXQ6IG5vUmVzZXQgaXMgb24uIExlYXZpbmcgc2ltdWxhdG9yIGFzIGlzJyk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmICghZGV2aWNlKSB7XG4gICAgbG9nLmRlYnVnKCdSZXNldDogbm8gZGV2aWNlIGF2YWlsYWJsZS4gU2tpcHBpbmcnKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZnVsbFJlc2V0KSB7XG4gICAgbG9nLmRlYnVnKCdSZXNldDogZnVsbFJlc2V0IGlzIG9uLiBDbGVhbmluZyBzaW11bGF0b3InKTtcbiAgICBhd2FpdCBzaHV0ZG93blNpbXVsYXRvcihkZXZpY2UpO1xuICAgIGNvbnN0IGlzS2V5Y2hhaW5zQmFja3VwU3VjY2Vzc2Z1bCA9IChrZXljaGFpbnNFeGNsdWRlUGF0dGVybnMgfHwga2VlcEtleUNoYWlucylcbiAgICAgICYmIGF3YWl0IGRldmljZS5iYWNrdXBLZXljaGFpbnMoKTtcbiAgICBhd2FpdCBkZXZpY2UuY2xlYW4oKTtcbiAgICBpZiAoaXNLZXljaGFpbnNCYWNrdXBTdWNjZXNzZnVsKSB7XG4gICAgICBhd2FpdCBkZXZpY2UucmVzdG9yZUtleWNoYWlucyhrZXljaGFpbnNFeGNsdWRlUGF0dGVybnMgfHwgW10pO1xuICAgICAgbG9nLmluZm8oYFN1Y2Nlc3NmdWxseSByZXN0b3JlZCBrZXljaGFpbnMgYWZ0ZXIgZnVsbCByZXNldGApO1xuICAgIH0gZWxzZSBpZiAoa2V5Y2hhaW5zRXhjbHVkZVBhdHRlcm5zIHx8IGtlZXBLZXlDaGFpbnMpIHtcbiAgICAgIGxvZy53YXJuKCdDYW5ub3QgcmVzdG9yZSBrZXljaGFpbnMgYWZ0ZXIgZnVsbCByZXNldCwgYmVjYXVzZSAnICtcbiAgICAgICAgJ3RoZSBiYWNrdXAgb3BlcmF0aW9uIGRpZCBub3Qgc3VjY2VlZCcpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChidW5kbGVJZCkge1xuICAgIC8vIGZhc3RSZXNldCBvciBub1Jlc2V0XG5cbiAgICAvLyBUZXJtaW5hdGUgdGhlIGFwcCB1bmRlciB0ZXN0IGlmIGl0IGlzIHN0aWxsIHJ1bm5pbmcgb24gU2ltdWxhdG9yXG4gICAgdHJ5IHtcbiAgICAgIGF3YWl0IGRldmljZS50ZXJtaW5hdGVBcHAoYnVuZGxlSWQpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLndhcm4oYFJlc2V0OiBmYWlsZWQgdG8gdGVybWluYXRlIFNpbXVsYXRvciBhcHBsaWNhdGlvbiB3aXRoIGlkIFwiJHtidW5kbGVJZH1cImApO1xuICAgIH1cblxuICAgIGlmIChhcHApIHtcbiAgICAgIGxvZy5pbmZvKCdOb3Qgc2NydWJiaW5nIHRoaXJkIHBhcnR5IGFwcCBpbiBhbnRpY2lwYXRpb24gb2YgdW5pbnN0YWxsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGlzU2FmYXJpID0gXy50b0xvd2VyKGJyb3dzZXJOYW1lKSA9PT0gJ3NhZmFyaSc7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAoaXNTYWZhcmkpIHtcbiAgICAgICAgICBhd2FpdCBkZXZpY2Uuc2NydWJTYWZhcmkoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhd2FpdCBkZXZpY2Uuc2NydWJBcHAoYnVuZGxlSWQpO1xuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgbG9nLmRlYnVnKGVyci5zdGFjayk7XG4gICAgICAgIGxvZy53YXJuKGVyci5tZXNzYWdlKTtcbiAgICAgICAgbG9nLndhcm4oXG4gICAgICAgICAgYFJlc2V0OiBjb3VsZCBub3Qgc2NydWIgJHtpc1NhZmFyaSA/ICdTYWZhcmkgYnJvd3NlcicgOiAnYXBwbGljYXRpb24gd2l0aCBpZCBcIicgKyBvcHRzLmJ1bmRsZUlkICsgJ1wiJ30uIGAgK1xuICAgICAgICAgIGBMZWF2aW5nIGFzIGlzLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW5mb3JjZVNpbXVsYXRvclNodXRkb3duICYmIGF3YWl0IGRldmljZS5pc1J1bm5pbmcoKSkge1xuICAgICAgYXdhaXQgc2h1dGRvd25TaW11bGF0b3IoZGV2aWNlKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBJbnN0YWxsT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IG5vUmVzZXQgW2ZhbHNlXSBXaGV0aGVyIHRvIGRpc2FibGUgcmVzZXRcbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IG5ld1NpbXVsYXRvciBbZmFsc2VdIFdoZXRoZXIgdGhlIHNpbXVsYXRvciBpcyBicmFuZCBuZXdcbiAqL1xuXG4vKipcbiAqIEBwYXJhbSB7b2JqZWN0fSBkZXZpY2UgVGhlIHNpbXVsYXRvciBkZXZpY2Ugb2JqZWN0XG4gKiBAcGFyYW0gez9zdHJpbmd9IGFwcCBUaGUgYXBwIHRvIHRoZSBwYXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgVGhlIGJ1bmRsZSBpZCB0byBlbnN1cmUgaXQgaXMgYWxyZWFkeSBpbnN0YWxsZWQgYW5kIHVuaW5zdGFsbCBpdFxuICogQHBhcmFtIHs/SW5zdGFsbE9wdGlvbnN9IG9wdHNcbiAqL1xuYXN5bmMgZnVuY3Rpb24gaW5zdGFsbFRvU2ltdWxhdG9yIChkZXZpY2UsIGFwcCwgYnVuZGxlSWQsIG9wdHMgPSB7fSkge1xuICBpZiAoIWFwcCkge1xuICAgIGxvZy5kZWJ1ZygnTm8gYXBwIHBhdGggaXMgZ2l2ZW4uIE5vdGhpbmcgdG8gaW5zdGFsbC4nKTtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7XG4gICAgbm9SZXNldCA9IHRydWUsXG4gICAgbmV3U2ltdWxhdG9yID0gZmFsc2UsXG4gIH0gPSBvcHRzO1xuXG4gIGlmICghbmV3U2ltdWxhdG9yICYmIGJ1bmRsZUlkICYmIGF3YWl0IGRldmljZS5pc0FwcEluc3RhbGxlZChidW5kbGVJZCkpIHtcbiAgICBpZiAobm9SZXNldCkge1xuICAgICAgbG9nLmRlYnVnKGBBcHAgJyR7YnVuZGxlSWR9JyBpcyBhbHJlYWR5IGluc3RhbGxlZC4gTm8gbmVlZCB0byByZWluc3RhbGwuYCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGxvZy5kZWJ1ZyhgUmVzZXQgcmVxdWVzdGVkLiBSZW1vdmluZyBhcHAgd2l0aCBpZCAnJHtidW5kbGVJZH0nIGZyb20gdGhlIGRldmljZWApO1xuICAgIGF3YWl0IGRldmljZS5yZW1vdmVBcHAoYnVuZGxlSWQpO1xuICB9XG5cbiAgbG9nLmRlYnVnKGBJbnN0YWxsaW5nICcke2FwcH0nIG9uIFNpbXVsYXRvciB3aXRoIFVVSUQgJyR7ZGV2aWNlLnVkaWR9Jy4uLmApO1xuICB0cnkge1xuICAgIGF3YWl0IGRldmljZS5pbnN0YWxsQXBwKGFwcCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBpdCBzb21ldGltZXMgZmFpbHMgb24gWGNvZGUgMTAgYmVjYXVzZSBvZiBhIHJhY2UgY29uZGl0aW9uXG4gICAgbG9nLmluZm8oYEdvdCBhbiBlcnJvciBvbiAnJHthcHB9JyBpbnN0YWxsOiAke2UubWVzc2FnZX1gKTtcbiAgICBsb2cuaW5mbygnUmV0cnlpbmcgYXBwbGljYXRpb24gaW5zdGFsbCcpO1xuICAgIGF3YWl0IGRldmljZS5pbnN0YWxsQXBwKGFwcCk7XG4gIH1cbiAgbG9nLmRlYnVnKCdUaGUgYXBwIGhhcyBiZWVuIGluc3RhbGxlZCBzdWNjZXNzZnVsbHkuJyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNodXRkb3duT3RoZXJTaW11bGF0b3JzIChjdXJyZW50RGV2aWNlKSB7XG4gIGNvbnN0IHNpbWN0bCA9IG5ldyBTaW1jdGwoe1xuICAgIGRldmljZXNTZXRQYXRoOiBjdXJyZW50RGV2aWNlLmRldmljZXNTZXRQYXRoXG4gIH0pO1xuICBjb25zdCBhbGxEZXZpY2VzID0gXy5mbGF0TWFwKF8udmFsdWVzKGF3YWl0IHNpbWN0bC5nZXREZXZpY2VzKCkpKTtcbiAgY29uc3Qgb3RoZXJCb290ZWREZXZpY2VzID0gYWxsRGV2aWNlcy5maWx0ZXIoKGRldmljZSkgPT4gZGV2aWNlLnVkaWQgIT09IGN1cnJlbnREZXZpY2UudWRpZCAmJiBkZXZpY2Uuc3RhdGUgPT09ICdCb290ZWQnKTtcbiAgaWYgKF8uaXNFbXB0eShvdGhlckJvb3RlZERldmljZXMpKSB7XG4gICAgbG9nLmluZm8oJ05vIG90aGVyIHJ1bm5pbmcgc2ltdWxhdG9ycyBoYXZlIGJlZW4gZGV0ZWN0ZWQnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgbG9nLmluZm8oYERldGVjdGVkICR7b3RoZXJCb290ZWREZXZpY2VzLmxlbmd0aH0gb3RoZXIgcnVubmluZyAke3V0aWwucGx1cmFsaXplKCdTaW11bGF0b3InLCBvdGhlckJvb3RlZERldmljZXMubGVuZ3RoKX0uYCArXG4gICAgYFNodXR0aW5nIHRoZW0gZG93bi4uLmApO1xuICBmb3IgKGNvbnN0IHt1ZGlkfSBvZiBvdGhlckJvb3RlZERldmljZXMpIHtcbiAgICAvLyBJdCBpcyBuZWNlc3NhcnkgdG8gc3RvcCB0aGUgY29ycmVzcG9uZGluZyB4Y29kZWJ1aWxkIHByb2Nlc3MgYmVmb3JlIGtpbGxpbmdcbiAgICAvLyB0aGUgc2ltdWxhdG9yLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhdXRvbWF0aWNhbGx5IHJlc3RhcnRlZFxuICAgIGF3YWl0IHJlc2V0VGVzdFByb2Nlc3Nlcyh1ZGlkLCB0cnVlKTtcbiAgICBzaW1jdGwudWRpZCA9IHVkaWQ7XG4gICAgYXdhaXQgc2ltY3RsLnNodXRkb3duRGV2aWNlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb25maWd1cmVzIFNhZmFyaSBvcHRpb25zIGJhc2VkIG9uIHRoZSBnaXZlbiBzZXNzaW9uIGNhcGFiaWxpdGllc1xuICpcbiAqIEBwYXJhbSB7Kn0gc2ltIFNpbXVsYXRvciBpbnN0YW5jZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgU2Vzc2lvbiBjYXBhYmlsaXRpZXNcbiAqIEByZXR1cm4ge2Jvb2xlYW59IHRydWUgaWYgYW55IHByZWZlcmVuY2VzIGhhdmUgYmVlbiB1cGRhdGVkXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHNldFNhZmFyaVByZWZzIChzaW0sIG9wdHMgPSB7fSkge1xuICBjb25zdCBzYWZhcmlTZXR0aW5ncyA9IF8uY2xvbmVEZWVwKG9wdHMuc2FmYXJpR2xvYmFsUHJlZmVyZW5jZXMgPz8ge30pO1xuXG4gIGZvciAoY29uc3QgW25hbWUsIFthbGlhc2VzLCB2YWx1ZUNvbnZlcnRlcl1dIG9mIF8udG9QYWlycyhTQUZBUklfT1BUU19BTElBU0VTX01BUCkpIHtcbiAgICBpZiAoIV8uaGFzKG9wdHMsIG5hbWUpKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGFsaWFzIG9mIGFsaWFzZXMpIHtcbiAgICAgIHNhZmFyaVNldHRpbmdzW2FsaWFzXSA9IHZhbHVlQ29udmVydGVyKG9wdHNbbmFtZV0pO1xuICAgIH1cbiAgfVxuICBpZiAoXy5pc0VtcHR5KHNhZmFyaVNldHRpbmdzKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxvZy5kZWJ1ZyhgQWJvdXQgdG8gdXBkYXRlIFNhZmFyaSBwcmVmZXJlbmNlczogJHtKU09OLnN0cmluZ2lmeShzYWZhcmlTZXR0aW5ncyl9YCk7XG4gIGF3YWl0IHNpbS51cGRhdGVTYWZhcmlTZXR0aW5ncyhzYWZhcmlTZXR0aW5ncyk7XG4gIHJldHVybiB0cnVlO1xufVxuXG4vKipcbiAqIENoYW5nZXMgU2ltdWxhdG9yIGxvY2FsaXphdGlvbiBwcmVmZXJlbmNlc1xuICpcbiAqIEBwYXJhbSB7Kn0gc2ltIFNpbXVsYXRvciBpbnN0YW5jZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdHMgU2Vzc2lvbiBjYXBhYmlsaXRpZXNcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHByZWZlcmVuY2VzIHdlcmUgY2hhbmdlZFxuICovXG5hc3luYyBmdW5jdGlvbiBzZXRMb2NhbGl6YXRpb25QcmVmcyAoc2ltLCBvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGxhbmd1YWdlLFxuICAgIGxvY2FsZSxcbiAgICBjYWxlbmRhckZvcm1hdCxcbiAgfSA9IG9wdHM7XG4gIGNvbnN0IGwxMG5Db25maWcgPSB7fTtcbiAgaWYgKGxhbmd1YWdlKSB7XG4gICAgbDEwbkNvbmZpZy5sYW5ndWFnZSA9IHtuYW1lOiBsYW5ndWFnZX07XG4gIH1cbiAgaWYgKGxvY2FsZSkge1xuICAgIGwxMG5Db25maWcubG9jYWxlID0ge25hbWU6IGxvY2FsZX07XG4gICAgaWYgKGNhbGVuZGFyRm9ybWF0KSB7XG4gICAgICBsMTBuQ29uZmlnLmxvY2FsZS5jYWxlbmRhciA9IGNhbGVuZGFyRm9ybWF0O1xuICAgIH1cbiAgfVxuICBpZiAoXy5pc0VtcHR5KGwxMG5Db25maWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgbG9nLmRlYnVnKGBBYm91dCB0byB1cGRhdGUgbG9jYWxpemF0aW9uIHByZWZlcmVuY2VzOiAke0pTT04uc3RyaW5naWZ5KGwxMG5Db25maWcpfWApO1xuICBhd2FpdCBzaW0uY29uZmlndXJlTG9jYWxpemF0aW9uKGwxMG5Db25maWcpO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuXG5leHBvcnQge1xuICBjcmVhdGVTaW0sIGdldEV4aXN0aW5nU2ltLCBydW5TaW11bGF0b3JSZXNldCwgaW5zdGFsbFRvU2ltdWxhdG9yLFxuICBzaHV0ZG93blNpbXVsYXRvciwgc2h1dGRvd25PdGhlclNpbXVsYXRvcnMsIHNldFNhZmFyaVByZWZzLCBzZXRMb2NhbGl6YXRpb25QcmVmc1xufTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQSxNQUFNQSxpQkFBaUIsR0FBRyxZQUFZO0FBQ3RDLE1BQU1DLHVCQUF1QixHQUFHO0VBQzlCQyxpQkFBaUIsRUFBRSxDQUNqQixDQUFDLDZDQUE2QyxFQUFFLHVDQUF1QyxDQUFDLEVBQ3ZGQyxDQUFDLElBQUtDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDRixDQUFDLENBQUMsQ0FBQyxDQUMxQjtFQUNERyx3QkFBd0IsRUFBRSxDQUN4QixDQUFDLDZCQUE2QixDQUFDLEVBQzlCSCxDQUFDLElB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