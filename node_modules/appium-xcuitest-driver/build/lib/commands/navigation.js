"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;
require("source-map-support/register");
var _driver = require("appium/driver");
var _lodash = _interopRequireDefault(require("lodash"));
var _asyncbox = require("asyncbox");
let commands = {},
  helpers = {},
  extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const CLOSE_WINDOW_TIMEOUT = 5000;
const CLOSE_WINDOW_INTERVAL = 100;
commands.back = async function back() {
  if (!this.isWebContext()) {
    await this.nativeBack();
  } else {
    await this.mobileWebNav('back');
  }
};
helpers.nativeBack = async function nativeBack() {
  try {
    let navBar = await this.findNativeElementOrElements('class name', 'XCUIElementTypeNavigationBar', false);
    let buttons = await this.findNativeElementOrElements('class name', 'XCUIElementTypeButton', true, navBar);
    if (buttons.length === 0) {
      throw new Error('No buttons found in navigation bar');
    }
    let backButton = _lodash.default.filter(buttons, value => value.label === 'Back')[0];
    if (backButton) {
      this.log.debug(`Found navigation bar 'back' button. Clicking.`);
    } else {
      this.log.debug(`Unable to find 'Back' button. Trying first button in navigation bar`);
      backButton = buttons[0];
    }
    await this.nativeClick(backButton);
  } catch (err) {
    this.log.error(`Unable to find navigation bar and back button: ${err.message}`);
  }
};
commands.forward = async function forward() {
  if (!this.isWebContext()) {}
  await this.mobileWebNav('forward');
};
commands.closeWindow = async function closeWindow() {
  if (!this.isWebContext()) {
    throw new _driver.errors.NotImplementedError();
  }
  const script = `setTimeout(function () {window.open('','_self').close();}, 0); return true;`;
  const context = this.curContext;
  try {
    return await this.executeAtom('execute_script', [script, []], true);
  } finally {
    try {
      await (0, _asyncbox.waitForCondition)(() => this.curContext !== context, {
        waitMs: CLOSE_WINDOW_TIMEOUT,
        intervalMs: CLOSE_WINDOW_INTERVAL
      });
    } catch (ign) {
      this.log.debug('Context has not yet been changed after closing window. Continuing...');
    }
  }
};
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiQ0xPU0VfV0lORE9XX1RJTUVPVVQiLCJDTE9TRV9XSU5ET1dfSU5URVJWQUwiLCJiYWNrIiwiaXNXZWJDb250ZXh0IiwibmF0aXZlQmFjayIsIm1vYmlsZVdlYk5hdiIsIm5hdkJhciIsImZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cyIsImJ1dHRvbnMiLCJsZW5ndGgiLCJFcnJvciIsImJhY2tCdXR0b24iLCJfIiwiZmlsdGVyIiwidmFsdWUiLCJsYWJlbCIsImxvZyIsImRlYnVnIiwibmF0aXZlQ2xpY2siLCJlcnIiLCJlcnJvciIsIm1lc3NhZ2UiLCJmb3J3YXJkIiwiY2xvc2VXaW5kb3ciLCJlcnJvcnMiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwic2NyaXB0IiwiY29udGV4dCIsImN1ckNvbnRleHQiLCJleGVjdXRlQXRvbSIsIndhaXRGb3JDb25kaXRpb24iLCJ3YWl0TXMiLCJpbnRlcnZhbE1zIiwiaWduIiwiT2JqZWN0IiwiYXNzaWduIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvbW1hbmRzL25hdmlnYXRpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnYXBwaXVtL2RyaXZlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgd2FpdEZvckNvbmRpdGlvbiB9IGZyb20gJ2FzeW5jYm94JztcblxubGV0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG4vLyB0aGVzZSB0d28gY29uc3RpdHV0ZSB0aGUgd2FpdCBhZnRlciBjbG9zaW5nIGEgd2luZG93XG5jb25zdCBDTE9TRV9XSU5ET1dfVElNRU9VVCA9IDUwMDA7XG5jb25zdCBDTE9TRV9XSU5ET1dfSU5URVJWQUwgPSAxMDA7XG5cbmNvbW1hbmRzLmJhY2sgPSBhc3luYyBmdW5jdGlvbiBiYWNrICgpIHtcbiAgaWYgKCF0aGlzLmlzV2ViQ29udGV4dCgpKSB7XG4gICAgYXdhaXQgdGhpcy5uYXRpdmVCYWNrKCk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgdGhpcy5tb2JpbGVXZWJOYXYoJ2JhY2snKTtcbiAgfVxufTtcblxuaGVscGVycy5uYXRpdmVCYWNrID0gYXN5bmMgZnVuY3Rpb24gbmF0aXZlQmFjayAoKSB7XG4gIHRyeSB7XG4gICAgbGV0IG5hdkJhciA9IGF3YWl0IHRoaXMuZmluZE5hdGl2ZUVsZW1lbnRPckVsZW1lbnRzKCdjbGFzcyBuYW1lJywgJ1hDVUlFbGVtZW50VHlwZU5hdmlnYXRpb25CYXInLCBmYWxzZSk7XG4gICAgbGV0IGJ1dHRvbnMgPSBhd2FpdCB0aGlzLmZpbmROYXRpdmVFbGVtZW50T3JFbGVtZW50cygnY2xhc3MgbmFtZScsICdYQ1VJRWxlbWVudFR5cGVCdXR0b24nLCB0cnVlLCBuYXZCYXIpO1xuICAgIGlmIChidXR0b25zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdObyBidXR0b25zIGZvdW5kIGluIG5hdmlnYXRpb24gYmFyJyk7XG4gICAgfVxuXG4gICAgbGV0IGJhY2tCdXR0b24gPSBfLmZpbHRlcihidXR0b25zLCAodmFsdWUpID0+IHZhbHVlLmxhYmVsID09PSAnQmFjaycpWzBdO1xuICAgIGlmIChiYWNrQnV0dG9uKSB7XG4gICAgICB0aGlzLmxvZy5kZWJ1ZyhgRm91bmQgbmF2aWdhdGlvbiBiYXIgJ2JhY2snIGJ1dHRvbi4gQ2xpY2tpbmcuYCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMubG9nLmRlYnVnKGBVbmFibGUgdG8gZmluZCAnQmFjaycgYnV0dG9uLiBUcnlpbmcgZmlyc3QgYnV0dG9uIGluIG5hdmlnYXRpb24gYmFyYCk7XG4gICAgICBiYWNrQnV0dG9uID0gYnV0dG9uc1swXTtcbiAgICB9XG4gICAgYXdhaXQgdGhpcy5uYXRpdmVDbGljayhiYWNrQnV0dG9uKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgdGhpcy5sb2cuZXJyb3IoYFVuYWJsZSB0byBmaW5kIG5hdmlnYXRpb24gYmFyIGFuZCBiYWNrIGJ1dHRvbjogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxufTtcblxuY29tbWFuZHMuZm9yd2FyZCA9IGFzeW5jIGZ1bmN0aW9uIGZvcndhcmQgKCkge1xuICBpZiAoIXRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgfVxuICBhd2FpdCB0aGlzLm1vYmlsZVdlYk5hdignZm9yd2FyZCcpO1xufTtcblxuY29tbWFuZHMuY2xvc2VXaW5kb3cgPSBhc3luYyBmdW5jdGlvbiBjbG9zZVdpbmRvdyAoKSB7XG4gIGlmICghdGhpcy5pc1dlYkNvbnRleHQoKSkge1xuICAgIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcigpO1xuICB9XG5cbiAgLy8gc2luY2UgdGhlIHdpbmRvdyB3aWxsIGJlIGNsb3NlZCBhbmQgdGhlIGV4ZWN1dGlvbiBjb250ZXh0IGdvbmUsIHJldHVyblxuICAvLyBmaXJzdCBiZWZvcmUgY2xvc2luZy4gV2FpdGluZyBmb3IgY2xvc2Ugd2lsbCBoYXBwZW4gaW4gdGhlIGZpbmFsbHkgYmxvY2tcbiAgY29uc3Qgc2NyaXB0ID0gYHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge3dpbmRvdy5vcGVuKCcnLCdfc2VsZicpLmNsb3NlKCk7fSwgMCk7IHJldHVybiB0cnVlO2A7XG4gIGNvbnN0IGNvbnRleHQgPSB0aGlzLmN1ckNvbnRleHQ7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2V4ZWN1dGVfc2NyaXB0JywgW3NjcmlwdCwgW11dLCB0cnVlKTtcbiAgfSBmaW5hbGx5IHtcbiAgICAvLyB3YWl0IGZvciB0aGUgd2luZG93IHRvIHN1Y2Nlc3NmdWxseSBjaGFuZ2UuLi5cbiAgICB0cnkge1xuICAgICAgYXdhaXQgd2FpdEZvckNvbmRpdGlvbigoKSA9PiB0aGlzLmN1ckNvbnRleHQgIT09IGNvbnRleHQsIHtcbiAgICAgICAgd2FpdE1zOiBDTE9TRV9XSU5ET1dfVElNRU9VVCxcbiAgICAgICAgaW50ZXJ2YWxNczogQ0xPU0VfV0lORE9XX0lOVEVSVkFMLFxuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoaWduKSB7XG4gICAgICB0aGlzLmxvZy5kZWJ1ZygnQ29udGV4dCBoYXMgbm90IHlldCBiZWVuIGNoYW5nZWQgYWZ0ZXIgY2xvc2luZyB3aW5kb3cuIENvbnRpbnVpbmcuLi4nKTtcbiAgICB9XG4gIH1cbn07XG5cblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFFQSxJQUFJQSxRQUFRLEdBQUcsQ0FBQyxDQUFDO0VBQUVDLE9BQU8sR0FBRyxDQUFDLENBQUM7RUFBRUMsVUFBVSxHQUFHLENBQUMsQ0FBQztBQUFDO0FBQUE7QUFHakQsTUFBTUMsb0JBQW9CLEdBQUcsSUFBSTtBQUNqQyxNQUFNQyxxQkFBcUIsR0FBRyxHQUFHO0FBRWpDSixRQUFRLENBQUNLLElBQUksR0FBRyxlQUFlQSxJQUFJLEdBQUk7RUFDckMsSUFBSSxDQUFDLElBQUksQ0FBQ0MsWUFBWSxFQUFFLEVBQUU7SUFDeEIsTUFBTSxJQUFJLENBQUNDLFVBQVUsRUFBRTtFQUN6QixDQUFDLE1BQU07SUFDTCxNQUFNLElBQUksQ0FBQ0MsWUFBWSxDQUFDLE1BQU0sQ0FBQztFQUNqQztBQUNGLENBQUM7QUFFRFAsT0FBTyxDQUFDTSxVQUFVLEdBQUcsZUFBZUEsVUFBVSxHQUFJO0VBQ2hELElBQUk7SUFDRixJQUFJRSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUNDLDJCQUEyQixDQUFDLFlBQVksRUFBRSw4QkFBOEIsRUFBRSxLQUFLLENBQUM7SUFDeEcsSUFBSUMsT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDRCwyQkFBMkIsQ0FBQyxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxFQUFFRCxNQUFNLENBQUM7SUFDekcsSUFBSUUsT0FBTyxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFO01BQ3hCLE1BQU0sSUFBSUMsS0FBSyxDQUFDLG9DQUFvQyxDQUFDO0lBQ3ZEO0lBRUEsSUFBSUMsVUFBVSxHQUFHQyxlQUFDLENBQUNDLE1BQU0sQ0FBQ0wsT0FBTyxFQUFHTSxLQUFLLElBQUtBLEtBQUssQ0FBQ0MsS0FBSyxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN4RSxJQUFJSixVQUFVLEVBQUU7TUFDZCxJQUFJLENBQUNLLEdBQUcsQ0FBQ0MsS0FBSyxDQUFFLCtDQUE4QyxDQUFDO0lBQ2pFLENBQUMsTUFBTTtNQUNMLElBQUksQ0FBQ0QsR0FBRyxDQUFDQyxLQUFLLENBQUUscUVBQW9FLENBQUM7TUFDckZOLFVBQVUsR0FBR0gsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUN6QjtJQUNBLE1BQU0sSUFBSSxDQUFDVSxXQUFXLENBQUNQLFVBQVUsQ0FBQztFQUNwQyxDQUFDLENBQUMsT0FBT1EsR0FBRyxFQUFFO0lBQ1osSUFBSSxDQUFDSCxHQUFHLENBQUNJLEtBQUssQ0FBRSxrREFBaURELEdBQUcsQ0FBQ0UsT0FBUSxFQUFDLENBQUM7RUFDakY7QUFDRixDQUFDO0FBRUR4QixRQUFRLENBQUN5QixPQUFPLEdBQUcsZUFBZUEsT0FBTyxHQUFJO0VBQzNDLElBQUksQ0FBQyxJQUFJLENBQUNuQixZQUFZLEVBQUUsRUFBRSxDQUMxQjtFQUNBLE1BQU0sSUFBSSxDQUFDRSxZQUFZLENBQUMsU0FBUyxDQUFDO0FBQ3BDLENBQUM7QUFFRFIsUUFBUSxDQUFDMEIsV0FBVyxHQUFHLGVBQWVBLFdBQVcsR0FBSTtFQUNuRCxJQUFJLENBQUMsSUFBSSxDQUFDcEIsWUFBWSxFQUFFLEVBQUU7SUFDeEIsTUFBTSxJQUFJcUIsY0FBTSxDQUFDQyxtQkFBbUIsRUFBRTtFQUN4QztFQUlBLE1BQU1DLE1BQU0sR0FBSSw2RUFBNEU7RUFDNUYsTUFBTUMsT0FBTyxHQUFHLElBQUksQ0FBQ0MsVUFBVTtFQUMvQixJQUFJO0lBQ0YsT0FBTyxNQUFNLElBQUksQ0FBQ0MsV0FBVyxDQUFDLGdCQUFnQixFQUFFLENBQUNILE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUM7RUFDckUsQ0FBQyxTQUFTO0lBRVIsSUFBSTtNQUNGLE1BQU0sSUFBQUksMEJBQWdCLEVBQUMsTUFBTSxJQUFJLENBQUNGLFVBQVUsS0FBS0QsT0FBTyxFQUFFO1FBQ3hESSxNQUFNLEVBQUUvQixvQkFBb0I7UUFDNUJnQyxVQUFVLEVBQUUvQjtNQUNkLENBQUMsQ0FBQztJQUNKLENBQUMsQ0FBQyxPQUFPZ0MsR0FBRyxFQUFFO01BQ1osSUFBSSxDQUFDakIsR0FBRyxDQUFDQyxLQUFLLENBQUMsc0VBQXNFLENBQUM7SUFDeEY7RUFDRjtBQUNGLENBQUM7QUFHRGlCLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDcEMsVUFBVSxFQUFFRixRQUFRLEVBQUVDLE9BQU8sQ0FBQztBQUFDLGVBRTlCQyxVQUFVO0FBQUEifQ==