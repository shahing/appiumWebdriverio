"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _asyncbox = require("asyncbox");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("appium/support");
let commands = {};
commands.getScreenshot = async function getScreenshot() {
  const getScreenshotFromWDA = async () => {
    this.log.debug(`Taking screenshot with WDA`);
    const data = await this.proxyCommand('/screenshot', 'GET');
    if (!_lodash.default.isString(data)) {
      throw new Error(`Unable to take screenshot. WDA returned '${JSON.stringify(data)}'`);
    }
    return data;
  };
  if (this.mjpegStream) {
    this.log.info(`mjpeg video stream provided, returning latest frame as screenshot`);
    const data = await this.mjpegStream.lastChunkPNGBase64();
    if (data) {
      return data;
    }
    this.log.warn('Tried to get screenshot from active MJPEG stream, but there ' + 'was no data yet. Falling back to regular screenshot methods.');
  }
  try {
    return await getScreenshotFromWDA();
  } catch (err) {
    this.log.warn(`Error getting screenshot: ${err.message}`);
  }
  if (this.isSimulator()) {
    this.log.info(`Falling back to 'simctl io screenshot' API`);
    return await this.opts.device.simctl.getScreenshot();
  }
  return await (0, _asyncbox.retryInterval)(2, 1000, getScreenshotFromWDA);
};
commands.getElementScreenshot = async function getElementScreenshot(el) {
  el = _support.util.unwrapElement(el);
  if (this.isWebContext()) {
    const atomsElement = this.getAtomsElement(el);
    return await this.executeAtom('getElementScreenshot', [atomsElement]);
  }
  const data = await this.proxyCommand(`/element/${el}/screenshot`, 'GET');
  if (!_lodash.default.isString(data)) {
    this.log.errorAndThrow(`Unable to take a screenshot of the element ${el}. WDA returned '${JSON.stringify(data)}'`);
  }
  return data;
};
commands.getViewportScreenshot = async function getViewportScreenshot() {
  let statusBarHeight = await this.getStatusBarHeight();
  const screenshot = await this.getScreenshot();
  if (statusBarHeight === 0) {
    return screenshot;
  }
  const scale = await this.getDevicePixelRatio();
  statusBarHeight = Math.round(statusBarHeight * scale);
  const windowSize = await this.getWindowSize();
  let rect = {
    left: 0,
    top: statusBarHeight,
    width: windowSize.width * scale,
    height: windowSize.height * scale - statusBarHeight
  };
  let newScreenshot = await _support.imageUtil.cropBase64Image(screenshot, rect);
  return newScreenshot;
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsImdldFNjcmVlbnNob3QiLCJnZXRTY3JlZW5zaG90RnJvbVdEQSIsImxvZyIsImRlYnVnIiwiZGF0YSIsInByb3h5Q29tbWFuZCIsIl8iLCJpc1N0cmluZyIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1qcGVnU3RyZWFtIiwiaW5mbyIsImxhc3RDaHVua1BOR0Jhc2U2NCIsIndhcm4iLCJlcnIiLCJtZXNzYWdlIiwiaXNTaW11bGF0b3IiLCJvcHRzIiwiZGV2aWNlIiwic2ltY3RsIiwicmV0cnlJbnRlcnZhbCIsImdldEVsZW1lbnRTY3JlZW5zaG90IiwiZWwiLCJ1dGlsIiwidW53cmFwRWxlbWVudCIsImlzV2ViQ29udGV4dCIsImF0b21zRWxlbWVudCIsImdldEF0b21zRWxlbWVudCIsImV4ZWN1dGVBdG9tIiwiZXJyb3JBbmRUaHJvdyIsImdldFZpZXdwb3J0U2NyZWVuc2hvdCIsInN0YXR1c0JhckhlaWdodCIsImdldFN0YXR1c0JhckhlaWdodCIsInNjcmVlbnNob3QiLCJzY2FsZSIsImdldERldmljZVBpeGVsUmF0aW8iLCJNYXRoIiwicm91bmQiLCJ3aW5kb3dTaXplIiwiZ2V0V2luZG93U2l6ZSIsInJlY3QiLCJsZWZ0IiwidG9wIiwid2lkdGgiLCJoZWlnaHQiLCJuZXdTY3JlZW5zaG90IiwiaW1hZ2VVdGlsIiwiY3JvcEJhc2U2NEltYWdlIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvbW1hbmRzL3NjcmVlbnNob3RzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJldHJ5SW50ZXJ2YWwgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgdXRpbCwgaW1hZ2VVdGlsIH0gZnJvbSAnYXBwaXVtL3N1cHBvcnQnO1xuXG5sZXQgY29tbWFuZHMgPSB7fTtcblxuY29tbWFuZHMuZ2V0U2NyZWVuc2hvdCA9IGFzeW5jIGZ1bmN0aW9uIGdldFNjcmVlbnNob3QgKCkge1xuICBjb25zdCBnZXRTY3JlZW5zaG90RnJvbVdEQSA9IGFzeW5jICgpID0+IHtcbiAgICB0aGlzLmxvZy5kZWJ1ZyhgVGFraW5nIHNjcmVlbnNob3Qgd2l0aCBXREFgKTtcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy9zY3JlZW5zaG90JywgJ0dFVCcpO1xuICAgIGlmICghXy5pc1N0cmluZyhkYXRhKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gdGFrZSBzY3JlZW5zaG90LiBXREEgcmV0dXJuZWQgJyR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9J2ApO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICAvLyBpZiB3ZSd2ZSBzcGVjaWZpZWQgYW4gbWpwZWcgc2VydmVyLCB1c2UgdGhhdFxuICBpZiAodGhpcy5tanBlZ1N0cmVhbSkge1xuICAgIHRoaXMubG9nLmluZm8oYG1qcGVnIHZpZGVvIHN0cmVhbSBwcm92aWRlZCwgcmV0dXJuaW5nIGxhdGVzdCBmcmFtZSBhcyBzY3JlZW5zaG90YCk7XG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMubWpwZWdTdHJlYW0ubGFzdENodW5rUE5HQmFzZTY0KCk7XG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICB0aGlzLmxvZy53YXJuKCdUcmllZCB0byBnZXQgc2NyZWVuc2hvdCBmcm9tIGFjdGl2ZSBNSlBFRyBzdHJlYW0sIGJ1dCB0aGVyZSAnICtcbiAgICAgICd3YXMgbm8gZGF0YSB5ZXQuIEZhbGxpbmcgYmFjayB0byByZWd1bGFyIHNjcmVlbnNob3QgbWV0aG9kcy4nKTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgcmV0dXJuIGF3YWl0IGdldFNjcmVlbnNob3RGcm9tV0RBKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRoaXMubG9nLndhcm4oYEVycm9yIGdldHRpbmcgc2NyZWVuc2hvdDogJHtlcnIubWVzc2FnZX1gKTtcbiAgfVxuXG4gIC8vIHNpbXVsYXRvciBhdHRlbXB0XG4gIGlmICh0aGlzLmlzU2ltdWxhdG9yKCkpIHtcbiAgICB0aGlzLmxvZy5pbmZvKGBGYWxsaW5nIGJhY2sgdG8gJ3NpbWN0bCBpbyBzY3JlZW5zaG90JyBBUElgKTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5vcHRzLmRldmljZS5zaW1jdGwuZ2V0U2NyZWVuc2hvdCgpO1xuICB9XG5cbiAgLy8gUmV0cnkgZm9yIHJlYWwgZGV2aWNlcyBvbmx5LiBGYWlsIGZhc3Qgb24gU2ltdWxhdG9yIGlmIHNpbWN0bCBkb2VzIG5vdCB3b3JrIGFzIGV4cGVjdGVkXG4gIHJldHVybiBhd2FpdCByZXRyeUludGVydmFsKDIsIDEwMDAsIGdldFNjcmVlbnNob3RGcm9tV0RBKTtcbn07XG5cbmNvbW1hbmRzLmdldEVsZW1lbnRTY3JlZW5zaG90ID0gYXN5bmMgZnVuY3Rpb24gZ2V0RWxlbWVudFNjcmVlbnNob3QgKGVsKSB7XG4gIGVsID0gdXRpbC51bndyYXBFbGVtZW50KGVsKTtcbiAgaWYgKHRoaXMuaXNXZWJDb250ZXh0KCkpIHtcbiAgICBjb25zdCBhdG9tc0VsZW1lbnQgPSB0aGlzLmdldEF0b21zRWxlbWVudChlbCk7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZXhlY3V0ZUF0b20oJ2dldEVsZW1lbnRTY3JlZW5zaG90JywgW2F0b21zRWxlbWVudF0pO1xuICB9XG5cbiAgY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMucHJveHlDb21tYW5kKGAvZWxlbWVudC8ke2VsfS9zY3JlZW5zaG90YCwgJ0dFVCcpO1xuICBpZiAoIV8uaXNTdHJpbmcoZGF0YSkpIHtcbiAgICB0aGlzLmxvZy5lcnJvckFuZFRocm93KGBVbmFibGUgdG8gdGFrZSBhIHNjcmVlbnNob3Qgb2YgdGhlIGVsZW1lbnQgJHtlbH0uIFdEQSByZXR1cm5lZCAnJHtKU09OLnN0cmluZ2lmeShkYXRhKX0nYCk7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59O1xuXG5jb21tYW5kcy5nZXRWaWV3cG9ydFNjcmVlbnNob3QgPSBhc3luYyBmdW5jdGlvbiBnZXRWaWV3cG9ydFNjcmVlbnNob3QgKCkge1xuICBsZXQgc3RhdHVzQmFySGVpZ2h0ID0gYXdhaXQgdGhpcy5nZXRTdGF0dXNCYXJIZWlnaHQoKTtcbiAgY29uc3Qgc2NyZWVuc2hvdCA9IGF3YWl0IHRoaXMuZ2V0U2NyZWVuc2hvdCgpO1xuXG4gIC8vIGlmIHdlIGRvbid0IGhhdmUgYSBzdGF0dXMgYmFyLCB0aGVyZSdzIG5vdGhpbmcgdG8gY3JvcCwgc28gd2UgY2FuIGF2b2lkXG4gIC8vIGV4dHJhIGNhbGxzIGFuZCByZXR1cm4gc3RyYWlnaHRhd2F5XG4gIGlmIChzdGF0dXNCYXJIZWlnaHQgPT09IDApIHtcbiAgICByZXR1cm4gc2NyZWVuc2hvdDtcbiAgfVxuXG4gIGNvbnN0IHNjYWxlID0gYXdhaXQgdGhpcy5nZXREZXZpY2VQaXhlbFJhdGlvKCk7XG4gIC8vIHN0YXR1cyBiYXIgaGVpZ2h0IGNvbWVzIGluIHVuc2NhbGVkLCBzbyBzY2FsZSBpdFxuICBzdGF0dXNCYXJIZWlnaHQgPSBNYXRoLnJvdW5kKHN0YXR1c0JhckhlaWdodCAqIHNjYWxlKTtcbiAgY29uc3Qgd2luZG93U2l6ZSA9IGF3YWl0IHRoaXMuZ2V0V2luZG93U2l6ZSgpO1xuICBsZXQgcmVjdCA9IHtcbiAgICBsZWZ0OiAwLFxuICAgIHRvcDogc3RhdHVzQmFySGVpZ2h0LFxuICAgIHdpZHRoOiB3aW5kb3dTaXplLndpZHRoICogc2NhbGUsXG4gICAgaGVpZ2h0OiAoKHdpbmRvd1NpemUuaGVpZ2h0ICogc2NhbGUpIC0gc3RhdHVzQmFySGVpZ2h0KVxuICB9O1xuICBsZXQgbmV3U2NyZWVuc2hvdCA9IGF3YWl0IGltYWdlVXRpbC5jcm9wQmFzZTY0SW1hZ2Uoc2NyZWVuc2hvdCwgcmVjdCk7XG4gIHJldHVybiBuZXdTY3JlZW5zaG90O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBRUEsSUFBSUEs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