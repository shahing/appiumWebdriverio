"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("appium/support");
const commands = {};
exports.commands = commands;
commands.mobileSetAppearance = async function mobileSetAppearance(opts = {}) {
  const {
    style
  } = opts;
  if (!['light', 'dark'].includes(_lodash.default.toLower(style))) {
    throw new Error(`The 'style' value is expected to equal either 'light' or 'dark'`);
  }
  if (_support.util.compareVersions(this.opts.platformVersion, '<', '12.0')) {
    throw new Error('Changing appearance is only supported since iOS 12');
  }
  if (this.isSimulator()) {
    try {
      return void (await this.opts.device.setAppearance(style));
    } catch (e) {
      this.log.debug(e.stack);
    }
  }
  try {
    return void (await this.proxyCommand('/wda/device/appearance', 'POST', {
      name: style
    }));
  } catch (e) {
    this.log.debug(e.stack);
  }
  await this.mobileSiriCommand({
    text: `Turn ${_lodash.default.toLower(style) === 'dark' ? 'on' : 'off'} dark mode`
  });
};
commands.mobileGetAppearance = async function mobileGetAppearance() {
  if (_support.util.compareVersions(this.opts.platformVersion, '<', '12.0')) {
    return 'unsupported';
  }
  let style;
  if (this.isSimulator()) {
    try {
      style = await this.opts.device.getAppearance();
    } catch (ign) {}
  }
  if (!style) {
    style = (await this.proxyCommand('/wda/device/info', 'GET')).userInterfaceStyle || 'unknown';
  }
  return {
    style
  };
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsIm1vYmlsZVNldEFwcGVhcmFuY2UiLCJvcHRzIiwic3R5bGUiLCJpbmNsdWRlcyIsIl8iLCJ0b0xvd2VyIiwiRXJyb3IiLCJ1dGlsIiwiY29tcGFyZVZlcnNpb25zIiwicGxhdGZvcm1WZXJzaW9uIiwiaXNTaW11bGF0b3IiLCJkZXZpY2UiLCJzZXRBcHBlYXJhbmNlIiwiZSIsImxvZyIsImRlYnVnIiwic3RhY2siLCJwcm94eUNvbW1hbmQiLCJuYW1lIiwibW9iaWxlU2lyaUNvbW1hbmQiLCJ0ZXh0IiwibW9iaWxlR2V0QXBwZWFyYW5jZSIsImdldEFwcGVhcmFuY2UiLCJpZ24iLCJ1c2VySW50ZXJmYWNlU3R5bGUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvY29tbWFuZHMvYXBwZWFyYW5jZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgdXRpbCB9IGZyb20gJ2FwcGl1bS9zdXBwb3J0JztcblxuXG5jb25zdCBjb21tYW5kcyA9IHt9O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFNldEFwcGVhcmFuY2VPcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHN0eWxlIC0gQ3VycmVudGx5IHR3byBzdHlsZXMgYXJlIHN1cHBvcnRlZDpcbiAqIC0gZGFya1xuICogLSBsaWdodFxuICovXG5cbi8qKlxuICogU2V0IHRoZSBkZXZpY2UncyBVSSBhcHBlYXJhbmNlIHN0eWxlXG4gKlxuICogQHNpbmNlIGlPUyAxMi4wXG4gKiBAcGFyYW0ge1NldEFwcGVhcmFuY2VPcHRpb25zfSBvcHRzXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIGN1cnJlbnQgcGxhdGZvcm0gZG9lcyBub3Qgc3VwcG9ydCBVSVxuICogYXBwZWFyYW5jZSBjaGFuZ2VzXG4gKi9cbmNvbW1hbmRzLm1vYmlsZVNldEFwcGVhcmFuY2UgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVTZXRBcHBlYXJhbmNlIChvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHN0eWxlLFxuICB9ID0gb3B0cztcbiAgaWYgKCFbJ2xpZ2h0JywgJ2RhcmsnXS5pbmNsdWRlcyhfLnRvTG93ZXIoc3R5bGUpKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVGhlICdzdHlsZScgdmFsdWUgaXMgZXhwZWN0ZWQgdG8gZXF1YWwgZWl0aGVyICdsaWdodCcgb3IgJ2RhcmsnYCk7XG4gIH1cbiAgaWYgKHV0aWwuY29tcGFyZVZlcnNpb25zKHRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24sICc8JywgJzEyLjAnKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQ2hhbmdpbmcgYXBwZWFyYW5jZSBpcyBvbmx5IHN1cHBvcnRlZCBzaW5jZSBpT1MgMTInKTtcbiAgfVxuXG4gIGlmICh0aGlzLmlzU2ltdWxhdG9yKCkpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHZvaWQgKGF3YWl0IHRoaXMub3B0cy5kZXZpY2Uuc2V0QXBwZWFyYW5jZShzdHlsZSkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRoaXMubG9nLmRlYnVnKGUuc3RhY2spO1xuICAgIH1cbiAgfVxuICB0cnkge1xuICAgIHJldHVybiB2b2lkIChhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS9kZXZpY2UvYXBwZWFyYW5jZScsICdQT1NUJywge25hbWU6IHN0eWxlfSkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgdGhpcy5sb2cuZGVidWcoZS5zdGFjayk7XG4gIH1cbiAgLy8gRmFsbCBiYWNrIHRvIHRoZSB1Z2x5IFNpcmkgd29ya2Fyb3VuZCBpZiB0aGUgY3VycmVudCBTREsgaXMgdG9vIG9sZFxuICBhd2FpdCB0aGlzLm1vYmlsZVNpcmlDb21tYW5kKHtcbiAgICB0ZXh0OiBgVHVybiAke18udG9Mb3dlcihzdHlsZSkgPT09ICdkYXJrJyA/ICdvbicgOiAnb2ZmJ30gZGFyayBtb2RlYCxcbiAgfSk7XG59O1xuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEFwcGVhcmFuY2VcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBzdHlsZSAtIFRoZSBkZXZpY2UncyBVSSBhcHBlYXJhbmNlIHZhbHVlLlxuICogVGhpcyBjb3VsZCBiZSBvbmUgb2Y6XG4gKiAtIGBsaWdodGBcbiAqIC0gYGRhcmtgXG4gKiAtIGB1bmtub3duYFxuICogLSBgdW5zdXBwb3J0ZWRgXG4gKi9cblxuLyoqXG4gKiBHZXQgdGhlIGRldmljZSdzIFVJIGFwcGVhcmFuY2Ugc3R5bGUuXG4gKlxuICogQHNpbmNlIFhjb2RlIFNESyAxMVxuICogQHJldHVybnMge0FwcGVhcmFuY2V9XG4gKi9cbmNvbW1hbmRzLm1vYmlsZUdldEFwcGVhcmFuY2UgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVHZXRBcHBlYXJhbmNlICgpIHtcbiAgaWYgKHV0aWwuY29tcGFyZVZlcnNpb25zKHRoaXMub3B0cy5wbGF0Zm9ybVZlcnNpb24sICc8JywgJzEyLjAnKSkge1xuICAgIHJldHVybiAndW5zdXBwb3J0ZWQnO1xuICB9XG5cbiAgbGV0IHN0eWxlO1xuICBpZiAodGhpcy5pc1NpbXVsYXRvcigpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHN0eWxlID0gYXdhaXQgdGhpcy5vcHRzLmRldmljZS5nZXRBcHBlYXJhbmNlKCk7XG4gICAgfSBjYXRjaCAoaWduKSB7fVxuICB9XG4gIGlmICghc3R5bGUpIHtcbiAgICBzdHlsZSA9IChhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL3dkYS9kZXZpY2UvaW5mbycsICdHRVQnKSkudXNlckludGVyZmFjZVN0eWxlIHx8ICd1bmtub3duJztcbiAgfVxuICByZXR1cm4ge1xuICAgIHN0eWxlLFxuICB9O1xufTtcblxuXG5leHBvcnQgeyBjb21tYW5kcyB9O1xuZXhwb3J0IGRlZmF1bHQgY29tbWFuZHM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUdBLE1BQU1BLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFBQztBQWtCcEJBLFFBQVEsQ0FBQ0MsbUJBQW1CLEdBQUcsZUFBZUEsbUJBQW1CLENBQUVDLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtFQUM1RSxNQUFNO0lBQ0pDO0VBQ0YsQ0FBQyxHQUFHRCxJQUFJO0VBQ1IsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDRSxRQUFRLENBQUNDLGVBQUMsQ0FBQ0MsT0FBTyxDQUFDSCxLQUFLLENBQUMsQ0FBQyxFQUFFO0lBQ2pELE1BQU0sSUFBSUksS0FBSyxDQUFFLGlFQUFnRSxDQUFDO0VBQ3BGO0VBQ0EsSUFBSUMsYUFBSSxDQUFDQyxlQUFlLENBQUMsSUFBSSxDQUFDUCxJQUFJLENBQUNRLGVBQWUsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLEVBQUU7SUFDaEUsTUFBTSxJQUFJSCxLQUFLLENBQUMsb0RBQW9ELENBQUM7RUFDdkU7RUFFQSxJQUFJLElBQUksQ0FBQ0ksV0FBVyxFQUFFLEVBQUU7SUFDdEIsSUFBSTtNQUNGLE9BQU8sTUFBTSxNQUFNLElBQUksQ0FBQ1QsSUFBSSxDQUFDVSxNQUFNLENBQUNDLGFBQWEsQ0FBQ1YsS0FBSyxDQUFDLENBQUM7SUFDM0QsQ0FBQyxDQUFDLE9BQU9XLENBQUMsRUFBRTtNQUNWLElBQUksQ0FBQ0MsR0FBRyxDQUFDQyxLQUFLLENBQUNGLENBQUMsQ0FBQ0csS0FBSyxDQUFDO0lBQ3pCO0VBQ0Y7RUFDQSxJQUFJO0lBQ0YsT0FBTyxNQUFNLE1BQU0sSUFBSSxDQUFDQyxZQUFZLENBQUMsd0JBQXdCLEVBQUUsTUFBTSxFQUFFO01BQUNDLElBQUksRUFBRWhCO0lBQUssQ0FBQyxDQUFDLENBQUM7RUFDeEYsQ0FBQyxDQUFDLE9BQU9XLENBQUMsRUFBRTtJQUNWLElBQUksQ0FBQ0MsR0FBRyxDQUFDQyxLQUFLLENBQUNGLENBQUMsQ0FBQ0csS0FBSyxDQUFDO0VBQ3pCO0VBRUEsTUFBTSxJQUFJLENBQUNHLGlCQUFpQixDQUFDO0lBQzNCQyxJQUFJLEVBQUcsUUFBT2hCLGVBQUMsQ0FBQ0MsT0FBTyxDQUFDSCxLQUFLLENBQUMsS0FBSyxNQUFNLEdBQUcsSUFBSSxHQUFHLEtBQU07RUFDM0QsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQWtCREgsUUFBUSxDQUFDc0IsbUJBQW1CLEdBQUcsZUFBZUEsbUJBQW1CLEdBQUk7RUFDbkUsSUFBSWQsYUFBSSxDQUFDQyxlQUFlLENBQUMsSUFBSSxDQUFDUCxJQUFJLENBQUNRLGVBQWUsRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLEVBQUU7SUFDaEUsT0FBTyxhQUFhO0VBQ3RCO0VBRUEsSUFBSVAsS0FBSztFQUNULElBQUksSUFBSSxDQUFDUSxXQUFXLEVBQUUsRUFBRTtJQUN0QixJQUFJO01BQ0ZSLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQ0QsSUFBSSxDQUFDVSxNQUFNLENBQUNXLGFBQWEsRUFBRTtJQUNoRCxDQUFDLENBQUMsT0FBT0MsR0FBRyxFQUFFLENBQUM7RUFDakI7RUFDQSxJQUFJLENBQUNyQixLQUFLLEVBQUU7SUFDVkEsS0FBSyxHQUFHLENBQUMsTUFBTSxJQUFJLENBQUNlLFlBQVksQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsRUFBRU8sa0JBQWtCLElBQUksU0FBUztFQUM5RjtFQUNBLE9BQU87SUFDTHRCO0VBQ0YsQ0FBQztBQUNILENBQUM7QUFBQyxlQUlhSCxRQUFRO0FBQUEifQ==