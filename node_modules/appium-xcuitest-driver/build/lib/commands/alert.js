"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.commands = void 0;
require("source-map-support/register");
const commands = {};
exports.commands = commands;
function toAlertParams(opts = {}) {
  const params = {};
  if (opts.buttonLabel) {
    params.name = opts.buttonLabel;
  }
  return params;
}
commands.getAlertText = async function getAlertText() {
  return await this.proxyCommand('/alert/text', 'GET');
};
commands.setAlertText = async function setAlertText(value) {
  return await this.proxyCommand('/alert/text', 'POST', {
    value
  });
};
commands.postAcceptAlert = async function postAcceptAlert(opts = {}) {
  return await this.proxyCommand('/alert/accept', 'POST', toAlertParams(opts));
};
commands.postDismissAlert = async function postDismissAlert(opts = {}) {
  return await this.proxyCommand('/alert/dismiss', 'POST', toAlertParams(opts));
};
commands.getAlertButtons = async function getAlertButtons() {
  return await this.proxyCommand('/wda/alert/buttons', 'GET');
};
commands.mobileHandleAlert = async function mobileHandleAlert(opts = {}) {
  switch (opts.action) {
    case 'accept':
      return await this.postAcceptAlert(opts);
    case 'dismiss':
      return await this.postDismissAlert(opts);
    case 'getButtons':
      return await this.getAlertButtons();
    default:
      throw new Error(`The 'action' value should be either 'accept', 'dismiss' or 'getButtons'. ` + `'${opts.action}' is provided instead.`);
  }
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsInRvQWxlcnRQYXJhbXMiLCJvcHRzIiwicGFyYW1zIiwiYnV0dG9uTGFiZWwiLCJuYW1lIiwiZ2V0QWxlcnRUZXh0IiwicHJveHlDb21tYW5kIiwic2V0QWxlcnRUZXh0IiwidmFsdWUiLCJwb3N0QWNjZXB0QWxlcnQiLCJwb3N0RGlzbWlzc0FsZXJ0IiwiZ2V0QWxlcnRCdXR0b25zIiwibW9iaWxlSGFuZGxlQWxlcnQiLCJhY3Rpb24iLCJFcnJvciJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9jb21tYW5kcy9hbGVydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBjb21tYW5kcyA9IHt9O1xuXG5mdW5jdGlvbiB0b0FsZXJ0UGFyYW1zIChvcHRzID0ge30pIHtcbiAgY29uc3QgcGFyYW1zID0ge307XG4gIGlmIChvcHRzLmJ1dHRvbkxhYmVsKSB7XG4gICAgcGFyYW1zLm5hbWUgPSBvcHRzLmJ1dHRvbkxhYmVsO1xuICB9XG4gIHJldHVybiBwYXJhbXM7XG59XG5cbmNvbW1hbmRzLmdldEFsZXJ0VGV4dCA9IGFzeW5jIGZ1bmN0aW9uIGdldEFsZXJ0VGV4dCAoKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL2FsZXJ0L3RleHQnLCAnR0VUJyk7XG59O1xuXG5jb21tYW5kcy5zZXRBbGVydFRleHQgPSBhc3luYyBmdW5jdGlvbiBzZXRBbGVydFRleHQgKHZhbHVlKSB7XG4gIHJldHVybiBhd2FpdCB0aGlzLnByb3h5Q29tbWFuZCgnL2FsZXJ0L3RleHQnLCAnUE9TVCcsIHt2YWx1ZX0pO1xufTtcblxuY29tbWFuZHMucG9zdEFjY2VwdEFsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gcG9zdEFjY2VwdEFsZXJ0IChvcHRzID0ge30pIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvYWxlcnQvYWNjZXB0JywgJ1BPU1QnLCB0b0FsZXJ0UGFyYW1zKG9wdHMpKTtcbn07XG5cbmNvbW1hbmRzLnBvc3REaXNtaXNzQWxlcnQgPSBhc3luYyBmdW5jdGlvbiBwb3N0RGlzbWlzc0FsZXJ0IChvcHRzID0ge30pIHtcbiAgcmV0dXJuIGF3YWl0IHRoaXMucHJveHlDb21tYW5kKCcvYWxlcnQvZGlzbWlzcycsICdQT1NUJywgdG9BbGVydFBhcmFtcyhvcHRzKSk7XG59O1xuXG5jb21tYW5kcy5nZXRBbGVydEJ1dHRvbnMgPSBhc3luYyBmdW5jdGlvbiBnZXRBbGVydEJ1dHRvbnMgKCkge1xuICByZXR1cm4gYXdhaXQgdGhpcy5wcm94eUNvbW1hbmQoJy93ZGEvYWxlcnQvYnV0dG9ucycsICdHRVQnKTtcbn07XG5cbmNvbW1hbmRzLm1vYmlsZUhhbmRsZUFsZXJ0ID0gYXN5bmMgZnVuY3Rpb24gbW9iaWxlSGFuZGxlQWxlcnQgKG9wdHMgPSB7fSkge1xuICBzd2l0Y2ggKG9wdHMuYWN0aW9uKSB7XG4gICAgY2FzZSAnYWNjZXB0JzpcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnBvc3RBY2NlcHRBbGVydChvcHRzKTtcbiAgICBjYXNlICdkaXNtaXNzJzpcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLnBvc3REaXNtaXNzQWxlcnQob3B0cyk7XG4gICAgY2FzZSAnZ2V0QnV0dG9ucyc6XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXRBbGVydEJ1dHRvbnMoKTtcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgJ2FjdGlvbicgdmFsdWUgc2hvdWxkIGJlIGVpdGhlciAnYWNjZXB0JywgJ2Rpc21pc3MnIG9yICdnZXRCdXR0b25zJy4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgYCcke29wdHMuYWN0aW9ufScgaXMgcHJvdmlkZWQgaW5zdGVhZC5gKTtcbiAgfVxufTtcblxuZXhwb3J0IHsgY29tbWFuZHMgfTtcbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTUEsUUFBUSxHQUFHLENBQUMsQ0FBQztBQUFDO0FBRXBCLFNBQVNDLGFBQWEsQ0FBRUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFO0VBQ2pDLE1BQU1DLE1BQU0sR0FBRyxDQUFDLENBQUM7RUFDakIsSUFBSUQsSUFBSSxDQUFDRSxXQUFXLEVBQUU7SUFDcEJELE1BQU0sQ0FBQ0UsSUFBSSxHQUFHSCxJQUFJLENBQUNFLFdBQVc7RUFDaEM7RUFDQSxPQUFPRCxNQUFNO0FBQ2Y7QUFFQUgsUUFBUSxDQUFDTSxZQUFZLEdBQUcsZUFBZUEsWUFBWSxHQUFJO0VBQ3JELE9BQU8sTUFBTSxJQUFJLENBQUNDLFlBQVksQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDO0FBQ3RELENBQUM7QUFFRFAsUUFBUSxDQUFDUSxZQUFZLEdBQUcsZUFBZUEsWUFBWSxDQUFFQyxLQUFLLEVBQUU7RUFDMUQsT0FBTyxNQUFNLElBQUksQ0FBQ0YsWUFBWSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUU7SUFBQ0U7RUFBSyxDQUFDLENBQUM7QUFDaEUsQ0FBQztBQUVEVCxRQUFRLENBQUNVLGVBQWUsR0FBRyxlQUFlQSxlQUFlLENBQUVSLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtFQUNwRSxPQUFPLE1BQU0sSUFBSSxDQUFDSyxZQUFZLENBQUMsZUFBZSxFQUFFLE1BQU0sRUFBRU4sYUFBYSxDQUFDQyxJQUFJLENBQUMsQ0FBQztBQUM5RSxDQUFDO0FBRURGLFFBQVEsQ0FBQ1csZ0JBQWdCLEdBQUcsZUFBZUEsZ0JBQWdCLENBQUVULElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtFQUN0RSxPQUFPLE1BQU0sSUFBSSxDQUFDSyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxFQUFFTixhQUFhLENBQUNDLElBQUksQ0FBQyxDQUFDO0FBQy9FLENBQUM7QUFFREYsUUFBUSxDQUFDWSxlQUFlLEdBQUcsZUFBZUEsZUFBZSxHQUFJO0VBQzNELE9BQU8sTUFBTSxJQUFJLENBQUNMLFlBQVksQ0FBQyxvQkFBb0IsRUFBRSxLQUFLLENBQUM7QUFDN0QsQ0FBQztBQUVEUCxRQUFRLENBQUNhLGlCQUFpQixHQUFHLGVBQWVBLGlCQUFpQixDQUFFWCxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7RUFDeEUsUUFBUUEsSUFBSSxDQUFDWSxNQUFNO0lBQ2pCLEtBQUssUUFBUTtNQUNYLE9BQU8sTUFBTSxJQUFJLENBQUNKLGVBQWUsQ0FBQ1IsSUFBSSxDQUFDO0lBQ3pDLEtBQUssU0FBUztNQUNaLE9BQU8sTUFBTSxJQUFJLENBQUNTLGdCQUFnQixDQUFDVCxJQUFJLENBQUM7SUFDMUMsS0FBSyxZQUFZO01BQ2YsT0FBTyxNQUFNLElBQUksQ0FBQ1UsZUFBZSxFQUFFO0lBQ3JDO01BQ0UsTUFBTSxJQUFJRyxLQUFLLENBQUUsMkVBQTBFLEdBQzFFLElBQUdiLElBQUksQ0FBQ1ksTUFBTyx3QkFBdUIsQ0FBQztFQUFDO0FBRS9ELENBQUM7QUFBQyxlQUdhZCxRQUFRO0FBQUEifQ==