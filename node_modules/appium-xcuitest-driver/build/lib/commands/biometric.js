"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;
require("source-map-support/register");
let commands = {},
  helpers = {},
  extensions = {};
exports.helpers = helpers;
exports.commands = commands;
function assertIsSimulator(driver) {
  if (!driver.isSimulator()) {
    throw new Error('Biometric enrollment can only be performed on Simulator');
  }
}
commands.mobileEnrollBiometric = async function mobileEnrollBiometric(opts = {}) {
  const {
    isEnabled = true
  } = opts;
  assertIsSimulator(this);
  await this.opts.device.enrollBiometric(isEnabled);
};
commands.mobileSendBiometricMatch = async function mobileSendBiometricMatch(opts = {}) {
  const {
    match = true,
    type = 'touchId'
  } = opts;
  assertIsSimulator(this);
  await this.opts.device.sendBiometricMatch(match, type);
};
commands.mobileIsBiometricEnrolled = async function mobileIsBiometricEnrolled() {
  assertIsSimulator(this);
  return await this.opts.device.isBiometricEnrolled();
};
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiYXNzZXJ0SXNTaW11bGF0b3IiLCJkcml2ZXIiLCJpc1NpbXVsYXRvciIsIkVycm9yIiwibW9iaWxlRW5yb2xsQmlvbWV0cmljIiwib3B0cyIsImlzRW5hYmxlZCIsImRldmljZSIsImVucm9sbEJpb21ldHJpYyIsIm1vYmlsZVNlbmRCaW9tZXRyaWNNYXRjaCIsIm1hdGNoIiwidHlwZSIsInNlbmRCaW9tZXRyaWNNYXRjaCIsIm1vYmlsZUlzQmlvbWV0cmljRW5yb2xsZWQiLCJpc0Jpb21ldHJpY0Vucm9sbGVkIiwiT2JqZWN0IiwiYXNzaWduIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvbW1hbmRzL2Jpb21ldHJpYy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgY29tbWFuZHMgPSB7fSwgaGVscGVycyA9IHt9LCBleHRlbnNpb25zID0ge307XG5cbmZ1bmN0aW9uIGFzc2VydElzU2ltdWxhdG9yIChkcml2ZXIpIHtcbiAgaWYgKCFkcml2ZXIuaXNTaW11bGF0b3IoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignQmlvbWV0cmljIGVucm9sbG1lbnQgY2FuIG9ubHkgYmUgcGVyZm9ybWVkIG9uIFNpbXVsYXRvcicpO1xuICB9XG59XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gRW5yb2xsT3B0aW9uc1xuICpcbiAqIEBwcm9wZXJ0eSB7P2Jvb2xlYW59IGlzRW5hYmxlZCBbdHJ1ZV0gLSBXaGV0aGVyIHRvIGVuYWJsZS9kaXNhYmxlIGJpb21ldHJpYyBlbnJvbGxtZW50LlxuICovXG5cbi8qKlxuICogRW5yb2xscyBiaW9tZXRyaWMgYXV0aGVudGljYXRpb24gb24gU2ltdWxhdG9yLlxuICpcbiAqIEBwYXJhbSB7RW5yb2xsT3B0aW9uc30gb3B0cyAtIEVucm9sbG1lbnQgb3B0aW9ucy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBlbnJvbGxtZW50IGZhaWxzIG9yIHRoZSBkZXZpY2UgaXMgbm90IGEgU2ltdWxhdG9yLlxuICovXG5jb21tYW5kcy5tb2JpbGVFbnJvbGxCaW9tZXRyaWMgPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVFbnJvbGxCaW9tZXRyaWMgKG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgaXNFbmFibGVkID0gdHJ1ZSxcbiAgfSA9IG9wdHM7XG5cbiAgYXNzZXJ0SXNTaW11bGF0b3IodGhpcyk7XG5cbiAgYXdhaXQgdGhpcy5vcHRzLmRldmljZS5lbnJvbGxCaW9tZXRyaWMoaXNFbmFibGVkKTtcbn07XG5cbi8qKlxuICogQHR5cGVkZWYge09iamVjdH0gQmlvbWV0cmljTWF0Y2hPcHRpb25zXG4gKlxuICogQHByb3BlcnR5IHs/c3RyaW5nfSB0eXBlIFt0b3VjaElkXSAtIFRoZSBiaW9tZXRyaWMgZmVhdHVyZSBuYW1lLlxuICogQHByb3BlcnR5IHs/Ym9vbGVhbn0gbWF0Y2ggW3RydWVdIC0gV2hldGhlciB0byBzaW11bGF0ZSBiaW9tZXRyaWMgbWF0Y2ggb3Igbm9uLW1hdGNoLlxuICovXG5cbi8qKlxuICogRW11bGF0ZXMgYmlvbWV0cmljIG1hdGNoL25vbi1tYXRjaCBldmVudCBvbiBTaW11bGF0b3IuXG4gKiBUaGUgYmlvbWV0cmljIGZlYXR1cmUgaXMgZXhwZWN0ZWQgdG8gYmUgYWxyZWFkeSBlbnJvbGxlZCBiZWZvcmUgZXhlY3V0aW5nIHRoYXQuXG4gKlxuICogQHBhcmFtIHtCaW9tZXRyaWNNYXRjaE9wdGlvbnN9IG9wdHMgLSBNYXRjaGluZyBvcHRpb25zLlxuICogQHRocm93cyB7RXJyb3J9IElmIG1hdGNoaW5nIGZhaWxzIG9yIHRoZSBkZXZpY2UgaXMgbm90IGEgU2ltdWxhdG9yLlxuICovXG5jb21tYW5kcy5tb2JpbGVTZW5kQmlvbWV0cmljTWF0Y2ggPSBhc3luYyBmdW5jdGlvbiBtb2JpbGVTZW5kQmlvbWV0cmljTWF0Y2ggKG9wdHMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgbWF0Y2ggPSB0cnVlLFxuICAgIHR5cGUgPSAndG91Y2hJZCcsXG4gIH0gPSBvcHRzO1xuXG4gIGFzc2VydElzU2ltdWxhdG9yKHRoaXMpO1xuXG4gIGF3YWl0IHRoaXMub3B0cy5kZXZpY2Uuc2VuZEJpb21ldHJpY01hdGNoKG1hdGNoLCB0eXBlKTtcbn07XG5cbi8qKlxuICogQ2hlY2tzIHdoZXRoZXIgYmlvbWV0cmljIGlzIGN1cnJlbnRseSBlbnJvbGxlZCBvciBub3QuXG4gKlxuICogQHJldHVybiB7Ym9vbGVhbn0gVHJ1ZSBpZiBiaW9tZXRyaWMgaXMgZW5yb2xsZWQuXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGRldGVjdGlvbiBmYWlscyBvciB0aGUgZGV2aWNlIGlzIG5vdCBhIFNpbXVsYXRvci5cbiAqL1xuY29tbWFuZHMubW9iaWxlSXNCaW9tZXRyaWNFbnJvbGxlZCA9IGFzeW5jIGZ1bmN0aW9uIG1vYmlsZUlzQmlvbWV0cmljRW5yb2xsZWQgKCkge1xuICBhc3NlcnRJc1NpbXVsYXRvcih0aGlzKTtcblxuICByZXR1cm4gYXdhaXQgdGhpcy5vcHRzLmRldmljZS5pc0Jpb21ldHJpY0Vucm9sbGVkKCk7XG59O1xuXG5PYmplY3QuYXNzaWduKGV4dGVuc2lvbnMsIGNvbW1hbmRzLCBoZWxwZXJzKTtcbmV4cG9ydCB7IGNvbW1hbmRzLCBoZWxwZXJzIH07XG5leHBvcnQgZGVmYXVsdCBleHRlbnNpb25zO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsSUFBSUEsUUFBUSxHQUFHLENBQUMsQ0FBQztFQUFFQyxPQUFPLEdBQUcsQ0FBQyxDQUFDO0VBQUVDLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFBQztBQUFBO0FBRWpELFNBQVNDLGlCQUFpQixDQUFFQyxNQUFNLEVBQUU7RUFDbEMsSUFBSSxDQUFDQSxNQUFNLENBQUNDLFdBQVcsRUFBRSxFQUFFO0lBQ3pCLE1BQU0sSUFBSUMsS0FBSyxDQUFDLHlEQUF5RCxDQUFDO0VBQzVFO0FBQ0Y7QUFjQU4sUUFBUSxDQUFDTyxxQkFBcUIsR0FBRyxlQUFlQSxxQkFBcUIsQ0FBRUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxFQUFFO0VBQ2hGLE1BQU07SUFDSkMsU0FBUyxHQUFHO0VBQ2QsQ0FBQyxHQUFHRCxJQUFJO0VBRVJMLGlCQUFpQixDQUFDLElBQUksQ0FBQztFQUV2QixNQUFNLElBQUksQ0FBQ0ssSUFBSSxDQUFDRSxNQUFNLENBQUNDLGVBQWUsQ0FBQ0YsU0FBUyxDQUFDO0FBQ25ELENBQUM7QUFnQkRULFFBQVEsQ0FBQ1ksd0JBQXdCLEdBQUcsZUFBZUEsd0JBQXdCLENBQUVKLElBQUksR0FBRyxDQUFDLENBQUMsRUFBRTtFQUN0RixNQUFNO0lBQ0pLLEtBQUssR0FBRyxJQUFJO0lBQ1pDLElBQUksR0FBRztFQUNULENBQUMsR0FBR04sSUFBSTtFQUVSTCxpQkFBaUIsQ0FBQyxJQUFJLENBQUM7RUFFdkIsTUFBTSxJQUFJLENBQUNLLElBQUksQ0FBQ0UsTUFBTSxDQUFDSyxrQkFBa0IsQ0FBQ0YsS0FBSyxFQUFFQyxJQUFJLENBQUM7QUFDeEQsQ0FBQztBQVFEZCxRQUFRLENBQUNnQix5QkFBeUIsR0FBRyxlQUFlQSx5QkFBeUIsR0FBSTtFQUMvRWIsaUJBQWlCLENBQUMsSUFBSSxDQUFDO0VBRXZCLE9BQU8sTUFBTSxJQUFJLENBQUNLLElBQUksQ0FBQ0UsTUFBTSxDQUFDTyxtQkFBbUIsRUFBRTtBQUNyRCxDQUFDO0FBRURDLE1BQU0sQ0FBQ0MsTUFBTSxDQUFDakIsVUFBVSxFQUFFRixRQUFRLEVBQUVDLE9BQU8sQ0FBQztBQUFDLGVBRTlCQyxVQUFVO0FBQUEifQ==