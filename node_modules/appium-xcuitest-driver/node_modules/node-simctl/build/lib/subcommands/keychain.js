"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _os = _interopRequireDefault(require("os"));
var _fs = _interopRequireDefault(require("fs"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _uuid = require("uuid");
var _path = _interopRequireDefault(require("path"));
var _lodash = _interopRequireDefault(require("lodash"));
var _rimraf = _interopRequireDefault(require("rimraf"));
const commands = {};
const rimrafAsync = _bluebird.default.promisify(_rimraf.default);
const writeFileAsync = _bluebird.default.promisify(_fs.default.writeFile);
async function handleRawPayload(payload, onPayloadStored) {
  const filePath = _path.default.resolve(_os.default.tmpdir(), `${(0, _uuid.v4)()}.pem`);
  try {
    if (_lodash.default.isBuffer(payload)) {
      await writeFileAsync(filePath, payload);
    } else {
      await writeFileAsync(filePath, payload, 'utf8');
    }
    await onPayloadStored(filePath);
  } finally {
    await rimrafAsync(filePath);
  }
}
commands.addRootCertificate = async function addRootCertificate(cert, opts = {}) {
  const {
    raw = false
  } = opts;
  const execMethod = async certPath => await this.exec('keychain', {
    args: [this.requireUdid('keychain add-root-cert'), 'add-root-cert', certPath]
  });
  if (raw) {
    await handleRawPayload(cert, execMethod);
  } else {
    await execMethod(cert);
  }
};
commands.addCertificate = async function addCertificate(cert, opts = {}) {
  const {
    raw = false
  } = opts;
  const execMethod = async certPath => await this.exec('keychain', {
    args: [this.requireUdid('keychain add-cert'), 'add-cert', certPath]
  });
  if (raw) {
    await handleRawPayload(cert, execMethod);
  } else {
    await execMethod(cert);
  }
};
commands.resetKeychain = async function resetKeychain() {
  await this.exec('keychain', {
    args: [this.requireUdid('keychain reset'), 'reset']
  });
};
var _default = commands;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21tYW5kcyIsInJpbXJhZkFzeW5jIiwiQiIsInByb21pc2lmeSIsInJpbXJhZiIsIndyaXRlRmlsZUFzeW5jIiwiZnMiLCJ3cml0ZUZpbGUiLCJoYW5kbGVSYXdQYXlsb2FkIiwicGF5bG9hZCIsIm9uUGF5bG9hZFN0b3JlZCIsImZpbGVQYXRoIiwicGF0aCIsInJlc29sdmUiLCJvcyIsInRtcGRpciIsInV1aWRWNCIsIl8iLCJpc0J1ZmZlciIsImFkZFJvb3RDZXJ0aWZpY2F0ZSIsImNlcnQiLCJvcHRzIiwicmF3IiwiZXhlY01ldGhvZCIsImNlcnRQYXRoIiwiZXhlYyIsImFyZ3MiLCJyZXF1aXJlVWRpZCIsImFkZENlcnRpZmljYXRlIiwicmVzZXRLZXljaGFpbiJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9zdWJjb21tYW5kcy9rZXljaGFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCB7IHY0IGFzIHV1aWRWNCB9IGZyb20gJ3V1aWQnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHJpbXJhZiBmcm9tICdyaW1yYWYnO1xuXG5jb25zdCBjb21tYW5kcyA9IHt9O1xuY29uc3QgcmltcmFmQXN5bmMgPSBCLnByb21pc2lmeShyaW1yYWYpO1xuY29uc3Qgd3JpdGVGaWxlQXN5bmMgPSBCLnByb21pc2lmeShmcy53cml0ZUZpbGUpO1xuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVSYXdQYXlsb2FkIChwYXlsb2FkLCBvblBheWxvYWRTdG9yZWQpIHtcbiAgY29uc3QgZmlsZVBhdGggPSBwYXRoLnJlc29sdmUob3MudG1wZGlyKCksIGAke3V1aWRWNCgpfS5wZW1gKTtcbiAgdHJ5IHtcbiAgICBpZiAoXy5pc0J1ZmZlcihwYXlsb2FkKSkge1xuICAgICAgYXdhaXQgd3JpdGVGaWxlQXN5bmMoZmlsZVBhdGgsIHBheWxvYWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhd2FpdCB3cml0ZUZpbGVBc3luYyhmaWxlUGF0aCwgcGF5bG9hZCwgJ3V0ZjgnKTtcbiAgICB9XG4gICAgYXdhaXQgb25QYXlsb2FkU3RvcmVkKGZpbGVQYXRoKTtcbiAgfSBmaW5hbGx5IHtcbiAgICBhd2FpdCByaW1yYWZBc3luYyhmaWxlUGF0aCk7XG4gIH1cbn1cblxuXG4vKipcbiAqIEB0eXBlZGVmIHtPYmplY3R9IENlcnRPcHRpb25zXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHJhdyBbZmFsc2VdIC0gd2hldGhlciB0aGUgYGNlcnRgIGFyZ3VtZW50XG4gKiBpcyB0aGUgcGF0aCB0byB0aGUgY2VydGlmaWNhdGUgb24gdGhlIGxvY2FsIGZpbGUgc3lzdGVtIG9yXG4gKiBhIHJhdyBjZXJ0aWZpY2F0ZSBjb250ZW50XG4gKi9cblxuLyoqXG4gKiBBZGRzIHRoZSBnaXZlbiBjZXJ0aWZpY2F0ZSB0byB0aGUgVHJ1c3RlZCBSb290IFN0b3JlIG9uIHRoZSBzaW11bGF0b3JcbiAqXG4gKiBAc2luY2UgWGNvZGUgMTEuNCBTREtcbiAqIEBwYXJhbSB7c3RyaW5nfSBjZXJ0IHRoZSBmdWxsIHBhdGggdG8gYSB2YWxpZCAuY2VydCBmaWxlIGNvbnRhaW5pbmdcbiAqIHRoZSBjZXJ0aWZpY2F0ZSBjb250ZW50IG9yIHRoZSBjZXJ0aWZpY2F0ZSBjb250ZW50IGl0c2VsZiwgZGVwZW5kaW5nIG9uXG4gKiBvcHRpb25zXG4gKiBAcGFyYW0ge0NlcnRPcHRpb25zfSBvcHRzXG4gKiBAdGhyb3dzIHtFcnJvcn0gaWYgdGhlIGN1cnJlbnQgU0RLIHZlcnNpb24gZG9lcyBub3Qgc3VwcG9ydCB0aGUgY29tbWFuZFxuICogb3IgdGhlcmUgd2FzIGFuIGVycm9yIHdoaWxlIGFkZGluZyB0aGUgY2VydGlmaWNhdGVcbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgYHVkaWRgIGluc3RhbmNlIHByb3BlcnR5IGlzIHVuc2V0XG4gKi9cbmNvbW1hbmRzLmFkZFJvb3RDZXJ0aWZpY2F0ZSA9IGFzeW5jIGZ1bmN0aW9uIGFkZFJvb3RDZXJ0aWZpY2F0ZSAoY2VydCwgb3B0cyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICByYXcgPSBmYWxzZSxcbiAgfSA9IG9wdHM7XG4gIGNvbnN0IGV4ZWNNZXRob2QgPSBhc3luYyAoY2VydFBhdGgpID0+IGF3YWl0IHRoaXMuZXhlYygna2V5Y2hhaW4nLCB7XG4gICAgYXJnczogW3RoaXMucmVxdWlyZVVkaWQoJ2tleWNoYWluIGFkZC1yb290LWNlcnQnKSwgJ2FkZC1yb290LWNlcnQnLCBjZXJ0UGF0aF0sXG4gIH0pO1xuICBpZiAocmF3KSB7XG4gICAgYXdhaXQgaGFuZGxlUmF3UGF5bG9hZChjZXJ0LCBleGVjTWV0aG9kKTtcbiAgfSBlbHNlIHtcbiAgICBhd2FpdCBleGVjTWV0aG9kKGNlcnQpO1xuICB9XG59O1xuXG4vKipcbiAqIEFkZHMgdGhlIGdpdmVuIGNlcnRpZmljYXRlIHRvIHRoZSBLZXljaGFpbiBTdG9yZSBvbiB0aGUgc2ltdWxhdG9yXG4gKlxuICogQHNpbmNlIFhjb2RlIDExLjQgU0RLXG4gKiBAcGFyYW0ge3N0cmluZ30gY2VydCB0aGUgZnVsbCBwYXRoIHRvIGEgdmFsaWQgLmNlcnQgZmlsZSBjb250YWluaW5nXG4gKiB0aGUgY2VydGlmaWNhdGUgY29udGVudCBvciB0aGUgY2VydGlmaWNhdGUgY29udGVudCBpdHNlbGYsIGRlcGVuZGluZyBvblxuICogb3B0aW9uc1xuICogQHBhcmFtIHtDZXJ0T3B0aW9uc30gb3B0c1xuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSBjdXJyZW50IFNESyB2ZXJzaW9uIGRvZXMgbm90IHN1cHBvcnQgdGhlIGNvbW1hbmRcbiAqIG9yIHRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSBhZGRpbmcgdGhlIGNlcnRpZmljYXRlXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGB1ZGlkYCBpbnN0YW5jZSBwcm9wZXJ0eSBpcyB1bnNldFxuICovXG5jb21tYW5kcy5hZGRDZXJ0aWZpY2F0ZSA9IGFzeW5jIGZ1bmN0aW9uIGFkZENlcnRpZmljYXRlIChjZXJ0LCBvcHRzID0ge30pIHtcbiAgY29uc3Qge1xuICAgIHJhdyA9IGZhbHNlLFxuICB9ID0gb3B0cztcbiAgY29uc3QgZXhlY01ldGhvZCA9IGFzeW5jIChjZXJ0UGF0aCkgPT4gYXdhaXQgdGhpcy5leGVjKCdrZXljaGFpbicsIHtcbiAgICBhcmdzOiBbdGhpcy5yZXF1aXJlVWRpZCgna2V5Y2hhaW4gYWRkLWNlcnQnKSwgJ2FkZC1jZXJ0JywgY2VydFBhdGhdLFxuICB9KTtcbiAgaWYgKHJhdykge1xuICAgIGF3YWl0IGhhbmRsZVJhd1BheWxvYWQoY2VydCwgZXhlY01ldGhvZCk7XG4gIH0gZWxzZSB7XG4gICAgYXdhaXQgZXhlY01ldGhvZChjZXJ0KTtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXNldHMgdGhlIHNpbXVsYXRvciBrZXljaGFpblxuICpcbiAqIEBzaW5jZSBYY29kZSAxMS40IFNES1xuICogQHRocm93cyB7RXJyb3J9IGlmIHRoZSBjdXJyZW50IFNESyB2ZXJzaW9uIGRvZXMgbm90IHN1cHBvcnQgdGhlIGNvbW1hbmRcbiAqIG9yIHRoZXJlIHdhcyBhbiBlcnJvciB3aGlsZSByZXNldHRpbmcgdGhlIGtleWNoYWluXG4gKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIGB1ZGlkYCBpbnN0YW5jZSBwcm9wZXJ0eSBpcyB1bnNldFxuICovXG5jb21tYW5kcy5yZXNldEtleWNoYWluID0gYXN5bmMgZnVuY3Rpb24gcmVzZXRLZXljaGFpbiAoKSB7XG4gIGF3YWl0IHRoaXMuZXhlYygna2V5Y2hhaW4nLCB7XG4gICAgYXJnczogW3RoaXMucmVxdWlyZVVkaWQoJ2tleWNoYWluIHJlc2V0JyksICdyZXNldCddLFxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbW1hbmRzO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FB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