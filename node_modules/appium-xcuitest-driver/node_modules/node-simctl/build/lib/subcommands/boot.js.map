{"version":3,"file":"boot.js","names":["commands","bootDevice","exec","args","requireUdid","e","_","includes","message","log","debug","LOG_PREFIX"],"sources":["../../../lib/subcommands/boot.js"],"sourcesContent":["import _ from 'lodash';\nimport log, { LOG_PREFIX } from '../logger';\n\n\nconst commands = {};\n\n/**\n * Boot the particular Simulator if it is not running.\n *\n * @throws {Error} If the corresponding simctl subcommand command\n *                 returns non-zero return code.\n * @throws {Error} If the `udid` instance property is unset\n */\ncommands.bootDevice = async function bootDevice () {\n  try {\n    await this.exec('boot', {\n      args: [this.requireUdid('boot')]\n    });\n  } catch (e) {\n    if (_.includes(e.message, 'Unable to boot device in current state: Booted')) {\n      throw e;\n    }\n    log.debug(LOG_PREFIX, `Simulator already in 'Booted' state. Continuing`);\n  }\n};\n\nexport default commands;\n"],"mappings":";;;;;;;;AAAA;AACA;AAA4C;AAAA;AAG5C,MAAMA,QAAQ,GAAG,CAAC,CAAC;AASnBA,QAAQ,CAACC,UAAU,GAAG,eAAeA,UAAU,GAAI;EACjD,IAAI;IACF,MAAM,IAAI,CAACC,IAAI,CAAC,MAAM,EAAE;MACtBC,IAAI,EAAE,CAAC,IAAI,CAACC,WAAW,CAAC,MAAM,CAAC;IACjC,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,IAAIC,eAAC,CAACC,QAAQ,CAACF,CAAC,CAACG,OAAO,EAAE,gDAAgD,CAAC,EAAE;MAC3E,MAAMH,CAAC;IACT;IACAI,eAAG,CAACC,KAAK,CAACC,kBAAU,EAAG,iDAAgD,CAAC;EAC1E;AACF,CAAC;AAAC,eAEaX,QAAQ;AAAA"}