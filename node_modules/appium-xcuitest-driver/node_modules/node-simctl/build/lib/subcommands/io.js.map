{"version":3,"file":"io.js","names":["commands","rimrafAsync","B","promisify","rimraf","readFileAsync","fs","readFile","getScreenshot","udid","requireUdid","pathToScreenshotPng","path","resolve","os","tmpdir","uuidV4","exec","args","toString"],"sources":["../../../lib/subcommands/io.js"],"sourcesContent":["import rimraf from 'rimraf';\nimport { v4 as uuidV4 } from 'uuid';\nimport path from 'path';\nimport os from 'os';\nimport fs from 'fs';\nimport B from 'bluebird';\n\nconst commands = {};\nconst rimrafAsync = B.promisify(rimraf);\nconst readFileAsync = B.promisify(fs.readFile);\n\n/**\n * Gets base64 screenshot for device\n * It is required that Simulator is in _booted_ state.\n *\n * @since Xcode SDK 8.1\n * @return {string} Base64-encoded Simulator screenshot.\n * @throws {Error} If the corresponding simctl subcommand command\n *                 returns non-zero return code.\n * @throws {Error} If the `udid` instance property is unset\n */\ncommands.getScreenshot = async function getScreenshot () {\n  const udid = this.requireUdid('io screenshot');\n  const pathToScreenshotPng = path.resolve(os.tmpdir(), `${uuidV4()}.png`);\n  try {\n    await this.exec('io', {\n      args: [udid, 'screenshot', pathToScreenshotPng],\n    });\n    return (await readFileAsync(pathToScreenshotPng)).toString('base64');\n  } finally {\n    await rimrafAsync(pathToScreenshotPng);\n  }\n};\n\nexport default commands;\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,QAAQ,GAAG,CAAC,CAAC;AACnB,MAAMC,WAAW,GAAGC,iBAAC,CAACC,SAAS,CAACC,eAAM,CAAC;AACvC,MAAMC,aAAa,GAAGH,iBAAC,CAACC,SAAS,CAACG,WAAE,CAACC,QAAQ,CAAC;AAY9CP,QAAQ,CAACQ,aAAa,GAAG,eAAeA,aAAa,GAAI;EACvD,MAAMC,IAAI,GAAG,IAAI,CAACC,WAAW,CAAC,eAAe,CAAC;EAC9C,MAAMC,mBAAmB,GAAGC,aAAI,CAACC,OAAO,CAACC,WAAE,CAACC,MAAM,EAAE,EAAG,GAAE,IAAAC,QAAM,GAAG,MAAK,CAAC;EACxE,IAAI;IACF,MAAM,IAAI,CAACC,IAAI,CAAC,IAAI,EAAE;MACpBC,IAAI,EAAE,CAACT,IAAI,EAAE,YAAY,EAAEE,mBAAmB;IAChD,CAAC,CAAC;IACF,OAAO,CAAC,MAAMN,aAAa,CAACM,mBAAmB,CAAC,EAAEQ,QAAQ,CAAC,QAAQ,CAAC;EACtE,CAAC,SAAS;IACR,MAAMlB,WAAW,CAACU,mBAAmB,CAAC;EACxC;AACF,CAAC;AAAC,eAEaX,QAAQ;AAAA"}