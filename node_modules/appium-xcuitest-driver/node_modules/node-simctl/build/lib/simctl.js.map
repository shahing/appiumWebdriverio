{"version":3,"file":"simctl.js","names":["SIMCTL_ENV_PREFIX","DEFAULT_OPTS","xcrun","path","execTimeout","DEFAULT_EXEC_TIMEOUT","logErrors","Simctl","constructor","opts","_","cloneDeep","defaultsDeep","key","keys","_udid","isNil","udid","_devicesSetPath","devicesSetPath","value","requireUdid","commandName","Error","requireXcrun","xcrunBinary","getXcrunBinary","which","e","exec","subcommand","args","env","asynchronous","encoding","defaults","mapKeys","startsWith","process","execOpts","timeout","SubProcess","tpExec","stderr","msg","trim","log","debug","LOG_PREFIX","message","fnName","fn","toPairs","subcommands","prototype"],"sources":["../../lib/simctl.js"],"sourcesContent":["import _ from 'lodash';\nimport subcommands from './subcommands/index.js';\nimport which from 'which';\nimport log, { LOG_PREFIX } from './logger';\nimport {\n  DEFAULT_EXEC_TIMEOUT, getXcrunBinary,\n} from './helpers';\nimport { exec as tpExec, SubProcess } from 'teen_process';\n\nconst SIMCTL_ENV_PREFIX = 'SIMCTL_CHILD_';\nconst DEFAULT_OPTS = {\n  xcrun: {\n    path: null,\n  },\n  execTimeout: DEFAULT_EXEC_TIMEOUT,\n  logErrors: true,\n};\n\n/**\n * @typedef {Object} ExecOpts\n * @property {Array.<string>} args [[]] - The list of additional subcommand arguments.\n * It's empty by default.\n * @property {Object} env [{}] - Environment variables mapping. All these variables\n * will be passed Simulator and used in the executing function.\n * @property {boolean} logErrors [true] - Set it to _false_ to throw execution errors\n * immediately without logging any additional information.\n * @property {boolean} asynchronous [false] - Whether to execute the given command\n * 'synchronously' or 'asynchronously'. Affects the returned result of the function.\n * @property {?string} encoding - Explicitly sets streams encoding for the executed\n * command input and outputs.\n */\n\n\n/**\n * @typedef {Object} SimctlOpts\n * @property {?Object} xcrun - The xcrun properties. Currently only one property\n * is supported, which is `path` and it by default contains `null`, which enforces\n * the instance to automatically detect the full path to `xcrun` tool and to throw\n * an exception if it cannot be detected. If the path is set upon instance creation\n * then it is going to be used by `exec` and no autodetection will happen.\n * @property {?number} execTimeout [600000] - The maximum number of milliseconds\n * to wait for single synchronous xcrun command.\n * @property {?boolean} logErrors [true] - Whether to wire xcrun error messages\n * into debug log before throwing them.\n * @property {?string} udid [null] - The unique identifier of the current device, which is\n * going to be implicitly passed to all methods, which require it. It can either be set\n * upon instance creation if it is already known in advance or later when/if needed via the\n * corresponding instance setter.\n * @property {?string} devicesSetPath - Full path to the set of devices that you want to manage.\n * By default this path usually equals to ~/Library/Developer/CoreSimulator/Devices\n */\n\n\nclass Simctl {\n  /**\n   * @param {?SimctlOpts} opts\n   */\n  constructor (opts = {}) {\n    opts = _.cloneDeep(opts);\n    _.defaultsDeep(opts, DEFAULT_OPTS);\n    for (const key of _.keys(DEFAULT_OPTS)) {\n      this[key] = opts[key];\n    }\n    this._udid = _.isNil(opts.udid) ? null : opts.udid;\n    this._devicesSetPath = _.isNil(opts.devicesSetPath) ? null : opts.devicesSetPath;\n  }\n\n  set udid (value) {\n    this._udid = value;\n  }\n\n  get udid () {\n    return this._udid;\n  }\n\n  set devicesSetPath (value) {\n    this._devicesSetPath = value;\n  }\n\n  get devicesSetPath () {\n    return this._devicesSetPath;\n  }\n\n  requireUdid (commandName = null) {\n    if (!this.udid) {\n      throw new Error(`udid is required to be set for ` +\n        (commandName ? `the '${commandName}' command` : 'this simctl command'));\n    }\n    return this.udid;\n  }\n\n  async requireXcrun () {\n    const xcrunBinary = getXcrunBinary();\n\n    if (!this.xcrun.path) {\n      try {\n        this.xcrun.path = await which(xcrunBinary);\n      } catch (e) {\n        throw new Error(`${xcrunBinary} tool has not been found in PATH. ` +\n          `Are Xcode developers tools installed?`);\n      }\n    }\n    return this.xcrun.path;\n  }\n\n  /**\n   * Execute the particular simctl command.\n   *\n   * @param {string} subcommand - One of available simctl subcommands.\n   *                           Execute `xcrun simctl` in Terminal to see the full list\n   *                           of available subcommands.\n   * @param {?ExecOpts} opts\n   * @return {ExecResult|SubProcess} Either the result of teen process's `exec` or\n   * `SubProcess` instance depending of `opts.asynchronous` value.\n   * @throws {Error} If the simctl subcommand command returns non-zero return code.\n   */\n  async exec (subcommand, opts = {}) {\n    let {\n      args = [],\n      env = {},\n      asynchronous = false,\n      encoding,\n      logErrors = true,\n    } = opts;\n    // run a particular simctl command\n    args = ['simctl',\n      ...(this.devicesSetPath ? ['--set', this.devicesSetPath] : []),\n      subcommand,\n      ...args\n    ];\n    // Prefix all passed in environment variables with 'SIMCTL_CHILD_', simctl\n    // will then pass these to the child (spawned) process.\n    env = _.defaults(\n      _.mapKeys(env,\n        (value, key) => _.startsWith(key, SIMCTL_ENV_PREFIX) ? key : `${SIMCTL_ENV_PREFIX}${key}`),\n      process.env);\n\n    const execOpts = {\n      env,\n      encoding,\n    };\n    if (!asynchronous) {\n      execOpts.timeout = this.execTimeout;\n    }\n    const xcrun = await this.requireXcrun();\n    try {\n      return asynchronous ? new SubProcess(xcrun, args, execOpts) : await tpExec(xcrun, args, execOpts);\n    } catch (e) {\n      if (!this.logErrors || !logErrors) {\n        // if we don't want to see the errors, just throw and allow the calling\n        // code do what it wants\n      } else if (e.stderr) {\n        const msg = `Error running '${subcommand}': ${e.stderr.trim()}`;\n        log.debug(LOG_PREFIX, msg);\n        e.message = msg;\n      } else {\n        log.debug(LOG_PREFIX, e.message);\n      }\n      throw e;\n    }\n  }\n}\n\n\n// add all the subcommands to the Simctl prototype\nfor (const [fnName, fn] of _.toPairs(subcommands)) {\n  Simctl.prototype[fnName] = fn;\n}\n\nexport default Simctl;\nexport { Simctl };\n"],"mappings":"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"}