"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.clearInternalCache = clearInternalCache;
exports.getAutomationTraceTemplatePath = void 0;
exports.getAutomationTraceTemplatePathWithoutRetry = getAutomationTraceTemplatePathWithoutRetry;
exports.getClangVersion = getClangVersion;
exports.getCommandLineToolsVersion = getCommandLineToolsVersion;
exports.getConnectedDevices = getConnectedDevices;
exports.getMaxIOSSDK = exports.getInstrumentsPath = void 0;
exports.getMaxIOSSDKWithoutRetry = getMaxIOSSDKWithoutRetry;
exports.getMaxTVOSSDK = void 0;
exports.getMaxTVOSSDKWithoutRetry = getMaxTVOSSDKWithoutRetry;
exports.getPath = void 0;
exports.getVersion = getVersion;
require("source-map-support/register");
var _support = require("@appium/support");
var _path = _interopRequireDefault(require("path"));
var _asyncbox = require("asyncbox");
var _lodash = _interopRequireDefault(require("lodash"));
var _plist = require("plist");
var _teen_process = require("teen_process");
var _semver = _interopRequireDefault(require("semver"));
const env = process.env;
const XCRUN_TIMEOUT = 15000;
const XCODE_SUBDIR = '/Contents/Developer';
const DEFAULT_NUMBER_OF_RETRIES = 3;
const log = _support.logger.getLogger('Xcode');
function hasExpectedSubDir(path) {
  return path.substring(path.length - XCODE_SUBDIR.length) === XCODE_SUBDIR;
}
async function runXcrunCommand(args, timeout = XCRUN_TIMEOUT) {
  try {
    const res = await (0, _teen_process.exec)('xcrun', args, {
      timeout
    });
    if (_lodash.default.isUndefined(res)) {
      throw new Error(`Nothing returned from trying to run 'xcrun ${args.join(' ')}'`);
    }
    return res;
  } catch (err) {
    if (err.stderr) {
      err.message = `${err.message}: ${err.stderr}`;
    }
    throw err;
  }
}
async function getPathFromSymlink(failMessage) {
  log.warn(`Finding XcodePath by symlink because ${failMessage}`);
  const symlinkPath = '/var/db/xcode_select_link';
  const legacySymlinkPath = '/usr/share/xcode-select/xcode_dir_link';
  let xcodePath = null;
  if (_support.util.hasContent(env.DEVELOPER_DIR)) {
    const customPath = hasExpectedSubDir(env.DEVELOPER_DIR) ? env.DEVELOPER_DIR : env.DEVELOPER_DIR + XCODE_SUBDIR;
    if (await _support.fs.exists(customPath)) {
      xcodePath = customPath;
    } else {
      let mesg = `Could not find path to Xcode, environment variable ` + `DEVELOPER_DIR set to: ${env.DEVELOPER_DIR} ` + `but no Xcode found`;
      log.warn(mesg);
      throw new Error(mesg);
    }
  } else if (await _support.fs.exists(symlinkPath)) {
    xcodePath = await _support.fs.readlink(symlinkPath);
  } else if (await _support.fs.exists(legacySymlinkPath)) {
    xcodePath = await _support.fs.readlink(legacySymlinkPath);
  }
  if (xcodePath) {
    return xcodePath.replace(new RegExp('/$'), '').trim();
  }
  let msg = `Could not find path to Xcode by symlinks located in ${symlinkPath}, or ${legacySymlinkPath}`;
  log.warn(msg);
  throw new Error(msg);
}
async function getPathFromXcodeSelect(timeout = XCRUN_TIMEOUT) {
  let {
    stdout
  } = await (0, _teen_process.exec)('xcode-select', ['--print-path'], {
    timeout
  });
  const xcodeFolderPath = stdout.replace(/\/$/, '').trim();
  if (!_support.util.hasContent(xcodeFolderPath)) {
    log.errorAndThrow('xcode-select returned an empty string');
  }
  if (await _support.fs.exists(xcodeFolderPath)) {
    return xcodeFolderPath;
  } else {
    const msg = `xcode-select could not find xcode. Path '${xcodeFolderPath}' does not exist.`;
    log.errorAndThrow(msg);
  }
}
const getPath = _lodash.default.memoize(function getPath(timeout = XCRUN_TIMEOUT) {
  return (async () => {
    try {
      return await getPathFromXcodeSelect(timeout);
    } catch (e) {
      return await getPathFromSymlink(e.message);
    }
  })();
});
exports.getPath = getPath;
async function getVersionWithoutRetry(timeout = XCRUN_TIMEOUT) {
  const xcodePath = await getPath(timeout);
  const plistPath = _path.default.resolve(xcodePath, '..', 'Info.plist');
  if (!(await _support.fs.exists(plistPath))) {
    throw new Error(`Could not get Xcode version. ${plistPath} does not exist on disk.`);
  }
  const version = await _support.plist.parsePlistFile(plistPath);
  return _semver.default.coerce(version.CFBundleShortVersionString);
}
const getVersionMemoized = _lodash.default.memoize(function getVersionMemoized(retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getVersionWithoutRetry, timeout);
});
async function getVersion(parse = false, retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {
  const version = await getVersionMemoized(retries, timeout);
  const versionString = version.patch > 0 ? version.version : `${version.major}.${version.minor}`;
  if (!parse) {
    return versionString;
  }
  return {
    versionString,
    versionFloat: parseFloat(versionString),
    major: version.major,
    minor: version.minor,
    patch: version.patch > 0 ? version.patch : undefined,
    toString() {
      return versionString;
    }
  };
}
async function getCommandLineToolsVersion() {
  const getVersionFunctions = [async () => {
    let pkg = (await (0, _teen_process.exec)('pkgutil', ['--pkgs=com.apple.pkg.DevSDK_.*'])).stdout;
    return (await (0, _teen_process.exec)('pkgutil', [`--pkg-info=${pkg.trim()}`])).stdout;
  }, async () => (await (0, _teen_process.exec)('pkgutil', [`--pkg-info=com.apple.pkg.CLTools_Executables`])).stdout, async () => (await (0, _teen_process.exec)('pkgutil', [`--pkg-info=com.apple.pkg.DeveloperToolsCLI`])).stdout];
  let stdout;
  for (let getVersion of getVersionFunctions) {
    try {
      stdout = await getVersion();
      break;
    } catch (ign) {
      stdout = '';
    }
  }
  let match = /^version: (.+)$/m.exec(stdout);
  return match ? match[1] : undefined;
}
async function getClangVersion() {
  try {
    await _support.fs.which('clang');
  } catch (e) {
    log.info('Cannot find clang executable on the local system. ' + 'Are Xcode Command Line Tools installed?');
    return null;
  }
  const {
    stdout
  } = await (0, _teen_process.exec)('clang', ['--version']);
  const match = /clang-([0-9.]+)/.exec(stdout);
  if (!match) {
    log.info(`Cannot parse clang version from ${stdout}`);
    return null;
  }
  return match[1];
}
async function getAutomationTraceTemplatePathWithoutRetry(timeout = XCRUN_TIMEOUT) {
  const xcodePath = await getPath(timeout);
  const extensions = ['xrplugin', 'bundle'];
  const pathPrefix = _path.default.resolve(xcodePath, '../Applications/Instruments.app/Contents/PlugIns');
  const pathSuffix = 'Contents/Resources/Automation.tracetemplate';
  let automationTraceTemplatePaths = [_path.default.resolve(pathPrefix, `AutomationInstrument.${extensions[0]}`, pathSuffix), _path.default.resolve(pathPrefix, `AutomationInstrument.${extensions[1]}`, pathSuffix)];
  if (await _support.fs.exists(automationTraceTemplatePaths[0])) {
    return automationTraceTemplatePaths[0];
  }
  if (await _support.fs.exists(automationTraceTemplatePaths[1])) {
    return automationTraceTemplatePaths[1];
  }
  const msg = 'Could not find Automation.tracetemplate in any of the following' + `locations ${automationTraceTemplatePaths.toString()}`;
  log.error(msg);
  throw new Error(msg);
}
const getAutomationTraceTemplatePath = _lodash.default.memoize(function getAutomationTraceTemplatePath(retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getAutomationTraceTemplatePathWithoutRetry, timeout);
});
exports.getAutomationTraceTemplatePath = getAutomationTraceTemplatePath;
async function getMaxIOSSDKWithoutRetry(timeout = XCRUN_TIMEOUT) {
  const version = await getVersion(false, DEFAULT_NUMBER_OF_RETRIES, timeout);
  if (version[0] === '4') {
    return '6.1';
  }
  const args = ['--sdk', 'iphonesimulator', '--show-sdk-version'];
  const {
    stdout
  } = await runXcrunCommand(args, timeout);
  const sdkVersion = stdout.trim();
  const match = /\d.\d/.exec(stdout);
  if (!match) {
    throw new Error(`xcrun returned a non-numeric iOS SDK version: '${sdkVersion}'`);
  }
  return sdkVersion;
}
async function getMaxIOSSDKFromXcodeVersion(timeout = XCRUN_TIMEOUT) {
  const version = await getVersion(true, DEFAULT_NUMBER_OF_RETRIES, timeout);
  return `${version.major + 2}.${version.minor}`;
}
const getMaxIOSSDK = _lodash.default.memoize(function getMaxIOSSDK(retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {
  try {
    return (0, _asyncbox.retry)(retries, getMaxIOSSDKWithoutRetry, timeout);
  } catch (err) {
    log.warn(`Unable to retrieve maximum iOS version: ${err.message}`);
    log.warn('Guessing from Xcode version');
    return getMaxIOSSDKFromXcodeVersion(timeout);
  }
});
exports.getMaxIOSSDK = getMaxIOSSDK;
async function getMaxTVOSSDKWithoutRetry(timeout = XCRUN_TIMEOUT) {
  const args = ['--sdk', 'appletvsimulator', '--show-sdk-version'];
  const {
    stdout
  } = await runXcrunCommand(args, timeout);
  const sdkVersion = stdout.trim();
  if (isNaN(parseFloat(sdkVersion))) {
    throw new Error(`xcrun returned a non-numeric tvOS SDK version: '${sdkVersion}'`);
  }
  return sdkVersion;
}
const getMaxTVOSSDK = _lodash.default.memoize(function getMaxTVOSSDK(retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getMaxTVOSSDKWithoutRetry, timeout);
});
exports.getMaxTVOSSDK = getMaxTVOSSDK;
async function getConnectedDevices(timeout = XCRUN_TIMEOUT) {
  const cmd = '/usr/sbin/system_profiler';
  const args = ['-xml', 'SPUSBDataType'];
  let {
    stdout
  } = await (0, _teen_process.exec)(cmd, args, {
    timeout
  });
  let plistContent = (0, _plist.parse)(stdout);
  let devicesFound = [];
  let entriesToSearch = [plistContent[0]];
  while (entriesToSearch.length > 0) {
    let currentEntry = entriesToSearch.pop();
    if (currentEntry instanceof Array) {
      entriesToSearch = entriesToSearch.concat(currentEntry);
    } else if (currentEntry._name && currentEntry._name.substring(0, 4) === 'iPad' || currentEntry._name && currentEntry._name.substring(0, 6) === 'iPhone' || currentEntry._name && _lodash.default.includes(currentEntry._name, 'Apple TV')) {
      let deviceInfo = {
        name: currentEntry._name,
        udid: currentEntry.serial_num,
        productId: currentEntry.product_id,
        deviceVersion: currentEntry.bcd_device
      };
      devicesFound.push(deviceInfo);
    } else if (currentEntry._items) {
      entriesToSearch = entriesToSearch.concat(currentEntry._items);
    }
  }
  return devicesFound;
}
async function getInstrumentsPathWithoutRetry(timeout = XCRUN_TIMEOUT) {
  const args = ['-find', 'instruments'];
  let {
    stdout
  } = await runXcrunCommand(args, timeout);
  if (!stdout) {
    stdout = '';
  }
  let instrumentsPath = stdout.trim();
  if (!instrumentsPath) {
    throw new Error(`Could not find path to instruments binary using 'xcrun ${args.join(' ')}'`);
  }
  return instrumentsPath;
}
const getInstrumentsPath = _lodash.default.memoize(function getInstrumentsPath(retries = DEFAULT_NUMBER_OF_RETRIES, timeout = XCRUN_TIMEOUT) {
  return (0, _asyncbox.retry)(retries, getInstrumentsPathWithoutRetry, timeout);
});
exports.getInstrumentsPath = getInstrumentsPath;
function clearInternalCache() {
  const memoized = [getPath, getVersionMemoized, getAutomationTraceTemplatePath, getMaxIOSSDK, getMaxTVOSSDK, getInstrumentsPath];
  memoized.forEach(f => {
    if (f.cache) {
      f.cache = new _lodash.default.memoize.Cache();
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,