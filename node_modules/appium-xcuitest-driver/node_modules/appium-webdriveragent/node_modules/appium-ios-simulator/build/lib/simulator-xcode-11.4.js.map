{"version":3,"file":"simulator-xcode-11.4.js","names":["SimulatorXcode11_4","SimulatorXcode11","constructor","udid","xcodeVersion","_locationMenu","setAppearance","value","simctl","_","toLower","getAppearance","addCertificate","payload","opts","isRoot","methodName","raw","pushNotification","setPermissions","bundleId","permissionsMapping","clearKeychains","resetKeychain","launchWindow","isUiClientRunning","startUIClient","boot","enableCalendarAccess","bundleID","grantPermission","disableCalendarAccess","revokePermission"],"sources":["../../lib/simulator-xcode-11.4.js"],"sourcesContent":["import _ from 'lodash';\nimport SimulatorXcode11 from './simulator-xcode-11';\n\nclass SimulatorXcode11_4 extends SimulatorXcode11 {\n  constructor (udid, xcodeVersion) {\n    super(udid, xcodeVersion);\n\n    // for setting the location using AppleScript, the top-level menu through which\n    // the 'Location' option is found\n    this._locationMenu = 'Features';\n  }\n\n  /**\n   * @override\n   * Sets UI appearance style.\n   * This function can only be called on a booted simulator.\n   *\n   * @since Xcode SDK 11.4\n   * @param {string} value one of possible appearance values:\n   * - dark: to switch to the Dark mode\n   * - light: to switch to the Light mode\n   */\n  async setAppearance (value) {\n    await this.simctl.setAppearance(_.toLower(value));\n  }\n\n  /**\n   * @override\n   * Gets the current UI appearance style\n   * This function can only be called on a booted simulator.\n   *\n   * @since Xcode SDK 11.4\n   * @returns {string} the current UI appearance style.\n   * Possible values are:\n   * - dark: to switch to the Dark mode\n   * - light: to switch to the Light mode\n   */\n  async getAppearance () {\n    return await this.simctl.getAppearance();\n  }\n\n  /**\n   * @typedef {Object} CertificateOptions\n   * @property {boolean} isRoot [true] - Whether to install the given\n   * certificate into the Trusted Root store (`true`) or to the keychain\n   * (`false`)\n   */\n\n  /**\n   * @override\n   * Adds the given certificate to the booted simulator.\n   * The simulator could be in both running and shutdown states\n   * in order for this method to run as expected.\n   *\n   * @param {string} payload the content of the PEM certificate\n   * @param {CertificateOptions} opts\n   */\n  async addCertificate (payload, opts = {}) {\n    const {\n      isRoot = true,\n    } = opts;\n    const methodName = isRoot ? 'addRootCertificate' : 'addCertificate';\n    await this.simctl[methodName](payload, {raw: true});\n    return true;\n  }\n\n  /**\n   * @override\n   * Simulates push notification delivery to the booted simulator\n   *\n   * @since Xcode SDK 11.4\n   * @param {Object} payload - The object that describes Apple push notification content.\n   * It must contain a top-level \"Simulator Target Bundle\" key with a string value matching\n   * the target applicationâ€˜s bundle identifier and \"aps\" key with valid Apple Push Notification values.\n   * For example:\n   * {\n   *   \"Simulator Target Bundle\": \"com.apple.Preferences\",\n   *   \"aps\": {\n   *     \"alert\": \"This is a simulated notification!\",\n   *     \"badge\": 3,\n   *     \"sound\": \"default\"\n   *   }\n   * }\n   */\n  async pushNotification (payload) {\n    await this.simctl.pushNotification(payload);\n  }\n\n  /**\n   * @override\n   */\n  async setPermissions (bundleId, permissionsMapping) {\n    return await super.setPermissions(bundleId, permissionsMapping);\n\n    // TODO: Switch to `simctl privacy` call after Apple\n    // fixes the command (https://github.com/appium/appium/issues/14355)\n    // Source PR: https://github.com/appium/appium-ios-simulator/pull/279\n  }\n\n  /**\n   * @override\n   */\n  async clearKeychains () {\n    await this.simctl.resetKeychain();\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   * */\n  async launchWindow (isUiClientRunning, opts) {\n    // In xcode 11.4, UI Client must be first launched, otherwise\n    // sim window stays minimized\n    if (!isUiClientRunning) {\n      await this.startUIClient(opts);\n    }\n    await this.boot();\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   */\n  async enableCalendarAccess (bundleID) {\n    await this.simctl.grantPermission(bundleID, 'calendar');\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   */\n  async disableCalendarAccess (bundleID) {\n    await this.simctl.revokePermission(bundleID, 'calendar');\n  }\n\n\n}\n\nexport default SimulatorXcode11_4;\n"],"mappings":";;;;;;;;AAAA;AACA;AAEA,MAAMA,kBAAkB,SAASC,uBAAgB,CAAC;EAChDC,WAAW,CAAEC,IAAI,EAAEC,YAAY,EAAE;IAC/B,KAAK,CAACD,IAAI,EAAEC,YAAY,CAAC;IAIzB,IAAI,CAACC,aAAa,GAAG,UAAU;EACjC;EAYA,MAAMC,aAAa,CAAEC,KAAK,EAAE;IAC1B,MAAM,IAAI,CAACC,MAAM,CAACF,aAAa,CAACG,eAAC,CAACC,OAAO,CAACH,KAAK,CAAC,CAAC;EACnD;EAaA,MAAMI,aAAa,GAAI;IACrB,OAAO,MAAM,IAAI,CAACH,MAAM,CAACG,aAAa,EAAE;EAC1C;EAkBA,MAAMC,cAAc,CAAEC,OAAO,EAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;IACxC,MAAM;MACJC,MAAM,GAAG;IACX,CAAC,GAAGD,IAAI;IACR,MAAME,UAAU,GAAGD,MAAM,GAAG,oBAAoB,GAAG,gBAAgB;IACnE,MAAM,IAAI,CAACP,MAAM,CAACQ,UAAU,CAAC,CAACH,OAAO,EAAE;MAACI,GAAG,EAAE;IAAI,CAAC,CAAC;IACnD,OAAO,IAAI;EACb;EAoBA,MAAMC,gBAAgB,CAAEL,OAAO,EAAE;IAC/B,MAAM,IAAI,CAACL,MAAM,CAACU,gBAAgB,CAACL,OAAO,CAAC;EAC7C;EAKA,MAAMM,cAAc,CAAEC,QAAQ,EAAEC,kBAAkB,EAAE;IAClD,OAAO,MAAM,KAAK,CAACF,cAAc,CAACC,QAAQ,EAAEC,kBAAkB,CAAC;EAKjE;EAKA,MAAMC,cAAc,GAAI;IACtB,MAAM,IAAI,CAACd,MAAM,CAACe,aAAa,EAAE;EACnC;EAMA,MAAMC,YAAY,CAAEC,iBAAiB,EAAEX,IAAI,EAAE;IAG3C,IAAI,CAACW,iBAAiB,EAAE;MACtB,MAAM,IAAI,CAACC,aAAa,CAACZ,IAAI,CAAC;IAChC;IACA,MAAM,IAAI,CAACa,IAAI,EAAE;EACnB;EAMA,MAAMC,oBAAoB,CAAEC,QAAQ,EAAE;IACpC,MAAM,IAAI,CAACrB,MAAM,CAACsB,eAAe,CAACD,QAAQ,EAAE,UAAU,CAAC;EACzD;EAMA,MAAME,qBAAqB,CAAEF,QAAQ,EAAE;IACrC,MAAM,IAAI,CAACrB,MAAM,CAACwB,gBAAgB,CAACH,QAAQ,EAAE,UAAU,CAAC;EAC1D;AAGF;AAAC,eAEc7B,kBAAkB;AAAA"}