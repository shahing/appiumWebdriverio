{"version":3,"file":"certificate.js","names":["tset","Certificate","constructor","pemFilename","opensslBinary","fingerprint","data","subject","openssl","args","fs","which","e","Error","log","debug","result","stdout","exec","stderr","add","dir","getDerData","toString","getSubject","sha1","getFingerPrint","trustStore","TrustStore","addRecord","has","hasRecords","previousFingerprint","getFingerPrintFromRecord","currentFingerprint","remove","removeRecord","output","Buffer","from","_","trim","shasum","crypto","createHash","update","digest","match","sharedResourceDir","getDB","db","keychainsPath","path","resolve","exists","mkdirp","execSQLiteQuery","subj","getRecordCount","parseInt","split"],"sources":["../../lib/certificate.js"],"sourcesContent":["import crypto from 'crypto';\nimport { exec } from 'teen_process';\nimport path from 'path';\nimport { fs, mkdirp } from '@appium/support';\nimport { execSQLiteQuery } from './utils';\nimport log from './logger';\nimport _ from 'lodash';\n\nconst tset = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n\n    <!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n    <plist version=\"1.0\">\n    <array/>\n</plist>`;\n\n/**\n * Library for programatically adding certificates\n */\nclass Certificate {\n\n  constructor (pemFilename) {\n    this.pemFilename = pemFilename;\n    this.opensslBinary = null;\n    this.fingerprint = null;\n    this.data = null;\n    this.subject = null;\n  }\n\n  async openssl (...args) {\n    if (!this.opensslBinary) {\n      try {\n        this.opensslBinary = await fs.which('openssl');\n      } catch (e) {\n        throw new Error('openssl executable cannot be found in PATH. Make sure it is installed');\n      }\n    }\n\n    log.debug(`Executing ${this.opensslBinary} with arguments: ${args}`);\n    let result;\n    try {\n      const {stdout} = await exec(this.opensslBinary, args);\n      result = stdout;\n    } catch (e) {\n      if (e.stderr) {\n        throw new Error(e.stderr);\n      }\n      throw e;\n    }\n    return result;\n  }\n\n  /**\n   * Add a certificate to the TrustStore\n   */\n  async add (dir) {\n    let data = (await this.getDerData(this.pemFilename)).toString('hex');\n    let subject = (await this.getSubject(this.pemFilename));\n    let sha1 = (await this.getFingerPrint(this.data)).toString('hex');\n\n    let trustStore = new TrustStore(dir);\n    return await trustStore.addRecord(sha1, tset, subject, data);\n  }\n\n  /**\n   * Checks if keychain at given directory has this certificate\n   */\n  async has (dir) {\n    let subject = await this.getSubject(this.pemFilename);\n    let trustStore = new TrustStore(dir);\n\n    // Return false if record with this subject is not found\n    if (!await trustStore.hasRecords(subject)) {\n      return false;\n    }\n\n    // If record is found, check fingerprints to verify that they didn't change\n    let previousFingerprint = await trustStore.getFingerPrintFromRecord(subject);\n    let currentFingerprint = await this.getFingerPrint();\n    return previousFingerprint.toString() === currentFingerprint.toString();\n  }\n\n  /**\n   * Remove certificate from the TrustStore\n   */\n  async remove (dir) {\n    let subject = await this.getSubject(this.pemFilename);\n    let trustStore = new TrustStore(dir);\n    return await trustStore.removeRecord(subject);\n  }\n\n  /**\n   * Translate PEM file to DER buffer\n   */\n  async getDerData () {\n    if (this.data) {\n      return this.data;\n    }\n\n    // Convert 'pem' file to 'der'\n    const output = await this.openssl('x509',\n      '-outform', 'der',\n      '-in', this.pemFilename\n    );\n    this.data = Buffer.from(_.trim(output));\n    return this.data;\n  }\n\n  /**\n   * Get SHA1 fingerprint from der data before\n   */\n  async getFingerPrint () {\n    if (this.fingerprint) {\n      return this.fingerprint;\n    }\n\n    let data = await this.getDerData();\n    let shasum = crypto.createHash('sha1');\n    shasum.update(data);\n    this.fingerprint = shasum.digest();\n    return this.fingerprint;\n  }\n\n  /**\n   * Parse the subject from the der data\n   */\n  async getSubject () {\n    if (this.subject) {\n      return this.subject;\n    }\n\n    const subject = await this.openssl('x509',\n      '-noout', '-subject',\n      '-in', this.pemFilename,\n    );\n    // https://github.com/appium/appium/issues/14666\n    const match = /^\\s*subject=.*\\bCN\\b\\s*=\\s*([^\\n]+)$/m.exec(subject);\n    if (!match) {\n      log.debug(subject);\n      throw new Error(`Cannot parse certificate subject from the openssl output`);\n    }\n    this.subject = match[1];\n    return this.subject;\n  }\n\n}\n\n/**\n * Interface for adding and removing records to TrustStore.sqlite3 databases that Keychains use\n */\nclass TrustStore {\n  constructor (sharedResourceDir) {\n    this.sharedResourceDir = sharedResourceDir;\n  }\n\n  /**\n   * Get TrustStore database associated with this simulator\n   */\n  async getDB () {\n    if (this.db) {\n      return this.db;\n    }\n\n    // If the sim doesn't have a keychains directory, create one\n    let keychainsPath = path.resolve(this.sharedResourceDir, 'Library', 'Keychains');\n    if (!(await fs.exists(keychainsPath))) {\n      await mkdirp(keychainsPath);\n    }\n\n    // Open sqlite database\n    this.db = path.resolve(keychainsPath, 'TrustStore.sqlite3');\n\n    // If it doesn't have a tsettings table, create one\n    await execSQLiteQuery(this.db, `CREATE TABLE IF NOT EXISTS tsettings (sha1 BLOB NOT NULL DEFAULT '', subj BLOB NOT NULL DEFAULT '', tset BLOB, data BLOB, PRIMARY KEY(sha1));`);\n    try {\n      await execSQLiteQuery(this.db, 'CREATE INDEX isubj ON tsettings(subj);');\n    } catch (e) { }\n\n\n    return this.db;\n  }\n\n  /**\n   * Add record to tsettings\n   */\n  async addRecord (sha1, tset, subj, data) {\n    let db = await this.getDB();\n    if (await this.hasRecords(subj)) {\n      return await execSQLiteQuery(db, `UPDATE tsettings SET sha1=x'?', tset='?', data=x'?' WHERE subj='?'`, sha1, tset, data, subj);\n    } else {\n      return await execSQLiteQuery(db, `INSERT INTO tsettings (sha1, subj, tset, data) VALUES (x'?', '?', '?', x'?')`, sha1, subj, tset, data);\n    }\n  }\n\n  /**\n   * Remove record from tsettings that matches the subject\n   * @param {string} subj\n   */\n  async removeRecord (subj) {\n    return await execSQLiteQuery(await this.getDB(), `DELETE FROM tsettings WHERE subj = '?'`, subj);\n  }\n\n  /**\n   * Get a record from tsettings that matches the subj\n   * @param {string} subj\n   */\n  async hasRecords (subj) {\n    return (await this.getRecordCount(subj)) > 0;\n  }\n\n  /**\n   * Get count of how many records have this subject\n   * @param {string} subj\n   */\n  async getRecordCount (subj) {\n    let result = await execSQLiteQuery(await this.getDB(), `SELECT count(*) FROM tsettings WHERE subj = '?'`, subj);\n    return parseInt(result.split('=')[1], 10);\n  }\n\n  /**\n   * Get the SHA1 fingerprint for the record that has this subject\n   * @param {string} subj\n   */\n  async getFingerPrintFromRecord (subj) {\n    let result = await execSQLiteQuery(await this.getDB(), `SELECT sha1 FROM tsettings WHERE subj='?'`, subj);\n    if (result) {\n      return Buffer.from(result.split('=')[1].trim());\n    }\n  }\n}\n\nexport default Certificate;\nexport { Certificate, TrustStore };\n"],"mappings":"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"}