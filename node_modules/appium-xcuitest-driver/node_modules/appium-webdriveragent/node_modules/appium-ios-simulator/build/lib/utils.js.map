{"version":3,"file":"utils.js","names":["DEFAULT_SIM_SHUTDOWN_TIMEOUT","SAFARI_STARTUP_TIMEOUT","MOBILE_SAFARI_BUNDLE_ID","PROCESS_LAUNCH_OK_PATTERN","bundleId","RegExp","replace","APP_ACTIVATION_SCRIPT","pid","BIOMETRICS","touchId","faceId","toBiometricDomainComponent","name","Error","JSON","stringify","_","keys","pkill","appName","forceKill","args","push","exec","err","isUndefined","code","log","error","message","killAllSimulators","timeout","debug","xcodeVersion","getVersion","major","ign","pids","stdout","trim","split","e","isEmpty","warn","join","map","remainingDevices","allSimsAreDown","devices","Simctl","getDevices","flatten","values","every","sim","state","toLowerCase","done","sdk","udid","waitForCondition","waitMs","intervalMs","length","device","endAllSimulatorDaemons","servicePattern","launchCtlCommand","stopCmd","removeCmd","getSimulatorInfo","opts","devicesSetPath","toPairs","pair","reduce","a","b","concat","find","simExists","safeRimRaf","delPath","tryNum","fs","rimraf","indexOf","installSSLCert","pemText","which","errorAndThrow","tempFileName","path","resolve","tempDir","openDir","pathToKeychain","Simulator","getDir","writeFile","stat","certificate","Certificate","add","unlink","uninstallSSLCert","__dirname","remove","hasSSLCert","has","execSQLiteQuery","db","query","queryParams","queryTokens","formattedQuery","param","forEach","i","stderr","getDeveloperRoot","activateApp","launchApp","simctl","timeoutMs","lastError","test","msg"],"sources":["../../lib/utils.js"],"sourcesContent":["import log from './logger';\nimport _ from 'lodash';\nimport { exec } from 'teen_process';\nimport { waitForCondition } from 'asyncbox';\nimport { getVersion } from 'appium-xcode';\nimport Simctl from 'node-simctl';\nimport { fs, tempDir } from '@appium/support';\nimport { Certificate } from './certificate';\nimport path from 'path';\nimport Simulator from './simulator-xcode-6';\n\n\nconst DEFAULT_SIM_SHUTDOWN_TIMEOUT = 30000;\nconst SAFARI_STARTUP_TIMEOUT = 25 * 1000;\nconst MOBILE_SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';\nconst PROCESS_LAUNCH_OK_PATTERN = (bundleId) => new RegExp(`${bundleId.replace('.', '\\\\.')}:\\\\s+\\\\d+`);\nconst APP_ACTIVATION_SCRIPT = (pid) => `\nuse framework \"Foundation\"\nuse framework \"AppKit\"\nuse scripting additions\n\nset theApp to current application's NSRunningApplication's runningApplicationWithProcessIdentifier:${pid}\nif theApp = null then\n\tlog \"Cannot find Simulator window under PID ${pid}. Is it running?\"\n\terror number 1\nend if\nset result to theApp's activateWithOptions:3\nif not result then\n\tlog \"Cannot activate Simulator window under PID ${pid}. Is it running?\"\n\terror number 1\nend if\n`;\n\n\nconst BIOMETRICS = {\n  touchId: 'fingerTouch',\n  faceId: 'pearl',\n};\n\nfunction toBiometricDomainComponent (name) {\n  if (!BIOMETRICS[name]) {\n    throw new Error(`'${name}' is not a valid biometric. Use one of: ${JSON.stringify(_.keys(BIOMETRICS))}`);\n  }\n  return BIOMETRICS[name];\n}\n\n// pgrep/pkill exit codes:\n// 0       One or more processes were matched.\n// 1       No processes were matched.\n// 2       Invalid options were specified on the command line.\n// 3       An internal error occurred.\n\nasync function pkill (appName, forceKill = false) {\n  let args = forceKill ? ['-9'] : [];\n  args.push('-x', appName);\n  try {\n    await exec('pkill', args);\n    return 0;\n  } catch (err) {\n    if (!_.isUndefined(err.code)) {\n      throw new Error(`Cannot forcefully terminate ${appName}. pkill error code: ${err.code}`);\n    }\n    log.error(`Received unexpected error while trying to kill ${appName}: ${err.message}`);\n    throw err;\n  }\n}\n\nasync function killAllSimulators (timeout = DEFAULT_SIM_SHUTDOWN_TIMEOUT) {\n  log.debug('Killing all iOS Simulators');\n  const xcodeVersion = await getVersion(true);\n  const appName = xcodeVersion.major >= 7 ? 'Simulator' : 'iOS Simulator';\n\n  // later versions are slower to close\n  timeout = timeout * (xcodeVersion.major >= 8 ? 2 : 1);\n\n  try {\n    await exec('xcrun', ['simctl', 'shutdown', xcodeVersion.major > 8 ? 'all' : 'booted'], {timeout});\n  } catch (ign) {}\n\n  const pids = [];\n  try {\n    const {stdout} = await exec('pgrep', ['-f', `${appName}.app/Contents/MacOS/`]);\n    if (stdout.trim()) {\n      pids.push(...(stdout.trim().split(/\\s+/)));\n    }\n  } catch (e) {\n    if (e.code === 1) {\n      log.debug(`${appName} is not running. Continuing...`);\n      return;\n    }\n    if (_.isEmpty(pids)) {\n      log.warn(`pgrep error ${e.code} while detecting whether ${appName} is running. Trying to kill anyway.`);\n    }\n  }\n  if (!_.isEmpty(pids)) {\n    log.debug(`Killing processes: ${pids.join(', ')}`);\n    try {\n      await exec('kill', ['-9', ...(pids.map((pid) => `${pid}`))]);\n    } catch (ign) {}\n  }\n\n  log.debug(`Using pkill to kill application: ${appName}`);\n  try {\n    await pkill(appName, true);\n  } catch (ign) {}\n\n  // wait for all the devices to be shutdown before Continuing\n  // but only print out the failed ones when they are actually fully failed\n  let remainingDevices = [];\n  async function allSimsAreDown () {\n    remainingDevices = [];\n    let devices = await new Simctl().getDevices();\n    devices = _.flatten(_.values(devices));\n    return _.every(devices, (sim) => {\n      let state = sim.state.toLowerCase();\n      let done = state === 'shutdown' ||\n                 state === 'unavailable' ||\n                 state === 'disconnected';\n      if (!done) {\n        remainingDevices.push(`${sim.name} (${sim.sdk}, udid: ${sim.udid}) is still in state '${state}'`);\n      }\n      return done;\n    });\n  }\n  try {\n    await waitForCondition(allSimsAreDown, {\n      waitMs: timeout,\n      intervalMs: 200\n    });\n  } catch (err) {\n    if (remainingDevices.length > 0) {\n      log.warn(`The following devices are still not in the correct state after ${timeout} ms:`);\n      for (let device of remainingDevices) {\n        log.warn(`    ${device}`);\n      }\n    }\n    throw err;\n  }\n}\n\nasync function endAllSimulatorDaemons () {\n  log.debug('Ending all simulator daemons');\n  for (let servicePattern of ['com.apple.iphonesimulator', 'com.apple.CoreSimulator']) {\n    log.debug(`Killing any other ${servicePattern} daemons`);\n    let launchCtlCommand = `launchctl list | grep ${servicePattern} | cut -f 3 | xargs -n 1 launchctl`;\n    try {\n      let stopCmd = `${launchCtlCommand} stop`;\n      await exec('bash', ['-c', stopCmd]);\n    } catch (err) {\n      log.warn(`Could not stop ${servicePattern} daemons, carrying on anyway!`);\n    }\n    try {\n      let removeCmd = `${launchCtlCommand} remove`;\n      await exec('bash', ['-c', removeCmd]);\n    } catch (err) {\n      log.warn(`Could not remove ${servicePattern} daemons, carrying on anyway!`);\n    }\n  }\n  // waiting until the simulator service has died.\n  try {\n    await waitForCondition(async () => {\n      let {stdout} = await exec('bash', ['-c',\n        `ps -e  | grep launchd_sim | grep -v bash | grep -v grep | awk {'print$1'}`]);\n      return stdout.trim().length === 0;\n    }, {waitMs: 5000, intervalMs: 500});\n  } catch (err) {\n    log.warn(`Could not end all simulator daemons, carrying on!`);\n  }\n  log.debug('Finishing ending all simulator daemons');\n}\n\nasync function getSimulatorInfo (udid, opts = {}) {\n  const {\n    devicesSetPath\n  } = opts;\n  // see the README for github.com/appium/node-simctl for example output of getDevices()\n  let devices = await new Simctl({\n    devicesSetPath\n  }).getDevices();\n\n  devices = _.toPairs(devices)\n    .map((pair) => pair[1])\n    .reduce((a, b) => a.concat(b), []);\n  return _.find(devices, (sim) => sim.udid === udid);\n}\n\nasync function simExists (udid) {\n  return !!(await getSimulatorInfo(udid));\n}\n\nasync function safeRimRaf (delPath, tryNum = 0) {\n  try {\n    await fs.rimraf(delPath);\n  } catch (err) {\n    if (tryNum < 20) {\n      if (err.message.indexOf('ENOTEMPTY') !== -1) {\n        log.debug(`Path '${delPath}' was not empty during delete; retrying`);\n        return await safeRimRaf(delPath, tryNum + 1);\n      } else if (err.message.indexOf('ENOENT') !== -1) {\n        log.debug(`Path '${delPath}' did not exist when we tried to delete, ignoring`);\n        return await safeRimRaf(delPath, tryNum + 1);\n      }\n    }\n  }\n}\n\n/**\n * Install an SSL certificate to a device with given udid\n * @param {string} pemText SSL pem text\n * @param {string} udid Identifier of the Simulator\n */\nasync function installSSLCert (pemText, udid) {\n  // Check that openssl is installed on the path\n  try {\n    await fs.which('openssl');\n  } catch (e) {\n    log.debug(`customSSLCert requires openssl to be available on path`);\n    log.errorAndThrow(`Command 'openssl' not found`);\n  }\n\n  // Check that sqlite3 is installed on the path\n  try {\n    await fs.which('sqlite3');\n  } catch (e) {\n    log.debug(`customSSLCert requires sqlite3 to be available on path`);\n    log.errorAndThrow(`Command 'sqlite3' not found`);\n  }\n\n  // Create a temporary file to store PEM text\n  // (a temp file is necessary to run `openssl` shell commands, can't be done in memory)\n  let tempFileName = path.resolve(await tempDir.openDir(), 'temp-ssl-cert.pem');\n  let pathToKeychain = new Simulator(udid).getDir();\n  await fs.writeFile(tempFileName, pemText);\n  try {\n    await fs.stat(pathToKeychain);\n  } catch (e) {\n    log.debug(`Could not install SSL certificate. No simulator with udid '${udid}'`);\n    log.errorAndThrow(e);\n  }\n\n  // Do the certificate installation\n  let certificate = new Certificate(tempFileName);\n  log.debug(`Installing certificate to ${pathToKeychain}`);\n  await certificate.add(pathToKeychain);\n\n  // Remove the temporary file\n  await fs.unlink(tempFileName);\n\n  return certificate;\n}\n\nasync function uninstallSSLCert (pemText, udid) {\n  try {\n    let tempFileName = path.resolve(__dirname, 'temp-ssl-cert.pem');\n    let pathToKeychain = path.resolve(new Simulator(udid).getDir());\n    await fs.writeFile(tempFileName, pemText);\n    let certificate = new Certificate(tempFileName);\n    await certificate.remove(pathToKeychain);\n    await fs.unlink(tempFileName);\n    return certificate;\n  } catch (e) {\n    log.debug(`Could not uninstall SSL certificate. No simulator with udid '${udid}'`);\n    log.errorAndThrow(e);\n  }\n}\n\n/**\n * Check if the Simulator already has this SSL certificate\n * @param {string} pemText PEM text of SSL cert\n * @param {string} udid Identifier of the Simulator\n */\nasync function hasSSLCert (pemText, udid) {\n  const tempFileName = path.resolve(await tempDir.openDir(), 'temp-ssl-cert.pem');\n  const pathToKeychain = new Simulator(udid).getDir();\n  await fs.writeFile(tempFileName, pemText);\n  const certificate = new Certificate(tempFileName);\n  return certificate.has(pathToKeychain);\n}\n\n/**\n * Runs a command line sqlite3 query\n *\n * @param {string} db - Full path to sqlite database\n * @param {string} query - The actual query string\n * @param {...string} queryParams - The list of query parameters\n * @returns {string} sqlite command stdout\n */\nasync function execSQLiteQuery (db, query, ...queryParams) {\n  query = query.replace(/\\n+/g, ' ');\n  let queryTokens = query.split('?');\n  let formattedQuery = [];\n  queryParams\n    .map((param) => `${param}`)\n    .forEach((param, i) => {\n      formattedQuery.push(queryTokens[i]);\n      formattedQuery.push(param.replace(/'/g, \"''\"));\n    });\n  formattedQuery.push(queryTokens[queryTokens.length - 1]);\n\n  log.debug(`Executing SQL query \"${formattedQuery.join('')}\" on '${db}'`);\n  try {\n    return (await exec('sqlite3', ['-line', db, formattedQuery.join('')])).stdout;\n  } catch (err) {\n    throw new Error(`Cannot execute SQLite query \"${formattedQuery.join('')}\" to '${db}'. ` +\n      `Original error: ${err.stderr}`);\n  }\n}\n\nasync function getDeveloperRoot () {\n  const {stdout} = await exec('xcode-select', ['-p']);\n  return stdout.trim();\n}\n\n/**\n * Activates the app having the given process identifier.\n * See https://developer.apple.com/documentation/appkit/nsrunningapplication/1528725-activatewithoptions?language=objc\n * for more details.\n *\n * @param {number|string} pid App process identifier\n * @throws {Error} If the given PID is not running or there was a failure\n * while activating the app\n */\nasync function activateApp (pid) {\n  try {\n    await exec('osascript', ['-e', APP_ACTIVATION_SCRIPT(pid)]);\n  } catch (e) {\n    throw new Error(`Simulator window cannot be activated. Original error: ${e.stderr || e.message}`);\n  }\n}\n\n/**\n * Executes an app and verifies if it was launched properly\n *\n * @param {Simctl} simctl Simctl instance\n * @param {string} bundleId bundle identifier of the destination app\n * @param {number} timeoutMs [25000] The maximum time to wait until\n * the app is running\n * @throws {Error} If the app is still not running after the given timeout\n */\nasync function launchApp (simctl, bundleId, timeoutMs = 25000) {\n  let lastError;\n  try {\n    await waitForCondition(async () => {\n      try {\n        const stdout = await simctl.launchApp(MOBILE_SAFARI_BUNDLE_ID, 1);\n        return PROCESS_LAUNCH_OK_PATTERN(MOBILE_SAFARI_BUNDLE_ID).test(stdout);\n      } catch (err) {\n        lastError = err.stderr || err.message;\n      }\n      return false;\n    }, {waitMs: timeoutMs, intervalMs: 500});\n  } catch (e) {\n    let msg = `'${bundleId}' did not run after ${timeoutMs}ms timeout.`;\n    if (lastError) {\n      msg += ` Original error: ${lastError}`;\n    }\n    throw new Error(msg);\n  }\n}\n\nexport {\n  killAllSimulators,\n  endAllSimulatorDaemons,\n  safeRimRaf,\n  simExists,\n  getSimulatorInfo,\n  installSSLCert,\n  uninstallSSLCert,\n  hasSSLCert,\n  execSQLiteQuery,\n  toBiometricDomainComponent,\n  getDeveloperRoot,\n  activateApp,\n  SAFARI_STARTUP_TIMEOUT,\n  MOBILE_SAFARI_BUNDLE_ID,\n  launchApp,\n};\n"],"mappings":"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"}