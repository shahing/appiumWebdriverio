"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setLocationWithAppleScript = setLocationWithAppleScript;
exports.setLocationWithIdb = setLocationWithIdb;
exports.setLocationWithLyft = setLocationWithLyft;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _logger = _interopRequireDefault(require("./logger"));
var _teen_process = require("teen_process");
var _support = require("@appium/support");
const LYFT_SET_LOCATION = 'set-simulator-location';
const DECIMAL_SEPARATOR_SCRIPT = `
use framework "Foundation"
use framework "AppKit"
use scripting additions

set theFormatter to current application's NSNumberFormatter's new()
set result to theFormatter's decimalSeparator()
log result as string
`;
async function setLocationWithLyft(udid, latitude, longitude) {
  try {
    await _support.fs.which(LYFT_SET_LOCATION);
  } catch (e) {
    throw new Error(`'${LYFT_SET_LOCATION}' binary has not been found in your PATH. ` + 'Please install it as "brew install lyft/formulae/set-simulator-location" by brew or ' + 'read https://github.com/lyft/set-simulator-location to set the binary by manual to ' + 'be able to set geolocation by the library.');
  }
  try {
    await (0, _teen_process.exec)(LYFT_SET_LOCATION, ['-c', latitude, longitude, '-u', udid]);
  } catch (e) {
    throw new Error(`Failed to set geolocation with '${LYFT_SET_LOCATION}'. ` + `Original error: ${e.stderr || e.message}`);
  }
}
async function setLocationWithIdb(idb, latitude, longitude) {
  if (!idb) {
    throw new Error('Failed to set geolocation with idb because it is not installed or the "launchWithIDB" capability was not set');
  }
  try {
    await idb.setLocation(latitude, longitude);
  } catch (e) {
    throw new Error(`Failed to set geolocation with idb. Original error: ${e.stderr || e.message}`);
  }
}
async function setLocationWithAppleScript(sim, latitude, longitude, menu = 'Debug') {
  const {
    stdout,
    stderr
  } = await (0, _teen_process.exec)('osascript', ['-e', DECIMAL_SEPARATOR_SCRIPT]);
  const decimalSeparator = _lodash.default.trim(stdout || stderr);
  const [latitudeStr, longitudeStr] = [latitude, longitude].map(coord => `${coord}`.replace(/[.,]/, decimalSeparator));
  const output = await sim.executeUIClientScript(`
    tell application "System Events"
      tell process "Simulator"
        set featureName to "Custom Location"
        set dstMenuItem to menu item (featureName & "â€¦") of menu 1 of menu item "Location" of menu 1 of menu bar item "${menu}" of menu bar 1
        click dstMenuItem
        delay 1
        set value of text field 1 of window featureName to "${latitudeStr}"
        delay 0.5
        set value of text field 2 of window featureName to "${longitudeStr}"
        delay 0.5
        click button "OK" of window featureName
        delay 0.5
        set isInvisible to (not (exists (window featureName)))
      end tell
    end tell
  `);
  _logger.default.debug(`Geolocation parameters dialog accepted: ${output}`);
  if (_lodash.default.trim(output) !== 'true') {
    throw new Error(`Failed to set geolocation with AppleScript. Original error: ${output}`);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,