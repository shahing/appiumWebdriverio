{"version":3,"file":"simulator.js","names":["handleUnsupportedXcode","xcodeVersion","major","Error","versionString","getSimulator","udid","opts","platform","checkExistence","devicesSetPath","xcode","getVersion","simulatorInfo","getSimulatorInfo","setLoggingPlatform","log","info","SimClass","SimulatorXcode6","minor","SimulatorXcode7","SimulatorXcode73","SimulatorXcode8","SimulatorXcode9","SimulatorXcode93","SimulatorXcode10","SimulatorXcode11","SimulatorXcode11_4","SimulatorXcode14","result","getDeviceString"],"sources":["../../lib/simulator.js"],"sourcesContent":["import SimulatorXcode6 from './simulator-xcode-6';\nimport SimulatorXcode7 from './simulator-xcode-7';\nimport SimulatorXcode73 from './simulator-xcode-7.3';\nimport SimulatorXcode8 from './simulator-xcode-8';\nimport SimulatorXcode9 from './simulator-xcode-9';\nimport SimulatorXcode93 from './simulator-xcode-9.3';\nimport SimulatorXcode10 from './simulator-xcode-10';\nimport SimulatorXcode11 from './simulator-xcode-11';\nimport SimulatorXcode11_4 from './simulator-xcode-11.4';\nimport SimulatorXcode14 from './simulator-xcode-14';\nimport { getSimulatorInfo } from './utils';\nimport xcode from 'appium-xcode';\nimport { log, setLoggingPlatform } from './logger';\n\n\nfunction handleUnsupportedXcode (xcodeVersion) {\n  if (xcodeVersion.major < 6) {\n    throw new Error(`Tried to use an iOS simulator with xcode ` +\n                    `version ${xcodeVersion.versionString} but only Xcode version ` +\n                    `6.0.0 and up are supported`);\n  }\n}\n\n/**\n * @typedef {Object} SimulatorLookupOptions\n * @property {?string} platform [iOS] - The name of the simulator platform\n * @property {?boolean} checkExistence [true] - Set it to `false` in order to\n * skip simulator existence verification\n * @property {?string} devicesSetPath - The full path to the devices set where\n * the current simulator is located. `null` value means that the default path is\n * used, which is usually `~/Library/Developer/CoreSimulator/Devices`\n */\n\n/**\n * Finds and returns the corresponding Simulator instance for the given ID.\n *\n * @param {string} udid - The ID of an existing Simulator.\n * @param {?SimulatorLookupOptions} opts\n * @throws {Error} If the Simulator with given udid does not exist in devices list.\n *   If you want to create a new simulator, you can use the `createDevice()` method of\n *   [node-simctl](github.com/appium/node-simctl).\n * @return {object} Simulator object associated with the udid passed in.\n */\nasync function getSimulator (udid, opts = {}) {\n  let {\n    platform = 'iOS',\n    checkExistence = true,\n    devicesSetPath,\n  } = opts;\n\n  const xcodeVersion = await xcode.getVersion(true);\n  if (checkExistence) {\n    const simulatorInfo = await getSimulatorInfo(udid, {\n      devicesSetPath\n    });\n\n    if (!simulatorInfo) {\n      throw new Error(`No sim found with udid '${udid}'`);\n    }\n\n    platform = simulatorInfo.platform;\n  }\n\n  // make sure we have the right logging prefix\n  setLoggingPlatform(platform);\n\n  log.info(`Constructing ${platform} simulator for Xcode version ${xcodeVersion.versionString} ` +\n           `with udid '${udid}'`);\n  let SimClass;\n  switch (xcodeVersion.major) {\n    // Early, unsupported Xcodes\n    case 1:\n    case 2:\n    case 3:\n    case 4:\n    case 5:\n      handleUnsupportedXcode(xcodeVersion);\n      break;\n    case 6:\n      SimClass = SimulatorXcode6;\n      break;\n    case 7:\n      SimClass = xcodeVersion.minor < 3 ? SimulatorXcode7 : SimulatorXcode73;\n      break;\n    case 8:\n      SimClass = SimulatorXcode8;\n      break;\n    case 9:\n      SimClass = xcodeVersion.minor < 3 ? SimulatorXcode9 : SimulatorXcode93;\n      break;\n    case 10:\n      SimClass = SimulatorXcode10;\n      break;\n    case 11:\n      SimClass = xcodeVersion.minor < 4 ? SimulatorXcode11 : SimulatorXcode11_4;\n      break;\n    case 12:\n    case 13:\n      SimClass = SimulatorXcode11_4;\n      break;\n    case 14:\n    default:\n      SimClass = SimulatorXcode14;\n      break;\n  }\n\n  const result = new SimClass(udid, xcodeVersion);\n  if (devicesSetPath) {\n    result.devicesSetPath = devicesSetPath;\n  }\n  return result;\n}\n\n/**\n * Takes a set of options and finds the correct device string in order for Instruments to\n * identify the correct simulator.\n *\n * @param {object} opts - The options available are:\n *   - `deviceName` - a name for the device. If the given device name starts with `=`, the name, less the equals sign, is returned.\n *   - `platformVersion` - the version of iOS to use. Defaults to the current Xcode's maximum SDK version.\n *   - `forceIphone` - force the configuration of the device string to iPhone. Defaults to `false`.\n *   - `forceIpad` - force the configuration of the device string to iPad. Defaults to `false`.\n *   If both `forceIphone` and `forceIpad` are true, the device will be forced to iPhone.\n *\n * @return {string} The found device string, for example:\n *   'iPhone 5 (8.4)' with Xcode 7+\n *   'iPhone 5 (8.4 Simulator)' with Xcode 6+\n */\nasync function getDeviceString (opts) {\n  let xcodeVersion = await xcode.getVersion(true);\n\n  handleUnsupportedXcode(xcodeVersion);\n\n  log.info(`Retrieving device name string for Xcode version ${xcodeVersion.versionString}`);\n  if (xcodeVersion.major >= 8) {\n    return await SimulatorXcode7.getDeviceString(opts);\n  } else if (xcodeVersion.major === 7) {\n    return await SimulatorXcode7.getDeviceString(opts);\n  } else if (xcodeVersion.major === 6) {\n    return await SimulatorXcode6.getDeviceString(opts);\n  }\n}\n\nexport { getSimulator, getDeviceString };\n"],"mappings":"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"}