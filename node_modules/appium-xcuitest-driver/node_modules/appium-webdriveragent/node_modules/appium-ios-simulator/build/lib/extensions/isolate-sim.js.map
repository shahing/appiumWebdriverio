{"version":3,"file":"isolate-sim.js","names":["extensions","getAllUdids","simctl","devices","getDevices","_","chain","values","flatten","map","value","isolateSim","log","debug","Simctl","udids","udid","without","deleteDevice"],"sources":["../../../lib/extensions/isolate-sim.js"],"sourcesContent":["import Simctl from 'node-simctl';\nimport log from '../logger';\nimport _ from 'lodash';\n\n\nlet extensions = {};\n\nasync function getAllUdids (simctl) {\n  let devices = await simctl.getDevices();\n\n  return _.chain(devices)\n    .values()\n    .flatten()\n    .map('udid')\n    .value();\n}\n\nextensions.isolateSim = async function isolateSim () {\n  log.debug('Isolating the requested simulator by deleting all others');\n  const simctl = new Simctl();\n  const udids = await getAllUdids(simctl);\n\n  for (const udid of _.without(udids, this.udid)) {\n    simctl.udid = udid;\n    await simctl.deleteDevice();\n  }\n};\n\n\nexport { extensions, getAllUdids };\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AAGA,IAAIA,UAAU,GAAG,CAAC,CAAC;AAAC;AAEpB,eAAeC,WAAW,CAAEC,MAAM,EAAE;EAClC,IAAIC,OAAO,GAAG,MAAMD,MAAM,CAACE,UAAU,EAAE;EAEvC,OAAOC,eAAC,CAACC,KAAK,CAACH,OAAO,CAAC,CACpBI,MAAM,EAAE,CACRC,OAAO,EAAE,CACTC,GAAG,CAAC,MAAM,CAAC,CACXC,KAAK,EAAE;AACZ;AAEAV,UAAU,CAACW,UAAU,GAAG,eAAeA,UAAU,GAAI;EACnDC,eAAG,CAACC,KAAK,CAAC,0DAA0D,CAAC;EACrE,MAAMX,MAAM,GAAG,IAAIY,mBAAM,EAAE;EAC3B,MAAMC,KAAK,GAAG,MAAMd,WAAW,CAACC,MAAM,CAAC;EAEvC,KAAK,MAAMc,IAAI,IAAIX,eAAC,CAACY,OAAO,CAACF,KAAK,EAAE,IAAI,CAACC,IAAI,CAAC,EAAE;IAC9Cd,MAAM,CAACc,IAAI,GAAGA,IAAI;IAClB,MAAMd,MAAM,CAACgB,YAAY,EAAE;EAC7B;AACF,CAAC"}