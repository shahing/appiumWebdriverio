"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _support = require("@appium/support");
var _logger = _interopRequireDefault(require("../logger"));
var _path = _interopRequireDefault(require("path"));
let extensions = {};
extensions.prepareSafari = async function prepareSafari(tmpDir, platformVersion) {
  await this.prepareBuiltInApp('MobileSafari', tmpDir, platformVersion);
};
extensions.prepareBuiltInApp = async function prepareBuiltInApp(appName, tmpDir, platformVersion) {
  _logger.default.debug(`Looking for built in app '${appName}'`);
  let newAppPath = _path.default.resolve(tmpDir, `Appium-${appName}-${platformVersion}.app`);
  let stat, appPath;
  try {
    [stat, appPath] = await this.getBuiltInApp(appName);
  } catch (err) {
    try {
      stat = await _support.fs.stat(newAppPath);
      if (stat.isDirectory()) {
        _logger.default.debug('Could not find original app, but found the temp ' + 'Appium one so using that: ${}');
        return [newAppPath, appPath];
      }
    } catch (err) {
      _logger.default.warn(`App is also not at '${newAppPath}'`);
      throw new Error(`Could not find built in app '${appName}' in its home ` + `or temp dir!`);
    }
  }
  if (!stat.isDirectory()) {
    throw new Error(`App found but it is not a directory: '${appPath}'`);
  }
  _logger.default.debug(`Found app, trying to move '${appPath}' to tmp dir '${tmpDir}'`);
  await this.moveBuiltInApp(appName, appPath, newAppPath);
};
extensions.getBuiltInApp = async function getBuiltInApp(appName) {
  let appDir = await this.getAppDir(appName);
  let appPath = _path.default.resolve(appDir, `${appName}.app`);
  _logger.default.debug(`Found path for '${appName}': ${appPath}`);
  try {
    let stat = await _support.fs.stat(appPath);
    return [stat, appPath];
  } catch (err) {
    if (err && err.message.indexOf('ENOENT') !== -1) {
      _logger.default.errorAndThrow(`App '${appName}' is not at '${appPath}'`);
    }
  }
};
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleHRlbnNpb25zIiwicHJlcGFyZVNhZmFyaSIsInRtcERpciIsInBsYXRmb3JtVmVyc2lvbiIsInByZXBhcmVCdWlsdEluQXBwIiwiYXBwTmFtZSIsImxvZyIsImRlYnVnIiwibmV3QXBwUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwic3RhdCIsImFwcFBhdGgiLCJnZXRCdWlsdEluQXBwIiwiZXJyIiwiZnMiLCJpc0RpcmVjdG9yeSIsIndhcm4iLCJFcnJvciIsIm1vdmVCdWlsdEluQXBwIiwiYXBwRGlyIiwiZ2V0QXBwRGlyIiwibWVzc2FnZSIsImluZGV4T2YiLCJlcnJvckFuZFRocm93Il0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2V4dGVuc2lvbnMvcHJlcGFyZS1hcHBzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZzIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCBsb2cgZnJvbSAnLi4vbG9nZ2VyJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuXG5cbmxldCBleHRlbnNpb25zID0ge307XG5cbmV4dGVuc2lvbnMucHJlcGFyZVNhZmFyaSA9IGFzeW5jIGZ1bmN0aW9uIHByZXBhcmVTYWZhcmkgKHRtcERpciwgcGxhdGZvcm1WZXJzaW9uKSB7XG4gIGF3YWl0IHRoaXMucHJlcGFyZUJ1aWx0SW5BcHAoJ01vYmlsZVNhZmFyaScsIHRtcERpciwgcGxhdGZvcm1WZXJzaW9uKTtcbn07XG5cbmV4dGVuc2lvbnMucHJlcGFyZUJ1aWx0SW5BcHAgPSBhc3luYyBmdW5jdGlvbiBwcmVwYXJlQnVpbHRJbkFwcCAoYXBwTmFtZSwgdG1wRGlyLCBwbGF0Zm9ybVZlcnNpb24pIHtcbiAgbG9nLmRlYnVnKGBMb29raW5nIGZvciBidWlsdCBpbiBhcHAgJyR7YXBwTmFtZX0nYCk7XG4gIGxldCBuZXdBcHBQYXRoID0gcGF0aC5yZXNvbHZlKHRtcERpciwgYEFwcGl1bS0ke2FwcE5hbWV9LSR7cGxhdGZvcm1WZXJzaW9ufS5hcHBgKTtcblxuICBsZXQgc3RhdCwgYXBwUGF0aDtcbiAgdHJ5IHtcbiAgICBbc3RhdCwgYXBwUGF0aF0gPSBhd2FpdCB0aGlzLmdldEJ1aWx0SW5BcHAoYXBwTmFtZSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIHRyeSB7XG4gICAgICBzdGF0ID0gYXdhaXQgZnMuc3RhdChuZXdBcHBQYXRoKTtcbiAgICAgIGlmIChzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICAgICAgbG9nLmRlYnVnKCdDb3VsZCBub3QgZmluZCBvcmlnaW5hbCBhcHAsIGJ1dCBmb3VuZCB0aGUgdGVtcCAnICtcbiAgICAgICAgICAgICAgICAgICAgICdBcHBpdW0gb25lIHNvIHVzaW5nIHRoYXQ6ICR7fScpO1xuICAgICAgICByZXR1cm4gW25ld0FwcFBhdGgsIGFwcFBhdGhdO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbG9nLndhcm4oYEFwcCBpcyBhbHNvIG5vdCBhdCAnJHtuZXdBcHBQYXRofSdgKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQ291bGQgbm90IGZpbmQgYnVpbHQgaW4gYXBwICcke2FwcE5hbWV9JyBpbiBpdHMgaG9tZSBgICtcbiAgICAgICAgICAgICAgICAgICAgICBgb3IgdGVtcCBkaXIhYCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFzdGF0LmlzRGlyZWN0b3J5KCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEFwcCBmb3VuZCBidXQgaXQgaXMgbm90IGEgZGlyZWN0b3J5OiAnJHthcHBQYXRofSdgKTtcbiAgfVxuXG4gIGxvZy5kZWJ1ZyhgRm91bmQgYXBwLCB0cnlpbmcgdG8gbW92ZSAnJHthcHBQYXRofScgdG8gdG1wIGRpciAnJHt0bXBEaXJ9J2ApO1xuICBhd2FpdCB0aGlzLm1vdmVCdWlsdEluQXBwKGFwcE5hbWUsIGFwcFBhdGgsIG5ld0FwcFBhdGgpO1xufTtcblxuZXh0ZW5zaW9ucy5nZXRCdWlsdEluQXBwID0gYXN5bmMgZnVuY3Rpb24gZ2V0QnVpbHRJbkFwcCAoYXBwTmFtZSkge1xuICBsZXQgYXBwRGlyID0gYXdhaXQgdGhpcy5nZXRBcHBEaXIoYXBwTmFtZSk7XG4gIGxldCBhcHBQYXRoID0gcGF0aC5yZXNvbHZlKGFwcERpciwgYCR7YXBwTmFtZX0uYXBwYCk7XG4gIGxvZy5kZWJ1ZyhgRm91bmQgcGF0aCBmb3IgJyR7YXBwTmFtZX0nOiAke2FwcFBhdGh9YCk7XG4gIHRyeSB7XG4gICAgbGV0IHN0YXQgPSBhd2FpdCBmcy5zdGF0KGFwcFBhdGgpO1xuICAgIHJldHVybiBbc3RhdCwgYXBwUGF0aF07XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChlcnIgJiYgZXJyLm1lc3NhZ2UuaW5kZXhPZignRU5PRU5UJykgIT09IC0xKSB7XG4gICAgICBsb2cuZXJyb3JBbmRUaHJvdyhgQXBwICcke2FwcE5hbWV9JyBpcyBub3QgYXQgJyR7YXBwUGF0aH0nYCk7XG4gICAgfVxuICB9XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBR0EsSUFBSUEsVUFBVSxHQUFHLENBQUMsQ0FBQztBQUVuQkEsVUFBVSxDQUFDQyxhQUFhLEdBQUcsZUFBZUEsYUFBYSxDQUFFQyxNQUFNLEVBQUVDLGVBQWUsRUFBRTtFQUNoRixNQUFNLElBQUksQ0FBQ0MsaUJBQWlCLENBQUMsY0FBYyxFQUFFRixNQUFNLEVBQUVDLGVBQWUsQ0FBQztBQUN2RSxDQUFDO0FBRURILFVBQVUsQ0FBQ0ksaUJBQWlCLEdBQUcsZUFBZUEsaUJBQWlCLENBQUVDLE9BQU8sRUFBRUgsTUFBTSxFQUFFQyxlQUFlLEVBQUU7RUFDakdHLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLDZCQUE0QkYsT0FBUSxHQUFFLENBQUM7RUFDbEQsSUFBSUcsVUFBVSxHQUFHQyxhQUFJLENBQUNDLE9BQU8sQ0FBQ1IsTUFBTSxFQUFHLFVBQVNHLE9BQVEsSUFBR0YsZUFBZ0IsTUFBSyxDQUFDO0VBRWpGLElBQUlRLElBQUksRUFBRUMsT0FBTztFQUNqQixJQUFJO0lBQ0YsQ0FBQ0QsSUFBSSxFQUFFQyxPQUFPLENBQUMsR0FBRyxNQUFNLElBQUksQ0FBQ0MsYUFBYSxDQUFDUixPQUFPLENBQUM7RUFDckQsQ0FBQyxDQUFDLE9BQU9TLEdBQUcsRUFBRTtJQUNaLElBQUk7TUFDRkgsSUFBSSxHQUFHLE1BQU1JLFdBQUUsQ0FBQ0osSUFBSSxDQUFDSCxVQUFVLENBQUM7TUFDaEMsSUFBSUcsSUFBSSxDQUFDSyxXQUFXLEVBQUUsRUFBRTtRQUN0QlYsZUFBRyxDQUFDQyxLQUFLLENBQUMsa0RBQWtELEdBQy9DLCtCQUErQixDQUFDO1FBQzdDLE9BQU8sQ0FBQ0MsVUFBVSxFQUFFSSxPQUFPLENBQUM7TUFDOUI7SUFDRixDQUFDLENBQUMsT0FBT0UsR0FBRyxFQUFFO01BQ1pSLGVBQUcsQ0FBQ1csSUFBSSxDQUFFLHVCQUFzQlQsVUFBVyxHQUFFLENBQUM7TUFDOUMsTUFBTSxJQUFJVSxLQUFLLENBQUUsZ0NBQStCYixPQUFRLGdCQUFlLEdBQ3RELGNBQWEsQ0FBQztJQUNqQztFQUNGO0VBRUEsSUFBSSxDQUFDTSxJQUFJLENBQUNLLFdBQVcsRUFBRSxFQUFFO0lBQ3ZCLE1BQU0sSUFBSUUsS0FBSyxDQUFFLHlDQUF3Q04sT0FBUSxHQUFFLENBQUM7RUFDdEU7RUFFQU4sZUFBRyxDQUFDQyxLQUFLLENBQUUsOEJBQTZCSyxPQUFRLGlCQUFnQlYsTUFBTyxHQUFFLENBQUM7RUFDMUUsTUFBTSxJQUFJLENBQUNpQixjQUFjLENBQUNkLE9BQU8sRUFBRU8sT0FBTyxFQUFFSixVQUFVLENBQUM7QUFDekQsQ0FBQztBQUVEUixVQUFVLENBQUNhLGFBQWEsR0FBRyxlQUFlQSxhQUFhLENBQUVSLE9BQU8sRUFBRTtFQUNoRSxJQUFJZSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUNDLFNBQVMsQ0FBQ2hCLE9BQU8sQ0FBQztFQUMxQyxJQUFJTyxPQUFPLEdBQUdILGFBQUksQ0FBQ0MsT0FBTyxDQUFDVSxNQUFNLEVBQUcsR0FBRWYsT0FBUSxNQUFLLENBQUM7RUFDcERDLGVBQUcsQ0FBQ0MsS0FBSyxDQUFFLG1CQUFrQkYsT0FBUSxNQUFLTyxPQUFRLEVBQUMsQ0FBQztFQUNwRCxJQUFJO0lBQ0YsSUFBSUQsSUFBSSxHQUFHLE1BQU1JLFdBQUUsQ0FBQ0osSUFBSSxDQUFDQyxPQUFPLENBQUM7SUFDakMsT0FBTyxDQUFDRCxJQUFJLEVBQUVDLE9BQU8sQ0FBQztFQUN4QixDQUFDLENBQUMsT0FBT0UsR0FBRyxFQUFFO0lBQ1osSUFBSUEsR0FBRyxJQUFJQSxHQUFHLENBQUNRLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO01BQy9DakIsZUFBRyxDQUFDa0IsYUFBYSxDQUFFLFFBQU9uQixPQUFRLGdCQUFlTyxPQUFRLEdBQUUsQ0FBQztJQUM5RDtFQUNGO0FBQ0YsQ0FBQztBQUFDLGVBR2FaLFVBQVU7QUFBQSJ9