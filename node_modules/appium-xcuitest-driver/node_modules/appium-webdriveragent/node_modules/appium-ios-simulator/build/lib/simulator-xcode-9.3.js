"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _simulatorXcode = _interopRequireDefault(require("./simulator-xcode-9"));
var _teen_process = require("teen_process");
const WEBINSPECTOR_SOCKET_REGEXP = /\s+(\S+com\.apple\.webinspectord_sim\.socket)/;
class SimulatorXcode93 extends _simulatorXcode.default {
  constructor(udid, xcodeVersion) {
    super(udid, xcodeVersion);
    this.webInspectorSocket = null;
  }
  async getWebInspectorSocket() {
    if (this.webInspectorSocket) {
      return this.webInspectorSocket;
    }
    let {
      stdout
    } = await (0, _teen_process.exec)('lsof', ['-aUc', 'launchd_sim']);
    for (let record of stdout.split('com.apple.CoreSimulator.SimDevice.')) {
      if (!record.includes(this.udid)) {
        continue;
      }
      const match = WEBINSPECTOR_SOCKET_REGEXP.exec(record);
      if (!match) {
        return null;
      }
      this.webInspectorSocket = match[1];
      return this.webInspectorSocket;
    }
    return null;
  }
}
var _default = SimulatorXcode93;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJXRUJJTlNQRUNUT1JfU09DS0VUX1JFR0VYUCIsIlNpbXVsYXRvclhjb2RlOTMiLCJTaW11bGF0b3JYY29kZTkiLCJjb25zdHJ1Y3RvciIsInVkaWQiLCJ4Y29kZVZlcnNpb24iLCJ3ZWJJbnNwZWN0b3JTb2NrZXQiLCJnZXRXZWJJbnNwZWN0b3JTb2NrZXQiLCJzdGRvdXQiLCJleGVjIiwicmVjb3JkIiwic3BsaXQiLCJpbmNsdWRlcyIsIm1hdGNoIl0sInNvdXJjZXMiOlsiLi4vLi4vbGliL3NpbXVsYXRvci14Y29kZS05LjMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNpbXVsYXRvclhjb2RlOSBmcm9tICcuL3NpbXVsYXRvci14Y29kZS05JztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICd0ZWVuX3Byb2Nlc3MnO1xuXG5cbi8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvTUVMNTV0LzFcbmNvbnN0IFdFQklOU1BFQ1RPUl9TT0NLRVRfUkVHRVhQID0gL1xccysoXFxTK2NvbVxcLmFwcGxlXFwud2ViaW5zcGVjdG9yZF9zaW1cXC5zb2NrZXQpLztcblxuY2xhc3MgU2ltdWxhdG9yWGNvZGU5MyBleHRlbmRzIFNpbXVsYXRvclhjb2RlOSB7XG4gIGNvbnN0cnVjdG9yICh1ZGlkLCB4Y29kZVZlcnNpb24pIHtcbiAgICBzdXBlcih1ZGlkLCB4Y29kZVZlcnNpb24pO1xuXG4gICAgdGhpcy53ZWJJbnNwZWN0b3JTb2NrZXQgPSBudWxsO1xuICB9XG5cbiAgLypcbiAgICogQG92ZXJyaWRlXG4gICAqL1xuICBhc3luYyBnZXRXZWJJbnNwZWN0b3JTb2NrZXQgKCkge1xuICAgIGlmICh0aGlzLndlYkluc3BlY3RvclNvY2tldCkge1xuICAgICAgcmV0dXJuIHRoaXMud2ViSW5zcGVjdG9yU29ja2V0O1xuICAgIH1cblxuICAgIC8vIGxzb2YgLWFVYyBsYXVuY2hkX3NpbVxuICAgIC8vIGdpdmVzIGEgc2V0IG9mIHJlY29yZHMgbGlrZTpcbiAgICAvLyAgIGxhdW5jaGRfcyA2OTc2MCBpc2FhYyAgICAzdSAgdW5peCAweDU3YWE0ZmNlZWEzOTM3ZjMgICAgICAwdDAgICAgICAvcHJpdmF0ZS90bXAvY29tLmFwcGxlLkNvcmVTaW11bGF0b3IuU2ltRGV2aWNlLkQ3MDgyQTVDLTM0QjUtNDc1Qy05OTRFLUEyMTUzNDQyM0I5RS9zeXNsb2dzb2NrXG4gICAgLy8gICBsYXVuY2hkX3MgNjk3NjAgaXNhYWMgICAgNXUgIHVuaXggMHg1N2FhNGZjZWVhMzk1ZjAzICAgICAgMHQwICAgICAgL3ByaXZhdGUvdG1wL2NvbS5hcHBsZS5sYXVuY2hkLjJCMnU4Q2tOOFMvTGlzdGVuZXJzXG4gICAgLy8gICBsYXVuY2hkX3MgNjk3NjAgaXNhYWMgICAgNnUgIHVuaXggMHg1N2FhNGZjZWVhMzkzNzJiICAgICAgMHQwICAgICAgLT4weDU3YWE0ZmNlZWEzOTM3ZjNcbiAgICAvLyAgIGxhdW5jaGRfcyA2OTc2MCBpc2FhYyAgICA4dSAgdW5peCAweDU3YWE0ZmNlZWEzOTU5OGIgICAgICAwdDAgICAgICAvcHJpdmF0ZS90bXAvY29tLmFwcGxlLmxhdW5jaGQuMmo1azFUTWg2aS9jb20uYXBwbGUud2ViaW5zcGVjdG9yZF9zaW0uc29ja2V0XG4gICAgLy8gICBsYXVuY2hkX3MgNjk3NjAgaXNhYWMgICAgOXUgIHVuaXggMHg1N2FhNGZjZWVhMzk0YzQzICAgICAgMHQwICAgICAgL3ByaXZhdGUvdG1wL2NvbS5hcHBsZS5sYXVuY2hkLjR6bTlKTzlLRXMvY29tLmFwcGxlLnRlc3RtYW5hZ2VyZC51bml4LWRvbWFpbi5zb2NrZXRcbiAgICAvLyAgIGxhdW5jaGRfcyA2OTc2MCBpc2FhYyAgIDEwdSAgdW5peCAweDU3YWE0ZmNlZWEzOTVmMDMgICAgICAwdDAgICAgICAvcHJpdmF0ZS90bXAvY29tLmFwcGxlLmxhdW5jaGQuMkIydThDa044Uy9MaXN0ZW5lcnNcbiAgICAvLyAgIGxhdW5jaGRfcyA2OTc2MCBpc2FhYyAgIDExdSAgdW5peCAweDU3YWE0ZmNlZWEzOTU5OGIgICAgICAwdDAgICAgICAvcHJpdmF0ZS90bXAvY29tLmFwcGxlLmxhdW5jaGQuMmo1azFUTWg2aS9jb20uYXBwbGUud2ViaW5zcGVjdG9yZF9zaW0uc29ja2V0XG4gICAgLy8gICBsYXVuY2hkX3MgNjk3NjAgaXNhYWMgICAxMnUgIHVuaXggMHg1N2FhNGZjZWVhMzk0YzQzICAgICAgMHQwICAgICAgL3ByaXZhdGUvdG1wL2NvbS5hcHBsZS5sYXVuY2hkLjR6bTlKTzlLRXMvY29tLmFwcGxlLnRlc3RtYW5hZ2VyZC51bml4LWRvbWFpbi5zb2NrZXRcbiAgICAvLyB0aGVzZSBfYXBwZWFyXyB0byBhbHdheXMgYmUgZ3JvdXBlZCB0b2dldGhlciAoc28sIHRoZSByZWNvcmRzIGZvciB0aGUgcGFydGljdWxhciBzaW0gYXJlIGFsbCBpbiBhIGdyb3VwLCBiZWZvcmUgdGhlIG5leHQgc2ltLCBldGMuKVxuICAgIC8vIHNvIHN0YXJ0aW5nIGZyb20gdGhlIGNvcnJlY3QgVURJRCwgd2Ugb3VnaHQgdG8gYmUgYWJsZSB0byBwdWxsIHRoZSBuZXh0IHJlY29yZCB3aXRoIGBjb20uYXBwbGUud2ViaW5zcGVjdG9yZF9zaW0uc29ja2V0YCB0byBnZXQgdGhlIGNvcnJlY3Qgc29ja2V0XG4gICAgbGV0IHtzdGRvdXR9ID0gYXdhaXQgZXhlYygnbHNvZicsIFsnLWFVYycsICdsYXVuY2hkX3NpbSddKTtcbiAgICBmb3IgKGxldCByZWNvcmQgb2Ygc3Rkb3V0LnNwbGl0KCdjb20uYXBwbGUuQ29yZVNpbXVsYXRvci5TaW1EZXZpY2UuJykpIHtcbiAgICAgIGlmICghcmVjb3JkLmluY2x1ZGVzKHRoaXMudWRpZCkpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICBjb25zdCBtYXRjaCA9IFdFQklOU1BFQ1RPUl9TT0NLRVRfUkVHRVhQLmV4ZWMocmVjb3JkKTtcbiAgICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICB0aGlzLndlYkluc3BlY3RvclNvY2tldCA9IG1hdGNoWzFdO1xuICAgICAgcmV0dXJuIHRoaXMud2ViSW5zcGVjdG9yU29ja2V0O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNpbXVsYXRvclhjb2RlOTM7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUlBLE1BQU1BLDBCQUEwQixHQUFHLCtDQUErQztBQUVsRixNQUFNQyxnQkFBZ0IsU0FBU0MsdUJBQWUsQ0FBQztFQUM3Q0MsV0FBVyxDQUFFQyxJQUFJLEVBQUVDLFlBQVksRUFBRTtJQUMvQixLQUFLLENBQUNELElBQUksRUFBRUMsWUFBWSxDQUFDO0lBRXpCLElBQUksQ0FBQ0Msa0JBQWtCLEdBQUcsSUFBSTtFQUNoQztFQUtBLE1BQU1DLHFCQUFxQixHQUFJO0lBQzdCLElBQUksSUFBSSxDQUFDRCxrQkFBa0IsRUFBRTtNQUMzQixPQUFPLElBQUksQ0FBQ0Esa0JBQWtCO0lBQ2hDO0lBY0EsSUFBSTtNQUFDRTtJQUFNLENBQUMsR0FBRyxNQUFNLElBQUFDLGtCQUFJLEVBQUMsTUFBTSxFQUFFLENBQUMsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzFELEtBQUssSUFBSUMsTUFBTSxJQUFJRixNQUFNLENBQUNHLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxFQUFFO01BQ3JFLElBQUksQ0FBQ0QsTUFBTSxDQUFDRSxRQUFRLENBQUMsSUFBSSxDQUFDUixJQUFJLENBQUMsRUFBRTtRQUMvQjtNQUNGO01BQ0EsTUFBTVMsS0FBSyxHQUFHYiwwQkFBMEIsQ0FBQ1MsSUFBSSxDQUFDQyxNQUFNLENBQUM7TUFDckQsSUFBSSxDQUFDRyxLQUFLLEVBQUU7UUFDVixPQUFPLElBQUk7TUFDYjtNQUNBLElBQUksQ0FBQ1Asa0JBQWtCLEdBQUdPLEtBQUssQ0FBQyxDQUFDLENBQUM7TUFDbEMsT0FBTyxJQUFJLENBQUNQLGtCQUFrQjtJQUNoQztJQUVBLE9BQU8sSUFBSTtFQUNiO0FBQ0Y7QUFBQyxlQUVjTCxnQkFBZ0I7QUFBQSJ9