"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PLIST_IDENTIFIER = void 0;
exports.read = read;
exports.readSettings = readSettings;
exports.setReduceMotion = setReduceMotion;
exports.setReduceTransparency = setReduceTransparency;
exports.update = update;
exports.updateLocale = updateLocale;
exports.updateLocationSettings = updateLocationSettings;
exports.updateSafariGlobalSettings = updateSafariGlobalSettings;
exports.updateSafariUserSettings = updateSafariUserSettings;
exports.updateSettings = updateSettings;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("@appium/support");
var _path = _interopRequireDefault(require("path"));
var _logger = _interopRequireDefault(require("./logger"));
var _semver = _interopRequireDefault(require("semver"));
var _bluebird = _interopRequireDefault(require("bluebird"));
const PLIST_IDENTIFIER = Object.freeze({
  WEB_INSPECTOR: 'webInspector',
  MOBILE_SAFARI: 'mobileSafari',
  GLOBAL_MOBILE_SAFARI: 'globalMobileSafari',
  WEB_UI: 'webUI',
  WEB_FOUNDATION: 'webFoundation',
  PREFERENCES: 'preferences',
  GLOBAL_PREFERENCES: 'globalPreferences',
  LOCATION_SERVICES: 'locationServices',
  LOCATION_CLIENTS: 'locationClients',
  LOCATION_CACHE: 'locationCache',
  USER_SETTINGS: 'userSettings',
  EFFECTIVE_USER_SETTINGS: 'effectiveUserSettings',
  ACCESSIBLITY_SETTINGS: 'accessibilitySettings',
  UI_STYLE_SETTINGS: 'uiStyleSettings'
});
exports.PLIST_IDENTIFIER = PLIST_IDENTIFIER;
async function plistPaths(sim, identifier) {
  const simDirectory = sim.getDir();
  switch (identifier) {
    case PLIST_IDENTIFIER.WEB_INSPECTOR:
      return [_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.webInspector.plist')];
    case PLIST_IDENTIFIER.MOBILE_SAFARI:
      return [_path.default.resolve(await sim.getAppDir('com.apple.mobilesafari'), 'Library', 'Preferences', 'com.apple.mobilesafari.plist')];
    case PLIST_IDENTIFIER.GLOBAL_MOBILE_SAFARI:
      return [_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.mobilesafari.plist')];
    case PLIST_IDENTIFIER.WEB_UI:
      return [_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.WebUI.plist')];
    case PLIST_IDENTIFIER.WEB_FOUNDATION:
      return [_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.WebFoundation.plist')];
    case PLIST_IDENTIFIER.PREFERENCES:
      return [_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.Preferences.plist')];
    case PLIST_IDENTIFIER.GLOBAL_PREFERENCES:
      return [_path.default.resolve(simDirectory, 'Library', 'Preferences', '.GlobalPreferences.plist')];
    case PLIST_IDENTIFIER.LOCATION_SERVICES:
      return [_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.locationd.plist')];
    case PLIST_IDENTIFIER.LOCATION_CLIENTS:
      return [_path.default.resolve(simDirectory, 'Library', 'Caches', 'locationd', 'clients.plist')];
    case PLIST_IDENTIFIER.LOCATION_CACHE:
      return [['Caches', 'locationd', 'cache.plist'], ['Preferences', 'com.apple.locationd.plist']].map(x => _path.default.resolve(simDirectory, 'Library', ...x));
    case PLIST_IDENTIFIER.USER_SETTINGS:
      {
        const profilesDirName = _semver.default.lt(_semver.default.coerce(sim.xcodeVersion.versionString), _semver.default.coerce('7.3')) ? 'ConfigurationProfiles' : 'UserConfigurationProfiles';
        return [['UserSettings.plist'], ['EffectiveUserSettings.plist'], ['PublicInfo', 'PublicEffectiveUserSettings.plist']].map(x => _path.default.resolve(simDirectory, 'Library', profilesDirName, ...x));
      }
    case PLIST_IDENTIFIER.EFFECTIVE_USER_SETTINGS:
      return [['EffectiveUserSettings.plist'], ['PublicInfo', 'PublicEffectiveUserSettings.plist']].map(x => _path.default.resolve(simDirectory, 'Library', 'ConfigurationProfiles', ...x));
    case PLIST_IDENTIFIER.ACCESSIBLITY_SETTINGS:
      return [_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.Accessibility.plist')];
    case PLIST_IDENTIFIER.UI_STYLE_SETTINGS:
      return [_path.default.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.uikitservices.userInterfaceStyleMode.plist')];
    default:
      return [];
  }
}
async function updateSettings(sim, plist, updates) {
  const paths = await plistPaths(sim, plist);
  if (_lodash.default.isEmpty(paths)) {
    return false;
  }
  const results = await _bluebird.default.all(paths.map(p => update(p, updates)));
  return _lodash.default.some(results, Boolean);
}
async function update(pathToPlist, updates) {
  const currentSettings = await read(pathToPlist);
  const newSettings = Object.assign({}, currentSettings, updates);
  if (_lodash.default.isEqual(currentSettings, newSettings)) {
    return false;
  }
  await _support.plist.updatePlistFile(pathToPlist, newSettings, true, false);
  return true;
}
async function readSettings(sim, plist) {
  const paths = await plistPaths(sim, plist);
  if (_lodash.default.isEmpty(paths)) {
    return {};
  }
  const settings = await _bluebird.default.all(paths.map(read));
  return _lodash.default.fromPairs(_lodash.default.zip(paths, settings));
}
async function read(pathToPlist) {
  return await _support.plist.parsePlistFile(pathToPlist, false);
}
async function updateLocationSettings(sim, bundleId, authorized) {
  const newCachePrefs = {
    LastFenceActivityTimestamp: 412122103.232983,
    CleanShutdown: true
  };
  const updated = await updateSettings(sim, PLIST_IDENTIFIER.LOCATION_CACHE, {
    [bundleId]: newCachePrefs
  });
  const newClientPrefs = {
    BundleId: bundleId,
    Authorized: !!authorized,
    Whitelisted: false
  };
  const paths = await plistPaths(sim, PLIST_IDENTIFIER.LOCATION_CLIENTS);
  if (_lodash.default.isEmpty(paths)) {
    return false;
  }
  const contents = await _bluebird.default.all(paths.map(read));
  const promises = [];
  for (const [file, content] of _lodash.default.zip(paths, contents)) {
    _logger.default.debug(`Updating location client file: ${file}`);
    const updates = {};
    const weirdLocKey = 'com.apple.locationd.bundle-/System/Library/' + 'PrivateFrameworks/AOSNotification.framework';
    if (!_lodash.default.has(content, weirdLocKey)) {
      updates[weirdLocKey] = {
        BundlePath: '/System/Library/PrivateFrameworks/AOSNotification.framework',
        Whitelisted: false,
        Executable: '',
        Registered: ''
      };
    }
    const baseSetting = _lodash.default.has(content, bundleId) ? content[bundleId] : {};
    updates[bundleId] = _lodash.default.defaults(newClientPrefs, baseSetting);
    updates[bundleId].Executable = updates[bundleId].Executable || '';
    updates[bundleId].Registered = updates[bundleId].Registered || '';
    promises.push(update(file, updates));
  }
  return (_lodash.default.isEmpty(promises) ? false : _lodash.default.some(await _bluebird.default.all(promises), Boolean)) || updated;
}
async function setReduceMotion(sim, reduceMotion = true) {
  _logger.default.debug(`Updating reduce motion. Setting to ${reduceMotion}.`);
  await updateSettings(sim, PLIST_IDENTIFIER.ACCESSIBLITY_SETTINGS, {
    ReduceMotionEnabled: reduceMotion ? 1 : 0
  });
}
async function setReduceTransparency(sim, reduceTransparency) {
  _logger.default.debug(`Updating reduce tranceparency. Setting to ${reduceTransparency}.`);
  await updateSettings(sim, PLIST_IDENTIFIER.ACCESSIBLITY_SETTINGS, {
    EnhancedBackgroundContrastEnabled: reduceTransparency ? 1 : 0
  });
}
async function updateSafariGlobalSettings(sim, settingSet) {
  _logger.default.debug('Updating Safari global settings');
  const promises = [];
  for (const [file, safariSettingSet] of _lodash.default.toPairs(await readSettings(sim, PLIST_IDENTIFIER.GLOBAL_MOBILE_SAFARI))) {
    const newSettings = {};
    for (const [key, value] of _lodash.default.toPairs(settingSet)) {
      if (safariSettingSet[key] !== value) {
        newSettings[key] = value;
      }
    }
    if (_lodash.default.isEmpty(newSettings)) {
      continue;
    }
    promises.push(update(file, newSettings));
  }
  return _lodash.default.isEmpty(promises) ? false : _lodash.default.some(await _bluebird.default.all(promises), Boolean);
}
async function updateSafariUserSettings(sim, settingSet) {
  _logger.default.debug('Updating Safari user settings');
  const newUserSettings = {};
  if (_lodash.default.has(settingSet, 'WebKitJavaScriptEnabled')) {
    newUserSettings.safariAllowJavaScript = settingSet.WebKitJavaScriptEnabled;
  }
  if (_lodash.default.has(settingSet, 'WebKitJavaScriptCanOpenWindowsAutomatically')) {
    newUserSettings.safariAllowPopups = settingSet.WebKitJavaScriptCanOpenWindowsAutomatically;
  }
  if (_lodash.default.has(settingSet, 'WarnAboutFraudulentWebsites')) {
    newUserSettings.safariForceFraudWarning = !settingSet.WarnAboutFraudulentWebsites;
  }
  if (_lodash.default.isEmpty(newUserSettings)) {
    return false;
  }
  const promises = [];
  for (const [file, userSettingSet] of _lodash.default.toPairs(await readSettings(sim, PLIST_IDENTIFIER.USER_SETTINGS))) {
    if (!_lodash.default.has(userSettingSet, 'restrictedBool')) {
      userSettingSet.restrictedBool = {};
    }
    for (const [key, value] of _lodash.default.toPairs(newUserSettings)) {
      userSettingSet.restrictedBool[key] = {
        value
      };
    }
    promises.push(update(file, userSettingSet));
  }
  return _lodash.default.isEmpty(promises) ? false : _lodash.default.some(await _bluebird.default.all(promises), Boolean);
}
async function updateLocale(sim, language, locale, calendarFormat) {
  const globalPrefs = (await plistPaths(sim, PLIST_IDENTIFIER.GLOBAL_PREFERENCES))[0];
  if (!globalPrefs) {
    throw new Error('Global preferences folder path cannot be retrieved');
  }
  let data = await read(globalPrefs);
  let updates = {};
  if (language) {
    _logger.default.debug(`New language: ${language}`);
    let supportedLangs = data.AppleLanguages || [];
    if (supportedLangs.indexOf(language) !== 0) {
      updates.AppleLanguages = [language].concat(_lodash.default.without(supportedLangs, language));
    }
  }
  if (locale || calendarFormat) {
    let calSplit = '@calendar=';
    let curLocaleAndCal = data.AppleLocale || language || 'en';
    let split = curLocaleAndCal.split(calSplit);
    let curLoc = split[0];
    if (calendarFormat || split[1]) {
      calendarFormat = `${calSplit}${calendarFormat || split[1] || ''}`;
    }
    calendarFormat = calendarFormat || '';
    let newLocaleAndCal = locale ? locale : curLoc;
    if (calendarFormat) {
      newLocaleAndCal = `${newLocaleAndCal}${calendarFormat}`;
    }
    if (newLocaleAndCal !== curLocaleAndCal) {
      _logger.default.debug(`New locale: ${newLocaleAndCal}`);
      updates.AppleLocale = newLocaleAndCal;
    }
  }
  if (_lodash.default.size(updates) === 0) {
    _logger.default.debug('No locale updates necessary.');
    return false;
  }
  _logger.default.debug('Writing new locale plist data');
  await update(globalPrefs, updates);
  return true;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,