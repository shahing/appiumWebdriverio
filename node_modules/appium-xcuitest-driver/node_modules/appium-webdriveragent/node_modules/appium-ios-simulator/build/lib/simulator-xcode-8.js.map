{"version":3,"file":"simulator-xcode-8.js","names":["STARTUP_TIMEOUT","SimulatorXcode8","SimulatorXcode7","constructor","udid","xcodeVersion","isFreshFiles","_idb","_locationMenu","idb","value","killUIClient","opts","pid","signal","getUIClientPid","log","debug","exec","e","code","Error","message","isAppInstalled","bundleId","appContainer","simctl","getAppContainer","endsWith","err","info","appInfo","includes","startupTimeout","waitForBoot","startBootMonitor","timeout","emit","BOOT_COMPLETED_EVENT","openUrl","url","isRunning","timer","timing","Timer","start","launchApp","MOBILE_SAFARI_BUNDLE_ID","SAFARI_STARTUP_TIMEOUT","getDuration","asSeconds","toFixed","stderr","cleanSafari","keepPrefs","terminateApp","ign","cleanCustomApp","appFile","appBundleId","scrub","shake","spawnProcess","isBiometricEnrolled","output","executeUIClientScript","_","isString","trim","enrollBiometric","isEnabled","sendBiometricMatch","shouldMatch","setGeolocation","latitude","longitude","locationSetters","setLocationWithLyft","setLocationWithIdb","setLocationWithAppleScript","lastError","setter"],"sources":["../../lib/simulator-xcode-8.js"],"sourcesContent":["import { BOOT_COMPLETED_EVENT } from './simulator-xcode-6';\nimport SimulatorXcode7 from './simulator-xcode-7';\nimport _ from 'lodash';\nimport log from './logger';\nimport { exec } from 'teen_process';\nimport {\n  setLocationWithLyft,\n  setLocationWithIdb,\n  setLocationWithAppleScript } from './geolocation';\nimport { timing } from '@appium/support';\nimport { MOBILE_SAFARI_BUNDLE_ID, SAFARI_STARTUP_TIMEOUT, launchApp } from './utils';\n\n\n// these sims are sloooooooow\nconst STARTUP_TIMEOUT = 120 * 1000;\n\nclass SimulatorXcode8 extends SimulatorXcode7 {\n  constructor (udid, xcodeVersion) {\n    super(udid, xcodeVersion);\n\n    // list of files to check for when seeing if a simulator is \"fresh\"\n    // (meaning it has never been booted).\n    // If these files are present, we assume it's been successfully booted\n    this.isFreshFiles = [\n      'Library/Cookies',\n      'Library/Preferences/.GlobalPreferences.plist',\n      'Library/Preferences/com.apple.springboard.plist',\n      'var/run/syslog.pid'\n    ];\n    this._idb = null;\n\n    // for setting the location using AppleScript, the top-level menu through which\n    // the 'Location' option is found\n    this._locationMenu = 'Debug';\n  }\n\n  /**\n   * IDB instance setter\n   *\n   * @param {IDB} value\n   */\n  set idb (value) {\n    this._idb = value;\n  }\n\n  /**\n   * @return {IDB} idb instance\n   */\n  get idb () {\n    return this._idb;\n  }\n\n  /**\n   * @typedef {Object} killOpts\n   * @property {?number|string} pid - Process id of the UI Simulator window\n   * @property {number|string} signal [2] - The signal number to send to the\n   * `kill` command\n   */\n\n  /**\n   * Kill the UI client if it is running.\n   *\n   * @param {?killOpts} opts\n   * @return {boolean} True if the UI client was successfully killed or false\n   *                   if it is not running.\n   * @throws {Error} If sending the signal to the client process fails\n   */\n  async killUIClient (opts = {}) {\n    let {\n      pid,\n      signal = 2,\n    } = opts;\n    pid = pid || await this.getUIClientPid();\n    if (!pid) {\n      return false;\n    }\n\n    log.debug(`Sending ${signal} kill signal to Simulator UI client with PID ${pid}`);\n    try {\n      await exec('kill', [`-${signal}`, pid]);\n      return true;\n    } catch (e) {\n      if (e.code === 1) {\n        return false;\n      }\n      throw new Error(`Cannot kill the Simulator UI client. Original error: ${e.message}`);\n    }\n  }\n\n  /**\n   * Verify whether the particular application is installed on Simulator.\n   * @override\n   *\n   * @param {string} bundleId - The bundle id of the application to be checked.\n   * @return {boolean} True if the given application is installed.\n   */\n  async isAppInstalled (bundleId) {\n    try {\n      const appContainer = await this.simctl.getAppContainer(bundleId);\n      return appContainer.endsWith('.app');\n    } catch (err) {\n      // get_app_container subcommand fails for system applications,\n      // so we try the hidden appinfo subcommand, which prints correct info for\n      // system/hidden apps\n      try {\n        const info = await this.simctl.appInfo(bundleId);\n        return info.includes('ApplicationType');\n      } catch (e) {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * @return {number} The max number of milliseconds to wait until Simulator booting is completed.\n   */\n  get startupTimeout () {\n    return STARTUP_TIMEOUT;\n  }\n\n  /**\n   * Verify whether the Simulator booting is completed and/or wait for it\n   * until the timeout expires.\n   * @override\n   *\n   * @param {number} startupTimeout - the number of milliseconds to wait until booting is completed.\n   * @emits BOOT_COMPLETED_EVENT if the current Simulator is ready to accept simctl commands, like 'install'.\n   */\n  async waitForBoot (startupTimeout) {\n    await this.simctl.startBootMonitor({timeout: startupTimeout});\n    this.emit(BOOT_COMPLETED_EVENT);\n  }\n\n  /**\n   * Open the given URL in mobile Safari browser.\n   * The browser will be started automatically if it is not running.\n   * @override\n   *\n   * @param {string} url - The URL to be opened.\n   */\n  async openUrl (url) {\n    if (!await this.isRunning()) {\n      throw new Error(`Tried to open '${url}', but Simulator is not in Booted state`);\n    }\n    const timer = new timing.Timer().start();\n    try {\n      await launchApp(this.simctl, MOBILE_SAFARI_BUNDLE_ID, SAFARI_STARTUP_TIMEOUT);\n      await this.simctl.openUrl(url);\n    } catch (err) {\n      throw new Error(`Safari could not open '${url}' after ${timer.getDuration().asSeconds.toFixed(3)}s. ` +\n        `Original error: ${err.stderr || err.message}`);\n    }\n    log.debug(`Safari successfully opened '${url}' in ${timer.getDuration().asSeconds.toFixed(3)}s`);\n  }\n\n  /**\n   * Clean up the directories for mobile Safari.\n   * @override\n   *\n   * @param {boolean} keepPrefs - Whether to keep Safari preferences from being deleted.\n   */\n  async cleanSafari (keepPrefs = true) {\n    try {\n      if (await this.isRunning()) {\n        await this.simctl.terminateApp(MOBILE_SAFARI_BUNDLE_ID);\n      }\n    } catch (ign) {\n      // ignore error\n    }\n    await super.cleanSafari(keepPrefs);\n  }\n\n  /**\n   * Clean/scrub the particular application on Simulator.\n   * @override\n   *\n   * @param {string} appFile - Application name minus \".app\".\n   * @param {string} appBundleId - Bundle identifier of the application.\n   * @param {boolean} scrub - If `scrub` is false, we want to clean by deleting the app and all\n   *   files associated with it. If `scrub` is true, we just want to delete the preferences and\n   *   changed files.\n   */\n  async cleanCustomApp (appFile, appBundleId, scrub = false) {\n    try {\n      await this.simctl.terminateApp(appBundleId);\n    } catch (ign) {\n      // ignore error\n    }\n    await super.cleanCustomApp(appFile, appBundleId, scrub);\n  }\n\n  /**\n   * Perform Shake gesture on Simulator window.\n   */\n  async shake () {\n    log.info(`Performing shake gesture on ${this.udid} Simulator`);\n    await this.simctl.spawnProcess([\n      'notifyutil',\n      '-p', 'com.apple.UIKit.SimulatorShake'\n    ]);\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   */\n  async isBiometricEnrolled () {\n    const output = await this.executeUIClientScript(`\n      tell application \"System Events\"\n        tell process \"Simulator\"\n          set dstMenuItem to menu item \"Toggle Enrolled State\" of menu 1 of menu item \"Touch ID\" of menu 1 of menu bar item \"Hardware\" of menu bar 1\n          set isChecked to (value of attribute \"AXMenuItemMarkChar\" of dstMenuItem) is \"✓\"\n        end tell\n      end tell\n    `);\n    log.debug(`Touch ID enrolled state: ${output}`);\n    return _.isString(output) && output.trim() === 'true';\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   */\n  async enrollBiometric (isEnabled = true) {\n    await this.executeUIClientScript(`\n      tell application \"System Events\"\n        tell process \"Simulator\"\n          set dstMenuItem to menu item \"Toggle Enrolled State\" of menu 1 of menu item \"Touch ID\" of menu 1 of menu bar item \"Hardware\" of menu bar 1\n          set isChecked to (value of attribute \"AXMenuItemMarkChar\" of dstMenuItem) is \"✓\"\n          if ${isEnabled ? 'not ' : ''}isChecked then\n            click dstMenuItem\n          end if\n        end tell\n      end tell\n    `);\n  }\n\n  /**\n   * @inheritdoc\n   * @override\n   */\n  async sendBiometricMatch (shouldMatch = true) {\n    await this.executeUIClientScript(`\n      tell application \"System Events\"\n        tell process \"Simulator\"\n          set dstMenuItem to menu item \"${shouldMatch ? 'Matching Touch' : 'Non-matching Touch'}\" of menu 1 of menu item \"Touch ID\" of menu 1 of menu bar item \"Hardware\" of menu bar 1\n          click dstMenuItem\n        end tell\n      end tell\n    `);\n  }\n\n  /**\n   * Set custom geolocation parameters for the given Simulator using AppleScript.\n   *\n   * @param {string|number} latitude - The latitude value, which is going to be entered\n   *   into the corresponding edit field, for example '39,0006'.\n   * @param {string|number} longitude - The longitude value, which is going to be entered\n   *   into the corresponding edit field, for example '19,0068'.\n   * @returns {boolean} True if the given parameters have correct format and were successfully accepted.\n   * @throws {Error} If there was an error while setting the location\n   */\n  async setGeolocation (latitude, longitude) {\n    const locationSetters = [\n      async () => await setLocationWithLyft(this.udid, latitude, longitude),\n      async () => await setLocationWithIdb(this.idb, latitude, longitude),\n      async () => await setLocationWithAppleScript(this, latitude, longitude, this._locationMenu),\n    ];\n\n    let lastError;\n    for (const setter of locationSetters) {\n      try {\n        await setter();\n        return true;\n      } catch (e) {\n        log.info(e.message);\n        lastError = e;\n      }\n    }\n    throw lastError;\n  }\n}\n\nexport default SimulatorXcode8;\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAIA,MAAMA,eAAe,GAAG,GAAG,GAAG,IAAI;AAElC,MAAMC,eAAe,SAASC,wBAAe,CAAC;EAC5CC,WAAW,CAAEC,IAAI,EAAEC,YAAY,EAAE;IAC/B,KAAK,CAACD,IAAI,EAAEC,YAAY,CAAC;IAKzB,IAAI,CAACC,YAAY,GAAG,CAClB,iBAAiB,EACjB,8CAA8C,EAC9C,iDAAiD,EACjD,oBAAoB,CACrB;IACD,IAAI,CAACC,IAAI,GAAG,IAAI;IAIhB,IAAI,CAACC,aAAa,GAAG,OAAO;EAC9B;EAOA,IAAIC,GAAG,CAAEC,KAAK,EAAE;IACd,IAAI,CAACH,IAAI,GAAGG,KAAK;EACnB;EAKA,IAAID,GAAG,GAAI;IACT,OAAO,IAAI,CAACF,IAAI;EAClB;EAiBA,MAAMI,YAAY,CAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;IAC7B,IAAI;MACFC,GAAG;MACHC,MAAM,GAAG;IACX,CAAC,GAAGF,IAAI;IACRC,GAAG,GAAGA,GAAG,KAAI,MAAM,IAAI,CAACE,cAAc,EAAE;IACxC,IAAI,CAACF,GAAG,EAAE;MACR,OAAO,KAAK;IACd;IAEAG,eAAG,CAACC,KAAK,CAAE,WAAUH,MAAO,gDAA+CD,GAAI,EAAC,CAAC;IACjF,IAAI;MACF,MAAM,IAAAK,kBAAI,EAAC,MAAM,EAAE,CAAE,IAAGJ,MAAO,EAAC,EAAED,GAAG,CAAC,CAAC;MACvC,OAAO,IAAI;IACb,CAAC,CAAC,OAAOM,CAAC,EAAE;MACV,IAAIA,CAAC,CAACC,IAAI,KAAK,CAAC,EAAE;QAChB,OAAO,KAAK;MACd;MACA,MAAM,IAAIC,KAAK,CAAE,wDAAuDF,CAAC,CAACG,OAAQ,EAAC,CAAC;IACtF;EACF;EASA,MAAMC,cAAc,CAAEC,QAAQ,EAAE;IAC9B,IAAI;MACF,MAAMC,YAAY,GAAG,MAAM,IAAI,CAACC,MAAM,CAACC,eAAe,CAACH,QAAQ,CAAC;MAChE,OAAOC,YAAY,CAACG,QAAQ,CAAC,MAAM,CAAC;IACtC,CAAC,CAAC,OAAOC,GAAG,EAAE;MAIZ,IAAI;QACF,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACJ,MAAM,CAACK,OAAO,CAACP,QAAQ,CAAC;QAChD,OAAOM,IAAI,CAACE,QAAQ,CAAC,iBAAiB,CAAC;MACzC,CAAC,CAAC,OAAOb,CAAC,EAAE;QACV,OAAO,KAAK;MACd;IACF;EACF;EAKA,IAAIc,cAAc,GAAI;IACpB,OAAOjC,eAAe;EACxB;EAUA,MAAMkC,WAAW,CAAED,cAAc,EAAE;IACjC,MAAM,IAAI,CAACP,MAAM,CAACS,gBAAgB,CAAC;MAACC,OAAO,EAAEH;IAAc,CAAC,CAAC;IAC7D,IAAI,CAACI,IAAI,CAACC,oCAAoB,CAAC;EACjC;EASA,MAAMC,OAAO,CAAEC,GAAG,EAAE;IAClB,IAAI,EAAC,MAAM,IAAI,CAACC,SAAS,EAAE,GAAE;MAC3B,MAAM,IAAIpB,KAAK,CAAE,kBAAiBmB,GAAI,yCAAwC,CAAC;IACjF;IACA,MAAME,KAAK,GAAG,IAAIC,eAAM,CAACC,KAAK,EAAE,CAACC,KAAK,EAAE;IACxC,IAAI;MACF,MAAM,IAAAC,gBAAS,EAAC,IAAI,CAACpB,MAAM,EAAEqB,8BAAuB,EAAEC,6BAAsB,CAAC;MAC7E,MAAM,IAAI,CAACtB,MAAM,CAACa,OAAO,CAACC,GAAG,CAAC;IAChC,CAAC,CAAC,OAAOX,GAAG,EAAE;MACZ,MAAM,IAAIR,KAAK,CAAE,0BAAyBmB,GAAI,WAAUE,KAAK,CAACO,WAAW,EAAE,CAACC,SAAS,CAACC,OAAO,CAAC,CAAC,CAAE,KAAI,GAClG,mBAAkBtB,GAAG,CAACuB,MAAM,IAAIvB,GAAG,CAACP,OAAQ,EAAC,CAAC;IACnD;IACAN,eAAG,CAACC,KAAK,CAAE,+BAA8BuB,GAAI,QAAOE,KAAK,CAACO,WAAW,EAAE,CAACC,SAAS,CAACC,OAAO,CAAC,CAAC,CAAE,GAAE,CAAC;EAClG;EAQA,MAAME,WAAW,CAAEC,SAAS,GAAG,IAAI,EAAE;IACnC,IAAI;MACF,IAAI,MAAM,IAAI,CAACb,SAAS,EAAE,EAAE;QAC1B,MAAM,IAAI,CAACf,MAAM,CAAC6B,YAAY,CAACR,8BAAuB,CAAC;MACzD;IACF,CAAC,CAAC,OAAOS,GAAG,EAAE,CAEd;IACA,MAAM,KAAK,CAACH,WAAW,CAACC,SAAS,CAAC;EACpC;EAYA,MAAMG,cAAc,CAAEC,OAAO,EAAEC,WAAW,EAAEC,KAAK,GAAG,KAAK,EAAE;IACzD,IAAI;MACF,MAAM,IAAI,CAAClC,MAAM,CAAC6B,YAAY,CAACI,WAAW,CAAC;IAC7C,CAAC,CAAC,OAAOH,GAAG,EAAE,CAEd;IACA,MAAM,KAAK,CAACC,cAAc,CAACC,OAAO,EAAEC,WAAW,EAAEC,KAAK,CAAC;EACzD;EAKA,MAAMC,KAAK,GAAI;IACb7C,eAAG,CAACc,IAAI,CAAE,+BAA8B,IAAI,CAAC1B,IAAK,YAAW,CAAC;IAC9D,MAAM,IAAI,CAACsB,MAAM,CAACoC,YAAY,CAAC,CAC7B,YAAY,EACZ,IAAI,EAAE,gCAAgC,CACvC,CAAC;EACJ;EAMA,MAAMC,mBAAmB,GAAI;IAC3B,MAAMC,MAAM,GAAG,MAAM,IAAI,CAACC,qBAAqB,CAAE;AACrD;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CAAC;IACFjD,eAAG,CAACC,KAAK,CAAE,4BAA2B+C,MAAO,EAAC,CAAC;IAC/C,OAAOE,eAAC,CAACC,QAAQ,CAACH,MAAM,CAAC,IAAIA,MAAM,CAACI,IAAI,EAAE,KAAK,MAAM;EACvD;EAMA,MAAMC,eAAe,CAAEC,SAAS,GAAG,IAAI,EAAE;IACvC,MAAM,IAAI,CAACL,qBAAqB,CAAE;AACtC;AACA;AACA;AACA;AACA,eAAeK,SAAS,GAAG,MAAM,GAAG,EAAG;AACvC;AACA;AACA;AACA;AACA,KAAK,CAAC;EACJ;EAMA,MAAMC,kBAAkB,CAAEC,WAAW,GAAG,IAAI,EAAE;IAC5C,MAAM,IAAI,CAACP,qBAAqB,CAAE;AACtC;AACA;AACA,0CAA0CO,WAAW,GAAG,gBAAgB,GAAG,oBAAqB;AAChG;AACA;AACA;AACA,KAAK,CAAC;EACJ;EAYA,MAAMC,cAAc,CAAEC,QAAQ,EAAEC,SAAS,EAAE;IACzC,MAAMC,eAAe,GAAG,CACtB,YAAY,MAAM,IAAAC,gCAAmB,EAAC,IAAI,CAACzE,IAAI,EAAEsE,QAAQ,EAAEC,SAAS,CAAC,EACrE,YAAY,MAAM,IAAAG,+BAAkB,EAAC,IAAI,CAACrE,GAAG,EAAEiE,QAAQ,EAAEC,SAAS,CAAC,EACnE,YAAY,MAAM,IAAAI,uCAA0B,EAAC,IAAI,EAAEL,QAAQ,EAAEC,SAAS,EAAE,IAAI,CAACnE,aAAa,CAAC,CAC5F;IAED,IAAIwE,SAAS;IACb,KAAK,MAAMC,MAAM,IAAIL,eAAe,EAAE;MACpC,IAAI;QACF,MAAMK,MAAM,EAAE;QACd,OAAO,IAAI;MACb,CAAC,CAAC,OAAO9D,CAAC,EAAE;QACVH,eAAG,CAACc,IAAI,CAACX,CAAC,CAACG,OAAO,CAAC;QACnB0D,SAAS,GAAG7D,CAAC;MACf;IACF;IACA,MAAM6D,SAAS;EACjB;AACF;AAAC,eAEc/E,eAAe;AAAA"}