{"version":3,"file":"settings.js","names":["PLIST_IDENTIFIER","Object","freeze","WEB_INSPECTOR","MOBILE_SAFARI","GLOBAL_MOBILE_SAFARI","WEB_UI","WEB_FOUNDATION","PREFERENCES","GLOBAL_PREFERENCES","LOCATION_SERVICES","LOCATION_CLIENTS","LOCATION_CACHE","USER_SETTINGS","EFFECTIVE_USER_SETTINGS","ACCESSIBLITY_SETTINGS","UI_STYLE_SETTINGS","plistPaths","sim","identifier","simDirectory","getDir","path","resolve","getAppDir","map","x","profilesDirName","semver","lt","coerce","xcodeVersion","versionString","updateSettings","plist","updates","paths","_","isEmpty","results","B","all","p","update","some","Boolean","pathToPlist","currentSettings","read","newSettings","assign","isEqual","updatePlistFile","readSettings","settings","fromPairs","zip","parsePlistFile","updateLocationSettings","bundleId","authorized","newCachePrefs","LastFenceActivityTimestamp","CleanShutdown","updated","newClientPrefs","BundleId","Authorized","Whitelisted","contents","promises","file","content","log","debug","weirdLocKey","has","BundlePath","Executable","Registered","baseSetting","defaults","push","setReduceMotion","reduceMotion","ReduceMotionEnabled","setReduceTransparency","reduceTransparency","EnhancedBackgroundContrastEnabled","updateSafariGlobalSettings","settingSet","safariSettingSet","toPairs","key","value","updateSafariUserSettings","newUserSettings","safariAllowJavaScript","WebKitJavaScriptEnabled","safariAllowPopups","WebKitJavaScriptCanOpenWindowsAutomatically","safariForceFraudWarning","WarnAboutFraudulentWebsites","userSettingSet","restrictedBool","updateLocale","language","locale","calendarFormat","globalPrefs","Error","data","supportedLangs","AppleLanguages","indexOf","concat","without","calSplit","curLocaleAndCal","AppleLocale","split","curLoc","newLocaleAndCal","size"],"sources":["../../lib/settings.js"],"sourcesContent":["import _ from 'lodash';\nimport { plist } from '@appium/support';\nimport path from 'path';\nimport log from './logger';\nimport semver from 'semver';\nimport B from 'bluebird';\n\nconst PLIST_IDENTIFIER = Object.freeze({\n  WEB_INSPECTOR: 'webInspector',\n  MOBILE_SAFARI: 'mobileSafari',\n  GLOBAL_MOBILE_SAFARI: 'globalMobileSafari',\n  WEB_UI: 'webUI',\n  WEB_FOUNDATION: 'webFoundation',\n  PREFERENCES: 'preferences',\n  GLOBAL_PREFERENCES: 'globalPreferences',\n  LOCATION_SERVICES: 'locationServices',\n  LOCATION_CLIENTS: 'locationClients',\n  LOCATION_CACHE: 'locationCache',\n  USER_SETTINGS: 'userSettings',\n  EFFECTIVE_USER_SETTINGS: 'effectiveUserSettings',\n  ACCESSIBLITY_SETTINGS: 'accessibilitySettings',\n  UI_STYLE_SETTINGS: 'uiStyleSettings',\n});\n\n/**\n * Retrieves the list of matching directory paths for the given identifier\n *\n * @param {object} sim Simulator instance\n * @param {string} identifier One of supported path identifiers\n * @returns {string[]} The list of matched paths\n */\nasync function plistPaths (sim, identifier) {\n  const simDirectory = sim.getDir();\n\n  switch (identifier) {\n    case PLIST_IDENTIFIER.WEB_INSPECTOR:\n      return [path.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.webInspector.plist')];\n    case PLIST_IDENTIFIER.MOBILE_SAFARI:\n      return [\n        path.resolve(await sim.getAppDir('com.apple.mobilesafari'), 'Library', 'Preferences', 'com.apple.mobilesafari.plist')\n      ];\n    case PLIST_IDENTIFIER.GLOBAL_MOBILE_SAFARI:\n      return [path.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.mobilesafari.plist')];\n    case PLIST_IDENTIFIER.WEB_UI:\n      return [path.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.WebUI.plist')];\n    case PLIST_IDENTIFIER.WEB_FOUNDATION:\n      return [path.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.WebFoundation.plist')];\n    case PLIST_IDENTIFIER.PREFERENCES:\n      return [path.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.Preferences.plist')];\n    case PLIST_IDENTIFIER.GLOBAL_PREFERENCES:\n      return [path.resolve(simDirectory, 'Library', 'Preferences', '.GlobalPreferences.plist')];\n    case PLIST_IDENTIFIER.LOCATION_SERVICES:\n      return [path.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.locationd.plist')];\n    case PLIST_IDENTIFIER.LOCATION_CLIENTS:\n      return [path.resolve(simDirectory, 'Library', 'Caches', 'locationd', 'clients.plist')];\n    case PLIST_IDENTIFIER.LOCATION_CACHE:\n      return [\n        ['Caches', 'locationd', 'cache.plist'],\n        ['Preferences', 'com.apple.locationd.plist']\n      ].map((x) => path.resolve(simDirectory, 'Library', ...x));\n    case PLIST_IDENTIFIER.USER_SETTINGS: {\n      const profilesDirName = semver.lt(semver.coerce(sim.xcodeVersion.versionString), semver.coerce('7.3'))\n        ? 'ConfigurationProfiles'\n        : 'UserConfigurationProfiles';\n      return [\n        ['UserSettings.plist'],\n        ['EffectiveUserSettings.plist'],\n        ['PublicInfo', 'PublicEffectiveUserSettings.plist'],\n      ].map((x) => path.resolve(simDirectory, 'Library', profilesDirName, ...x));\n    }\n    case PLIST_IDENTIFIER.EFFECTIVE_USER_SETTINGS:\n      return [\n        ['EffectiveUserSettings.plist'],\n        ['PublicInfo', 'PublicEffectiveUserSettings.plist']\n      ].map((x) => path.resolve(simDirectory, 'Library', 'ConfigurationProfiles', ...x));\n    case PLIST_IDENTIFIER.ACCESSIBLITY_SETTINGS:\n      return [path.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.Accessibility.plist')];\n    case PLIST_IDENTIFIER.UI_STYLE_SETTINGS:\n      return [path.resolve(simDirectory, 'Library', 'Preferences', 'com.apple.uikitservices.userInterfaceStyleMode.plist')];\n    default:\n      return [];\n  }\n}\n\n/**\n * Updates plist files with the given PLIST_IDENTIFIER\n *\n * @param {object} sim Simulator instance\n * @param {string} plist One of PLIST_IDENTIFIER constants\n * @param {object} updates Plist updates to apply\n * @returns {boolean} True if at least one .plist file has been changed\n */\nasync function updateSettings (sim, plist, updates) {\n  const paths = await plistPaths(sim, plist);\n  if (_.isEmpty(paths)) {\n    return false;\n  }\n  const results = await B.all(paths.map((p) => update(p, updates)));\n  return _.some(results, Boolean);\n}\n\n/**\n * Update a plist file, located at pathToPlist\n * pass in an object, all settings specified in the object will be\n * updated on the plist, all others left as-is\n *\n * @param {string} pathToPlist The full path to .plist file\n * @param {object} updates Actual updates object to apply\n * @returns {boolean} True if updates were applied and changed the actual plist\n */\nasync function update (pathToPlist, updates) {\n  const currentSettings = await read(pathToPlist);\n  const newSettings = Object.assign({}, currentSettings, updates);\n\n  if (_.isEqual(currentSettings, newSettings)) {\n    // no setting changes, so do nothing\n    return false;\n  }\n\n  await plist.updatePlistFile(pathToPlist, newSettings, true, false);\n  return true;\n}\n\n/**\n * Retrieves data from the given .plist files\n *\n * @param {object} sim Simulator instance\n * @param {string} plist One of PLIST_IDENTIFIER constants\n * @returns {object} Mapping where keys are file paths and values are their contents\n */\nasync function readSettings (sim, plist) {\n  const paths = await plistPaths(sim, plist);\n  if (_.isEmpty(paths)) {\n    return {};\n  }\n  const settings = await B.all(paths.map(read));\n  return _.fromPairs(_.zip(paths, settings));\n}\n\n/**\n * Retrieves data from the given .plist file\n *\n * @param {string} pathToPlist Full path to a .splist file\n * @returns {*} Plist content\n */\nasync function read (pathToPlist) {\n  return await plist.parsePlistFile(pathToPlist, false);\n}\n\nasync function updateLocationSettings (sim, bundleId, authorized) {\n  // update location cache\n  const newCachePrefs = {\n    LastFenceActivityTimestamp: 412122103.232983,\n    CleanShutdown: true\n  };\n  const updated = await updateSettings(sim, PLIST_IDENTIFIER.LOCATION_CACHE, {\n    [bundleId]: newCachePrefs\n  });\n\n  // update location clients\n  const newClientPrefs = {\n    BundleId: bundleId,\n    Authorized: !!authorized,\n    Whitelisted: false,\n  };\n\n  const paths = await plistPaths(sim, PLIST_IDENTIFIER.LOCATION_CLIENTS);\n  if (_.isEmpty(paths)) {\n    return false;\n  }\n  const contents = await B.all(paths.map(read));\n  const promises = [];\n  for (const [file, content] of _.zip(paths, contents)) {\n    log.debug(`Updating location client file: ${file}`);\n\n    const updates = {};\n    // random data that always seems to be in the clients.plist\n    const weirdLocKey = 'com.apple.locationd.bundle-/System/Library/' +\n                        'PrivateFrameworks/AOSNotification.framework';\n    if (!_.has(content, weirdLocKey)) {\n      updates[weirdLocKey] = {\n        BundlePath: '/System/Library/PrivateFrameworks/AOSNotification.framework',\n        Whitelisted: false,\n        Executable: '',\n        Registered: ''\n      };\n    }\n    // create the update, and make sure it has sensible values\n    const baseSetting = _.has(content, bundleId) ? content[bundleId] : {};\n    updates[bundleId] = _.defaults(newClientPrefs, baseSetting);\n    updates[bundleId].Executable = updates[bundleId].Executable || '';\n    updates[bundleId].Registered = updates[bundleId].Registered || '';\n\n    promises.push(update(file, updates));\n  }\n  return (_.isEmpty(promises) ? false : _.some(await B.all(promises), Boolean)) || updated;\n}\n\nasync function setReduceMotion (sim, reduceMotion = true) {\n  log.debug(`Updating reduce motion. Setting to ${reduceMotion}.`);\n  await updateSettings(sim, PLIST_IDENTIFIER.ACCESSIBLITY_SETTINGS, {\n    ReduceMotionEnabled: reduceMotion ? 1 : 0\n  });\n}\n\nasync function setReduceTransparency (sim, reduceTransparency) {\n  log.debug(`Updating reduce tranceparency. Setting to ${reduceTransparency}.`);\n  await updateSettings(sim, PLIST_IDENTIFIER.ACCESSIBLITY_SETTINGS, {\n    EnhancedBackgroundContrastEnabled: reduceTransparency ? 1 : 0\n  });\n}\n\nasync function updateSafariGlobalSettings (sim, settingSet) {\n  log.debug('Updating Safari global settings');\n\n  const promises = [];\n  for (const [file, safariSettingSet] of _.toPairs(await readSettings(sim, PLIST_IDENTIFIER.GLOBAL_MOBILE_SAFARI))) {\n    const newSettings = {};\n    for (const [key, value] of _.toPairs(settingSet)) {\n      if (safariSettingSet[key] !== value) {\n        newSettings[key] = value;\n      }\n    }\n    if (_.isEmpty(newSettings)) {\n      continue;\n    }\n    promises.push(update(file, newSettings));\n  }\n  return _.isEmpty(promises) ? false : _.some(await B.all(promises), Boolean);\n}\n\nasync function updateSafariUserSettings (sim, settingSet) {\n  log.debug('Updating Safari user settings');\n\n  // add extra stuff to UserSettings.plist and EffectiveUserSettings.plist\n  const newUserSettings = {};\n  if (_.has(settingSet, 'WebKitJavaScriptEnabled')) {\n    newUserSettings.safariAllowJavaScript = settingSet.WebKitJavaScriptEnabled;\n  }\n  if (_.has(settingSet, 'WebKitJavaScriptCanOpenWindowsAutomatically')) {\n    newUserSettings.safariAllowPopups = settingSet.WebKitJavaScriptCanOpenWindowsAutomatically;\n  }\n  if (_.has(settingSet, 'WarnAboutFraudulentWebsites')) {\n    newUserSettings.safariForceFraudWarning = !settingSet.WarnAboutFraudulentWebsites;\n  }\n  if (_.isEmpty(newUserSettings)) {\n    return false;\n  }\n\n  const promises = [];\n  for (const [file, userSettingSet] of _.toPairs(await readSettings(sim, PLIST_IDENTIFIER.USER_SETTINGS))) {\n    // the user settings plist has two buckets, one for\n    // boolean settings (`restrictedBool`) and one for\n    // other value settings (`restrictedValue`). In each, the value\n    // is in a `value` sub-field.\n    if (!_.has(userSettingSet, 'restrictedBool')) {\n      userSettingSet.restrictedBool = {};\n    }\n    for (const [key, value] of _.toPairs(newUserSettings)) {\n      userSettingSet.restrictedBool[key] = {value};\n    }\n\n    promises.push(update(file, userSettingSet));\n  }\n  return _.isEmpty(promises) ? false : _.some(await B.all(promises), Boolean);\n}\n\nasync function updateLocale (sim, language, locale, calendarFormat) {\n  const globalPrefs = (await plistPaths(sim, PLIST_IDENTIFIER.GLOBAL_PREFERENCES))[0];\n  if (!globalPrefs) {\n    throw new Error('Global preferences folder path cannot be retrieved');\n  }\n\n  // get the current data\n  let data = await read(globalPrefs);\n  let updates = {};\n\n  // if we are setting the language, add it to the beginning of the list of languages\n  if (language) {\n    log.debug(`New language: ${language}`);\n    let supportedLangs = data.AppleLanguages || [];\n    // if the language is first, we don't need to do anything\n    if (supportedLangs.indexOf(language) !== 0) {\n      updates.AppleLanguages = [language].concat(_.without(supportedLangs, language));\n    }\n  }\n  // if we are setting the locale or calendar format, set them as appropriate\n  if (locale || calendarFormat) {\n    let calSplit = '@calendar=';\n    let curLocaleAndCal = data.AppleLocale || language || 'en';\n\n    let split = curLocaleAndCal.split(calSplit);\n    let curLoc = split[0];\n    if (calendarFormat || split[1]) {\n      calendarFormat = `${calSplit}${calendarFormat || split[1] || ''}`;\n    }\n    calendarFormat = calendarFormat || '';\n    let newLocaleAndCal = locale ? locale : curLoc;\n    if (calendarFormat) {\n      newLocaleAndCal = `${newLocaleAndCal}${calendarFormat}`;\n    }\n    // only need to update if it has changed\n    if (newLocaleAndCal !== curLocaleAndCal) {\n      log.debug(`New locale: ${newLocaleAndCal}`);\n      updates.AppleLocale = newLocaleAndCal;\n    }\n  }\n\n  if (_.size(updates) === 0) {\n    log.debug('No locale updates necessary.');\n    return false;\n  }\n\n  log.debug('Writing new locale plist data');\n  await update(globalPrefs, updates);\n  return true;\n}\n\nexport {\n  update, updateSettings, updateLocationSettings, setReduceMotion, setReduceTransparency,\n  updateSafariUserSettings, updateSafariGlobalSettings, updateLocale, read,\n  readSettings, PLIST_IDENTIFIER\n};\n"],"mappings":"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"}