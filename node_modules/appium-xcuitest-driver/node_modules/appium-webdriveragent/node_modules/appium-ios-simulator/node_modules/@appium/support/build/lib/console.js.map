{"version":3,"file":"console.js","names":["NullWritable","Writable","_write","chunk","encoding","callback","setImmediate","CliConsole","console","useSymbols","useColor","symbolToColor","success","info","warning","error","constructor","jsonMode","NodeConsole","process","stdout","stderr","Boolean","supportsColor","decorate","msg","symbol","_","isString","newMsg","symbols","json","value","log","JSON","stringify","message","args","ok","debug","dump","item","opts","dir","warn"],"sources":["../../lib/console.js"],"sourcesContent":["import _ from 'lodash';\nimport {supportsColor} from 'supports-color';\nimport {Console as NodeConsole} from 'console';\nimport '@colors/colors';\nimport symbols from 'log-symbols';\nimport {Writable} from 'stream';\n\n/**\n * Stream to nowhere. Used when we want to disable any output other than JSON output.\n */\nclass NullWritable extends Writable {\n  // eslint-disable-next-line promise/prefer-await-to-callbacks\n  _write(chunk, encoding, callback) {\n    setImmediate(callback);\n  }\n}\n\n/**\n * A particular console/logging class for Appium's CLI.\n *\n * - By default, uses some fancy symbols\n * - Writes to `STDERR`, generally.\n * - In \"JSON mode\", `STDERR` is squelched. Use {@linkcode Console.json} to write the JSON.\n *\n * DO NOT extend this to do anything other than what it already does. Download a library or something.\n */\nexport class CliConsole {\n  /**\n   * Internal console\n   * @type {globalThis.Console}\n   */\n  #console;\n\n  /**\n   * Whether or not to use fancy symbols when logging.\n   * @type {boolean}\n   *\n   */\n  #useSymbols;\n\n  /**\n   * Whether or not to use color.\n   */\n  #useColor;\n\n  /**\n   * @type {Record<keyof typeof symbols,keyof Extract<import('@colors/colors').Color, 'string'>>}\n   */\n  static symbolToColor = {\n    success: 'green',\n    info: 'cyan',\n    warning: 'yellow',\n    error: 'red',\n  };\n\n  /**\n   *\n   * @param {ConsoleOpts} opts\n   */\n  constructor({jsonMode = false, useSymbols = true, useColor} = {}) {\n    this.#console = new NodeConsole(process.stdout, jsonMode ? new NullWritable() : process.stderr);\n    this.#useSymbols = Boolean(useSymbols);\n    this.#useColor = Boolean(useColor ?? supportsColor(process.stderr));\n  }\n\n  /**\n   * Wraps a message string in breathtaking fanciness\n   *\n   * Returns `undefined` if `msg` is `undefined`.\n   * @param {string} [msg] - Message to decorate, if anything\n   * @param {keyof typeof CliConsole['symbolToColor']} [symbol] - Symbol to use\n   * @returns {string|undefined}\n   */\n  decorate(msg, symbol) {\n    if (_.isString(msg)) {\n      let newMsg = /** @type {string} */ (msg);\n      if (_.isString(symbol) && this.#useSymbols) {\n        newMsg = `${symbols[symbol]} ${newMsg}`;\n        if (this.#useColor) {\n          newMsg = newMsg[CliConsole.symbolToColor[symbol]];\n        }\n      }\n      return newMsg;\n    }\n    return msg;\n  }\n\n  /**\n   * Writes to `STDOUT`.  Must be stringifyable.\n   *\n   * You probably don't want to call this more than once before exiting (since that will output invalid JSON).\n   * @param {import('type-fest').JsonValue} value\n   */\n  json(value) {\n    this.#console.log(JSON.stringify(value));\n  }\n\n  /**\n   * General logging function.\n   * @param {string} [message]\n   * @param {...any} args\n   */\n  log(message, ...args) {\n    this.#console.error(message, ...args);\n  }\n\n  /**\n   * A \"success\" message\n   * @param {string} [message]\n   * @param {...any} args\n   */\n  ok(message, ...args) {\n    this.#console.error(this.decorate(message, 'success'), ...args);\n  }\n\n  /**\n   * Alias for {@linkcode Console.log}\n   * @param {string} [message]\n   * @param {...any} args\n   */\n  debug(message, ...args) {\n    this.log(message, ...args);\n  }\n\n  /**\n   * Wraps {@link console.dir}\n   * @param {any} item\n   * @param {import('util').InspectOptions} [opts]\n   */\n  dump(item, opts) {\n    this.#console.dir(item, opts);\n  }\n\n  /**\n   * An \"info\" message\n   * @param {string} [message]\n   * @param {...any} args\n   */\n  info(message, ...args) {\n    this.log(this.decorate(message, 'info'), ...args);\n  }\n\n  /**\n   * A \"warning\" message\n   * @param {string} [message]\n   * @param {...any} args\n   */\n  warn(message, ...args) {\n    this.log(this.decorate(message, 'warning'), ...args);\n  }\n\n  /**\n   * An \"error\" message\n   * @param {string} [message]\n   * @param {...any} args\n   */\n  error(message, ...args) {\n    this.log(this.decorate(message, 'error'), ...args);\n  }\n}\n\n/**\n * Options for {@linkcode CliConsole}.\n *\n * @typedef ConsoleOpts\n * @property {boolean} [jsonMode] - If _truthy_, supress all output except JSON (use {@linkcode CliConsole#json}), which writes to `STDOUT`.\n * @property {boolean} [useSymbols] - If _falsy_, do not use fancy symbols.\n * @property {boolean} [useColor] - If _falsy_, do not use color output. If _truthy_, forces color output. By default, checks terminal/TTY for support via pkg `supports-color`. Ignored if `useSymbols` is `false`.\n * @see https://npm.im/supports-color\n */\n\nexport const console = new CliConsole();\nexport {symbols};\n"],"mappings":"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"}