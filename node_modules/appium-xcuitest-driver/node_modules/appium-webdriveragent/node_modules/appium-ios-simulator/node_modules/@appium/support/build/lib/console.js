"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.console = exports.CliConsole = void 0;
Object.defineProperty(exports, "symbols", {
  enumerable: true,
  get: function () {
    return _logSymbols.default;
  }
});

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _supportsColor = require("supports-color");

var _console = require("console");

require("@colors/colors");

var _logSymbols = _interopRequireDefault(require("log-symbols"));

var _stream = require("stream");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class NullWritable extends _stream.Writable {
  _write(chunk, encoding, callback) {
    setImmediate(callback);
  }

}

class CliConsole {
  #console;
  #useSymbols;
  #useColor;
  static symbolToColor = {
    success: 'green',
    info: 'cyan',
    warning: 'yellow',
    error: 'red'
  };

  constructor({
    jsonMode = false,
    useSymbols = true,
    useColor
  } = {}) {
    this.#console = new _console.Console(process.stdout, jsonMode ? new NullWritable() : process.stderr);
    this.#useSymbols = Boolean(useSymbols);
    this.#useColor = Boolean(useColor ?? (0, _supportsColor.supportsColor)(process.stderr));
  }

  decorate(msg, symbol) {
    if (_lodash.default.isString(msg)) {
      let newMsg = msg;

      if (_lodash.default.isString(symbol) && this.#useSymbols) {
        newMsg = `${_logSymbols.default[symbol]} ${newMsg}`;

        if (this.#useColor) {
          newMsg = newMsg[CliConsole.symbolToColor[symbol]];
        }
      }

      return newMsg;
    }

    return msg;
  }

  json(value) {
    this.#console.log(JSON.stringify(value));
  }

  log(message, ...args) {
    this.#console.error(message, ...args);
  }

  ok(message, ...args) {
    this.#console.error(this.decorate(message, 'success'), ...args);
  }

  debug(message, ...args) {
    this.log(message, ...args);
  }

  dump(item, opts) {
    this.#console.dir(item, opts);
  }

  info(message, ...args) {
    this.log(this.decorate(message, 'info'), ...args);
  }

  warn(message, ...args) {
    this.log(this.decorate(message, 'warning'), ...args);
  }

  error(message, ...args) {
    this.log(this.decorate(message, 'error'), ...args);
  }

}

exports.CliConsole = CliConsole;
const console = new CliConsole();
exports.console = console;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdWxsV3JpdGFibGUiLCJXcml0YWJsZSIsIl93cml0ZSIsImNodW5rIiwiZW5jb2RpbmciLCJjYWxsYmFjayIsInNldEltbWVkaWF0ZSIsIkNsaUNvbnNvbGUiLCJjb25zb2xlIiwidXNlU3ltYm9scyIsInVzZUNvbG9yIiwic3ltYm9sVG9Db2xvciIsInN1Y2Nlc3MiLCJpbmZvIiwid2FybmluZyIsImVycm9yIiwiY29uc3RydWN0b3IiLCJqc29uTW9kZSIsIk5vZGVDb25zb2xlIiwicHJvY2VzcyIsInN0ZG91dCIsInN0ZGVyciIsIkJvb2xlYW4iLCJzdXBwb3J0c0NvbG9yIiwiZGVjb3JhdGUiLCJtc2ciLCJzeW1ib2wiLCJfIiwiaXNTdHJpbmciLCJuZXdNc2ciLCJzeW1ib2xzIiwianNvbiIsInZhbHVlIiwibG9nIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1lc3NhZ2UiLCJhcmdzIiwib2siLCJkZWJ1ZyIsImR1bXAiLCJpdGVtIiwib3B0cyIsImRpciIsIndhcm4iXSwic291cmNlcyI6WyIuLi8uLi9saWIvY29uc29sZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHtzdXBwb3J0c0NvbG9yfSBmcm9tICdzdXBwb3J0cy1jb2xvcic7XG5pbXBvcnQge0NvbnNvbGUgYXMgTm9kZUNvbnNvbGV9IGZyb20gJ2NvbnNvbGUnO1xuaW1wb3J0ICdAY29sb3JzL2NvbG9ycyc7XG5pbXBvcnQgc3ltYm9scyBmcm9tICdsb2ctc3ltYm9scyc7XG5pbXBvcnQge1dyaXRhYmxlfSBmcm9tICdzdHJlYW0nO1xuXG4vKipcbiAqIFN0cmVhbSB0byBub3doZXJlLiBVc2VkIHdoZW4gd2Ugd2FudCB0byBkaXNhYmxlIGFueSBvdXRwdXQgb3RoZXIgdGhhbiBKU09OIG91dHB1dC5cbiAqL1xuY2xhc3MgTnVsbFdyaXRhYmxlIGV4dGVuZHMgV3JpdGFibGUge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9wcmVmZXItYXdhaXQtdG8tY2FsbGJhY2tzXG4gIF93cml0ZShjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgc2V0SW1tZWRpYXRlKGNhbGxiYWNrKTtcbiAgfVxufVxuXG4vKipcbiAqIEEgcGFydGljdWxhciBjb25zb2xlL2xvZ2dpbmcgY2xhc3MgZm9yIEFwcGl1bSdzIENMSS5cbiAqXG4gKiAtIEJ5IGRlZmF1bHQsIHVzZXMgc29tZSBmYW5jeSBzeW1ib2xzXG4gKiAtIFdyaXRlcyB0byBgU1RERVJSYCwgZ2VuZXJhbGx5LlxuICogLSBJbiBcIkpTT04gbW9kZVwiLCBgU1RERVJSYCBpcyBzcXVlbGNoZWQuIFVzZSB7QGxpbmtjb2RlIENvbnNvbGUuanNvbn0gdG8gd3JpdGUgdGhlIEpTT04uXG4gKlxuICogRE8gTk9UIGV4dGVuZCB0aGlzIHRvIGRvIGFueXRoaW5nIG90aGVyIHRoYW4gd2hhdCBpdCBhbHJlYWR5IGRvZXMuIERvd25sb2FkIGEgbGlicmFyeSBvciBzb21ldGhpbmcuXG4gKi9cbmV4cG9ydCBjbGFzcyBDbGlDb25zb2xlIHtcbiAgLyoqXG4gICAqIEludGVybmFsIGNvbnNvbGVcbiAgICogQHR5cGUge2dsb2JhbFRoaXMuQ29uc29sZX1cbiAgICovXG4gICNjb25zb2xlO1xuXG4gIC8qKlxuICAgKiBXaGV0aGVyIG9yIG5vdCB0byB1c2UgZmFuY3kgc3ltYm9scyB3aGVuIGxvZ2dpbmcuXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKlxuICAgKi9cbiAgI3VzZVN5bWJvbHM7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgb3Igbm90IHRvIHVzZSBjb2xvci5cbiAgICovXG4gICN1c2VDb2xvcjtcblxuICAvKipcbiAgICogQHR5cGUge1JlY29yZDxrZXlvZiB0eXBlb2Ygc3ltYm9scyxrZXlvZiBFeHRyYWN0PGltcG9ydCgnQGNvbG9ycy9jb2xvcnMnKS5Db2xvciwgJ3N0cmluZyc+Pn1cbiAgICovXG4gIHN0YXRpYyBzeW1ib2xUb0NvbG9yID0ge1xuICAgIHN1Y2Nlc3M6ICdncmVlbicsXG4gICAgaW5mbzogJ2N5YW4nLFxuICAgIHdhcm5pbmc6ICd5ZWxsb3cnLFxuICAgIGVycm9yOiAncmVkJyxcbiAgfTtcblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtDb25zb2xlT3B0c30gb3B0c1xuICAgKi9cbiAgY29uc3RydWN0b3Ioe2pzb25Nb2RlID0gZmFsc2UsIHVzZVN5bWJvbHMgPSB0cnVlLCB1c2VDb2xvcn0gPSB7fSkge1xuICAgIHRoaXMuI2NvbnNvbGUgPSBuZXcgTm9kZUNvbnNvbGUocHJvY2Vzcy5zdGRvdXQsIGpzb25Nb2RlID8gbmV3IE51bGxXcml0YWJsZSgpIDogcHJvY2Vzcy5zdGRlcnIpO1xuICAgIHRoaXMuI3VzZVN5bWJvbHMgPSBCb29sZWFuKHVzZVN5bWJvbHMpO1xuICAgIHRoaXMuI3VzZUNvbG9yID0gQm9vbGVhbih1c2VDb2xvciA/PyBzdXBwb3J0c0NvbG9yKHByb2Nlc3Muc3RkZXJyKSk7XG4gIH1cblxuICAvKipcbiAgICogV3JhcHMgYSBtZXNzYWdlIHN0cmluZyBpbiBicmVhdGh0YWtpbmcgZmFuY2luZXNzXG4gICAqXG4gICAqIFJldHVybnMgYHVuZGVmaW5lZGAgaWYgYG1zZ2AgaXMgYHVuZGVmaW5lZGAuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbXNnXSAtIE1lc3NhZ2UgdG8gZGVjb3JhdGUsIGlmIGFueXRoaW5nXG4gICAqIEBwYXJhbSB7a2V5b2YgdHlwZW9mIENsaUNvbnNvbGVbJ3N5bWJvbFRvQ29sb3InXX0gW3N5bWJvbF0gLSBTeW1ib2wgdG8gdXNlXG4gICAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfVxuICAgKi9cbiAgZGVjb3JhdGUobXNnLCBzeW1ib2wpIHtcbiAgICBpZiAoXy5pc1N0cmluZyhtc2cpKSB7XG4gICAgICBsZXQgbmV3TXNnID0gLyoqIEB0eXBlIHtzdHJpbmd9ICovIChtc2cpO1xuICAgICAgaWYgKF8uaXNTdHJpbmcoc3ltYm9sKSAmJiB0aGlzLiN1c2VTeW1ib2xzKSB7XG4gICAgICAgIG5ld01zZyA9IGAke3N5bWJvbHNbc3ltYm9sXX0gJHtuZXdNc2d9YDtcbiAgICAgICAgaWYgKHRoaXMuI3VzZUNvbG9yKSB7XG4gICAgICAgICAgbmV3TXNnID0gbmV3TXNnW0NsaUNvbnNvbGUuc3ltYm9sVG9Db2xvcltzeW1ib2xdXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ld01zZztcbiAgICB9XG4gICAgcmV0dXJuIG1zZztcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZXMgdG8gYFNURE9VVGAuICBNdXN0IGJlIHN0cmluZ2lmeWFibGUuXG4gICAqXG4gICAqIFlvdSBwcm9iYWJseSBkb24ndCB3YW50IHRvIGNhbGwgdGhpcyBtb3JlIHRoYW4gb25jZSBiZWZvcmUgZXhpdGluZyAoc2luY2UgdGhhdCB3aWxsIG91dHB1dCBpbnZhbGlkIEpTT04pLlxuICAgKiBAcGFyYW0ge2ltcG9ydCgndHlwZS1mZXN0JykuSnNvblZhbHVlfSB2YWx1ZVxuICAgKi9cbiAganNvbih2YWx1ZSkge1xuICAgIHRoaXMuI2NvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhbCBsb2dnaW5nIGZ1bmN0aW9uLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW21lc3NhZ2VdXG4gICAqIEBwYXJhbSB7Li4uYW55fSBhcmdzXG4gICAqL1xuICBsb2cobWVzc2FnZSwgLi4uYXJncykge1xuICAgIHRoaXMuI2NvbnNvbGUuZXJyb3IobWVzc2FnZSwgLi4uYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBcInN1Y2Nlc3NcIiBtZXNzYWdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbWVzc2FnZV1cbiAgICogQHBhcmFtIHsuLi5hbnl9IGFyZ3NcbiAgICovXG4gIG9rKG1lc3NhZ2UsIC4uLmFyZ3MpIHtcbiAgICB0aGlzLiNjb25zb2xlLmVycm9yKHRoaXMuZGVjb3JhdGUobWVzc2FnZSwgJ3N1Y2Nlc3MnKSwgLi4uYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQWxpYXMgZm9yIHtAbGlua2NvZGUgQ29uc29sZS5sb2d9XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbWVzc2FnZV1cbiAgICogQHBhcmFtIHsuLi5hbnl9IGFyZ3NcbiAgICovXG4gIGRlYnVnKG1lc3NhZ2UsIC4uLmFyZ3MpIHtcbiAgICB0aGlzLmxvZyhtZXNzYWdlLCAuLi5hcmdzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcmFwcyB7QGxpbmsgY29uc29sZS5kaXJ9XG4gICAqIEBwYXJhbSB7YW55fSBpdGVtXG4gICAqIEBwYXJhbSB7aW1wb3J0KCd1dGlsJykuSW5zcGVjdE9wdGlvbnN9IFtvcHRzXVxuICAgKi9cbiAgZHVtcChpdGVtLCBvcHRzKSB7XG4gICAgdGhpcy4jY29uc29sZS5kaXIoaXRlbSwgb3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogQW4gXCJpbmZvXCIgbWVzc2FnZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW21lc3NhZ2VdXG4gICAqIEBwYXJhbSB7Li4uYW55fSBhcmdzXG4gICAqL1xuICBpbmZvKG1lc3NhZ2UsIC4uLmFyZ3MpIHtcbiAgICB0aGlzLmxvZyh0aGlzLmRlY29yYXRlKG1lc3NhZ2UsICdpbmZvJyksIC4uLmFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgXCJ3YXJuaW5nXCIgbWVzc2FnZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW21lc3NhZ2VdXG4gICAqIEBwYXJhbSB7Li4uYW55fSBhcmdzXG4gICAqL1xuICB3YXJuKG1lc3NhZ2UsIC4uLmFyZ3MpIHtcbiAgICB0aGlzLmxvZyh0aGlzLmRlY29yYXRlKG1lc3NhZ2UsICd3YXJuaW5nJyksIC4uLmFyZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIFwiZXJyb3JcIiBtZXNzYWdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbWVzc2FnZV1cbiAgICogQHBhcmFtIHsuLi5hbnl9IGFyZ3NcbiAgICovXG4gIGVycm9yKG1lc3NhZ2UsIC4uLmFyZ3MpIHtcbiAgICB0aGlzLmxvZyh0aGlzLmRlY29yYXRlKG1lc3NhZ2UsICdlcnJvcicpLCAuLi5hcmdzKTtcbiAgfVxufVxuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHtAbGlua2NvZGUgQ2xpQ29uc29sZX0uXG4gKlxuICogQHR5cGVkZWYgQ29uc29sZU9wdHNcbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2pzb25Nb2RlXSAtIElmIF90cnV0aHlfLCBzdXByZXNzIGFsbCBvdXRwdXQgZXhjZXB0IEpTT04gKHVzZSB7QGxpbmtjb2RlIENsaUNvbnNvbGUjanNvbn0pLCB3aGljaCB3cml0ZXMgdG8gYFNURE9VVGAuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IFt1c2VTeW1ib2xzXSAtIElmIF9mYWxzeV8sIGRvIG5vdCB1c2UgZmFuY3kgc3ltYm9scy5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3VzZUNvbG9yXSAtIElmIF9mYWxzeV8sIGRvIG5vdCB1c2UgY29sb3Igb3V0cHV0LiBJZiBfdHJ1dGh5XywgZm9yY2VzIGNvbG9yIG91dHB1dC4gQnkgZGVmYXVsdCwgY2hlY2tzIHRlcm1pbmFsL1RUWSBmb3Igc3VwcG9ydCB2aWEgcGtnIGBzdXBwb3J0cy1jb2xvcmAuIElnbm9yZWQgaWYgYHVzZVN5bWJvbHNgIGlzIGBmYWxzZWAuXG4gKiBAc2VlIGh0dHBzOi8vbnBtLmltL3N1cHBvcnRzLWNvbG9yXG4gKi9cblxuZXhwb3J0IGNvbnN0IGNvbnNvbGUgPSBuZXcgQ2xpQ29uc29sZSgpO1xuZXhwb3J0IHtzeW1ib2xzfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFLQSxNQUFNQSxZQUFOLFNBQTJCQyxnQkFBM0IsQ0FBb0M7RUFFbENDLE1BQU0sQ0FBQ0MsS0FBRCxFQUFRQyxRQUFSLEVBQWtCQyxRQUFsQixFQUE0QjtJQUNoQ0MsWUFBWSxDQUFDRCxRQUFELENBQVo7RUFDRDs7QUFKaUM7O0FBZ0I3QixNQUFNRSxVQUFOLENBQWlCO0VBS3RC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