{"version":3,"file":"logging.js","names":["LEVELS","MAX_LOG_RECORDS_COUNT","PREFIX_TIMESTAMP_FORMAT","mockLog","level","patchLogger","logger","debug","addLevel","fg","bg","_getLogger","testingMode","process","env","_TESTING","forceLogMode","_FORCE_LOGS","usingGlobalLog","global","_global_npmlog","npmlog","maxRecordSize","getActualPrefix","prefix","logTimestamp","result","_","isFunction","moment","format","getLogger","wrappedLogger","unwrap","levels","Object","defineProperty","get","set","newValue","enumerable","configurable","_LOG_TIMESTAMP","args","actualPrefix","arg","out","isError","stack","line","split","unleakedLine","unleakString","SECURE_VALUES_PREPROCESSOR","preprocess","errorAndThrow","err","error","Error","loadSecureValuesPreprocessingRules","rulesJsonPath","issues","loadRules","rules","cloneDeep","log"],"sources":["../../lib/logging.js"],"sourcesContent":["// @ts-check\n\nimport npmlog from 'npmlog';\nimport _ from 'lodash';\nimport {unleakString} from './util';\nimport moment from 'moment';\nimport SECURE_VALUES_PREPROCESSOR from './log-internal';\n\n/** @type {import('@appium/types').AppiumLoggerLevel[]} */\nexport const LEVELS = ['silly', 'verbose', 'debug', 'info', 'http', 'warn', 'error'];\nconst MAX_LOG_RECORDS_COUNT = 3000;\n\nconst PREFIX_TIMESTAMP_FORMAT = 'HH-mm-ss:SSS';\n\n// mock log object used in testing mode\nlet mockLog = {};\nfor (let level of LEVELS) {\n  mockLog[level] = () => {};\n}\n\n/**\n *\n * @param {import('npmlog').Logger} logger\n */\nfunction patchLogger(logger) {\n  if (!logger.debug) {\n    logger.addLevel('debug', 1000, {fg: 'blue', bg: 'black'}, 'dbug');\n  }\n}\n\n/**\n *\n * @returns {[import('npmlog').Logger, boolean]}\n */\nfunction _getLogger() {\n  // check if the user set the `_TESTING` or `_FORCE_LOGS` flag\n  const testingMode = process.env._TESTING === '1';\n  const forceLogMode = process.env._FORCE_LOGS === '1';\n\n  // if is possible that there is a logger instance that is already around,\n  // in which case we want t o use that\n  const usingGlobalLog = !!global._global_npmlog;\n  let logger;\n  if (testingMode && !forceLogMode) {\n    // in testing mode, use a mock logger object that we can query\n    logger = mockLog;\n  } else {\n    // otherwise, either use the global, or a new `npmlog` object\n    logger = global._global_npmlog || npmlog;\n    // The default value is 10000, which causes excessive memory usage\n    logger.maxRecordSize = MAX_LOG_RECORDS_COUNT;\n  }\n  patchLogger(logger);\n  return [logger, usingGlobalLog];\n}\n\n/**\n * @param {AppiumLoggerPrefix?} prefix\n * @param {boolean} logTimestamp whether to include timestamps into log prefixes\n * @returns {string}\n */\nfunction getActualPrefix(prefix, logTimestamp = false) {\n  const result = (_.isFunction(prefix) ? prefix() : prefix) ?? '';\n  return logTimestamp ? `[${moment().format(PREFIX_TIMESTAMP_FORMAT)}] ${result}` : result;\n}\n\n/**\n *\n * @param {AppiumLoggerPrefix?} prefix\n * @returns {AppiumLogger}\n */\nfunction getLogger(prefix = null) {\n  let [logger, usingGlobalLog] = _getLogger();\n\n  // wrap the logger so that we can catch and modify any logging\n  let wrappedLogger = {\n    unwrap: () => logger,\n    levels: LEVELS,\n    prefix,\n  };\n\n  // allow access to the level of the underlying logger\n  Object.defineProperty(wrappedLogger, 'level', {\n    get() {\n      return logger.level;\n    },\n    set(newValue) {\n      logger.level = newValue;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  const logTimestamp = process.env._LOG_TIMESTAMP === '1';\n\n  // add all the levels from `npmlog`, and map to the underlying logger\n  for (const level of LEVELS) {\n    wrappedLogger[level] = /** @param {...any} args */ function (...args) {\n      const actualPrefix = getActualPrefix(this.prefix, logTimestamp);\n      for (const arg of args) {\n        const out = _.isError(arg) && arg.stack ? arg.stack : `${arg}`;\n        for (const line of out.split('\\n')) {\n          // it is necessary to unleak each line because `split` call\n          // creates \"views\" to the original string as well as the `substring` one\n          const unleakedLine = unleakString(line);\n          logger[level](actualPrefix, SECURE_VALUES_PREPROCESSOR.preprocess(unleakedLine));\n        }\n      }\n    };\n  }\n  // add method to log an error, and throw it, for convenience\n  wrappedLogger.errorAndThrow = function (err) {\n    this.error(err);\n    // make sure we have an `Error` object. Wrap if necessary\n    throw _.isError(err) ? err : new Error(unleakString(err));\n  };\n  if (!usingGlobalLog) {\n    // if we're not using a global log specified from some top-level package,\n    // set the log level to a default of verbose. Otherwise, let the top-level\n    // package set the log level\n    wrappedLogger.level = 'verbose';\n  }\n  return /** @type {AppiumLogger} */ (wrappedLogger);\n}\n\n/**\n * @typedef LoadResult\n * @property {string[]} issues The list of rule parsing issues (one item per rule).\n * Rules with issues are skipped. An empty list is returned if no parsing issues exist.\n * @property {import('./log-internal').SecureValuePreprocessingRule[]} rules The list of successfully loaded\n * replacement rules. The list could be empty if no rules were loaded.\n */\n\n/**\n * Loads the JSON file containing secure values replacement rules.\n * This might be necessary to hide sensitive values that may possibly\n * appear in Appium logs.\n * Each call to this method replaces the previously loaded rules if any existed.\n *\n * @param {string|string[]|import('./log-internal').Rule[]} rulesJsonPath The full path to the JSON file containing\n * the replacement rules. Each rule could either be a string to be replaced\n * or an object with predefined properties. See the `Rule` type definition in\n * `log-internals.js` to get more details on its format.\n * @throws {Error} If the given file cannot be loaded\n * @returns {Promise<LoadResult>}\n */\nasync function loadSecureValuesPreprocessingRules(rulesJsonPath) {\n  const issues = await SECURE_VALUES_PREPROCESSOR.loadRules(rulesJsonPath);\n  return {\n    issues,\n    rules: _.cloneDeep(SECURE_VALUES_PREPROCESSOR.rules),\n  };\n}\n\n// export a default logger with no prefix\nconst log = getLogger();\n\nexport {log, patchLogger, getLogger, loadSecureValuesPreprocessingRules};\nexport default log;\n\n/**\n * @typedef {import('@appium/types').AppiumLoggerPrefix} AppiumLoggerPrefix\n * @typedef {import('@appium/types').AppiumLogger} AppiumLogger\n * @typedef {import('@appium/types').AppiumLoggerLevel} AppiumLoggerLevel\n */\n"],"mappings":";;;;;;;;;;;;;AAEA;;AACA;;AACA;;AACA;;AACA;;;;AAGO,MAAMA,MAAM,GAAG,CAAC,OAAD,EAAU,SAAV,EAAqB,OAArB,EAA8B,MAA9B,EAAsC,MAAtC,EAA8C,MAA9C,EAAsD,OAAtD,CAAf;;AACP,MAAMC,qBAAqB,GAAG,IAA9B;AAEA,MAAMC,uBAAuB,GAAG,cAAhC;AAGA,IAAIC,OAAO,GAAG,EAAd;;AACA,KAAK,IAAIC,KAAT,IAAkBJ,MAAlB,EAA0B;EACxBG,OAAO,CAACC,KAAD,CAAP,GAAiB,MAAM,CAAE,CAAzB;AACD;;AAMD,SAASC,WAAT,CAAqBC,MAArB,EAA6B;EAC3B,IAAI,CAACA,MAAM,CAACC,KAAZ,EAAmB;IACjBD,MAAM,CAACE,QAAP,CAAgB,OAAhB,EAAyB,IAAzB,EAA+B;MAACC,EAAE,EAAE,MAAL;MAAaC,EAAE,EAAE;IAAjB,CAA/B,EAA0D,MAA1D;EACD;AACF;;AAMD,SAASC,UAAT,GAAsB;EAEpB,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,GAA7C;EACA,MAAMC,YAAY,GAAGH,OAAO,CAACC,GAAR,CAAYG,WAAZ,KAA4B,GAAjD;EAIA,MAAMC,cAAc,GAAG,CAAC,CAACC,MAAM,CAACC,cAAhC;EACA,IAAId,MAAJ;;EACA,IAAIM,WAAW,IAAI,CAACI,YAApB,EAAkC;IAEhCV,MAAM,GAAGH,OAAT;EACD,CAHD,MAGO;IAELG,MAAM,GAAGa,MAAM,CAACC,cAAP,IAAyBC,eAAlC;IAEAf,MAAM,CAACgB,aAAP,GAAuBrB,qBAAvB;EACD;;EACDI,WAAW,CAACC,MAAD,CAAX;EACA,OAAO,CAACA,MAAD,EAASY,cAAT,CAAP;AACD;;AAOD,SAASK,eAAT,CAAyBC,MAAzB,EAAiCC,YAAY,GAAG,KAAhD,EAAuD;EACrD,MAAMC,MAAM,GAAG,CAACC,eAAA,CAAEC,UAAF,CAAaJ,MAAb,IAAuBA,MAAM,EAA7B,GAAkCA,MAAnC,KAA8C,EAA7D;EACA,OAAOC,YAAY,GAAI,IAAG,IAAAI,eAAA,IAASC,MAAT,CAAgB5B,uBAAhB,CAAyC,KAAIwB,MAAO,EAA3D,GAA+DA,MAAlF;AACD;;AAOD,SAASK,SAAT,CAAmBP,MAAM,GAAG,IAA5B,EAAkC;EAChC,IAAI,CAAClB,MAAD,EAASY,cAAT,IAA2BP,UAAU,EAAzC;;EAGA,IAAIqB,aAAa,GAAG;IAClBC,MAAM,EAAE,MAAM3B,MADI;IAElB4B,MAAM,EAAElC,MAFU;IAGlBwB;EAHkB,CAApB;EAOAW,MAAM,CAACC,cAAP,CAAsBJ,aAAtB,EAAqC,OAArC,EAA8C;IAC5CK,GAAG,GAAG;MACJ,OAAO/B,MAAM,CAACF,KAAd;IACD,CAH2C;;IAI5CkC,GAAG,CAACC,QAAD,EAAW;MACZjC,MAAM,CAACF,KAAP,GAAemC,QAAf;IACD,CAN2C;;IAO5CC,UAAU,EAAE,IAPgC;IAQ5CC,YAAY,EAAE;EAR8B,CAA9C;EAWA,MAAMhB,YAAY,GAAGZ,OAAO,CAACC,GAAR,CAAY4B,cAAZ,KAA+B,GAApD;;EAGA,KAAK,MAAMtC,KAAX,IAAoBJ,MAApB,EAA4B;IAC1BgC,aAAa,CAAC5B,KAAD,CAAb,GAAmD,UAAU,GAAGuC,IAAb,EAAmB;MACpE,MAAMC,YAAY,GAAGrB,eAAe,CAAC,KAAKC,MAAN,EAAcC,YAAd,CAApC;;MACA,KAAK,MAAMoB,GAAX,IAAkBF,IAAlB,EAAwB;QACtB,MAAMG,GAAG,GAAGnB,eAAA,CAAEoB,OAAF,CAAUF,GAAV,KAAkBA,GAAG,CAACG,KAAtB,GAA8BH,GAAG,CAACG,KAAlC,GAA2C,GAAEH,GAAI,EAA7D;;QACA,KAAK,MAAMI,IAAX,IAAmBH,GAAG,CAACI,KAAJ,CAAU,IAAV,CAAnB,EAAoC;UAGlC,MAAMC,YAAY,GAAG,IAAAC,kBAAA,EAAaH,IAAb,CAArB;UACA3C,MAAM,CAACF,KAAD,CAAN,CAAcwC,YAAd,EAA4BS,oBAAA,CAA2BC,UAA3B,CAAsCH,YAAtC,CAA5B;QACD;MACF;IACF,CAXD;EAYD;;EAEDnB,aAAa,CAACuB,aAAd,GAA8B,UAAUC,GAAV,EAAe;IAC3C,KAAKC,KAAL,CAAWD,GAAX;IAEA,MAAM7B,eAAA,CAAEoB,OAAF,CAAUS,GAAV,IAAiBA,GAAjB,GAAuB,IAAIE,KAAJ,CAAU,IAAAN,kBAAA,EAAaI,GAAb,CAAV,CAA7B;EACD,CAJD;;EAKA,IAAI,CAACtC,cAAL,EAAqB;IAInBc,aAAa,CAAC5B,KAAd,GAAsB,SAAtB;EACD;;EACD,OAAoC4B,aAApC;AACD;;AAuBD,eAAe2B,kCAAf,CAAkDC,aAAlD,EAAiE;EAC/D,MAAMC,MAAM,GAAG,MAAMR,oBAAA,CAA2BS,SAA3B,CAAqCF,aAArC,CAArB;EACA,OAAO;IACLC,MADK;IAELE,KAAK,EAAEpC,eAAA,CAAEqC,SAAF,CAAYX,oBAAA,CAA2BU,KAAvC;EAFF,CAAP;AAID;;AAGD,MAAME,GAAG,GAAGlC,SAAS,EAArB;;eAGekC,G"}