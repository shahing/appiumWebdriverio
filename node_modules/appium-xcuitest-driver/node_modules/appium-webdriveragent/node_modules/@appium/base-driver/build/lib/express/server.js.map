{"version":3,"file":"server.js","names":["KEEP_ALIVE_TIMEOUT_MS","server","opts","routeConfiguringFunction","port","hostname","cliArgs","allowCors","basePath","DEFAULT_BASE_PATH","extraMethodMap","serverUpdaters","keepAliveTimeout","app","express","httpServer","http","createServer","B","resolve","reject","appiumServer","configureHttp","configureServer","addRoutes","updater","all","catch404Handler","startServer","err","normalizeBasePath","use","endLogFormatter","favicon","path","STATIC_DIR","static","produceError","produceCrash","allowCrossDomain","allowCrossDomainAsyncExecute","handleIdempotency","fixPythonContentType","defaultToJSONContentType","bodyParser","urlencoded","extended","methodOverride","catchAllHandler","json","limit","startLogFormatter","welcome","guineaPig","guineaPigScrollable","guineaPigAppBanner","serverState","notifier","EventEmitter","closed","addWebSocketHandler","removeWebSocketHandler","removeAllWebSocketHandlers","getWebSocketHandlers","close","bind","emit","log","info","on","code","error","socket","setTimeout","destroy","_openReqCount","once","removeListener","req","res","connection","start","promisify","listen","context","startPromise","headersTimeout","_","isString","Error","replace"],"sources":["../../../lib/express/server.js"],"sourcesContent":["import _ from 'lodash';\nimport path from 'path';\nimport express from 'express';\nimport http from 'http';\nimport favicon from 'serve-favicon';\nimport bodyParser from 'body-parser';\nimport methodOverride from 'method-override';\nimport log from './logger';\nimport {startLogFormatter, endLogFormatter} from './express-logging';\nimport {\n  allowCrossDomain,\n  fixPythonContentType,\n  defaultToJSONContentType,\n  catchAllHandler,\n  allowCrossDomainAsyncExecute,\n  handleIdempotency,\n  catch404Handler,\n} from './middleware';\nimport {guineaPig, guineaPigScrollable, guineaPigAppBanner, welcome, STATIC_DIR} from './static';\nimport {produceError, produceCrash} from './crash';\nimport {\n  addWebSocketHandler,\n  removeWebSocketHandler,\n  removeAllWebSocketHandlers,\n  getWebSocketHandlers,\n} from './websocket';\nimport B from 'bluebird';\nimport {DEFAULT_BASE_PATH} from '../constants';\nimport {EventEmitter} from 'events';\n\nconst KEEP_ALIVE_TIMEOUT_MS = 10 * 60 * 1000; // 10 minutes\n\n/**\n *\n * @param {ServerOpts} opts\n * @returns {Promise<AppiumServer>}\n */\nasync function server(opts) {\n  const {\n    routeConfiguringFunction,\n    port,\n    hostname,\n    cliArgs,\n    allowCors = true,\n    basePath = DEFAULT_BASE_PATH,\n    extraMethodMap = {},\n    serverUpdaters = [],\n    keepAliveTimeout = KEEP_ALIVE_TIMEOUT_MS,\n  } = opts;\n\n  // create the actual http server\n  const app = express();\n  const httpServer = http.createServer(app);\n  return await new B(async (resolve, reject) => {\n    // we put an async function as the promise constructor because we want some things to happen in\n    // serial (application of plugin updates, for example). But we still need to use a promise here\n    // because some elements of server start failure only happen in httpServer listeners. So the\n    // way we resolve it is to use an async function here but to wrap all the inner logic in\n    // try/catch so any errors can be passed to reject.\n    try {\n      const appiumServer = configureHttp({\n        httpServer,\n        reject,\n        keepAliveTimeout,\n      });\n      configureServer({\n        app,\n        addRoutes: routeConfiguringFunction,\n        allowCors,\n        basePath,\n        extraMethodMap,\n      });\n      // allow extensions to update the app and http server objects\n      for (const updater of serverUpdaters) {\n        await updater(app, appiumServer, cliArgs);\n      }\n\n      // once all configurations and updaters have been applied, make sure to set up a catchall\n      // handler so that anything unknown 404s. But do this after everything else since we don't\n      // want to block extensions' ability to add routes if they want.\n      app.all('*', catch404Handler);\n\n      await startServer({httpServer, hostname, port, keepAliveTimeout});\n\n      resolve(appiumServer);\n    } catch (err) {\n      reject(err);\n    }\n  });\n}\n\n/**\n * Sets up some Express middleware and stuff\n * @param {ConfigureServerOpts} opts\n */\nfunction configureServer({\n  app,\n  addRoutes,\n  allowCors = true,\n  basePath = DEFAULT_BASE_PATH,\n  extraMethodMap = {},\n}) {\n  basePath = normalizeBasePath(basePath);\n\n  app.use(endLogFormatter);\n\n  // set up static assets\n  app.use(favicon(path.resolve(STATIC_DIR, 'favicon.ico')));\n  app.use(express.static(STATIC_DIR));\n\n  // crash routes, for testing\n  app.use(`${basePath}/produce_error`, produceError);\n  app.use(`${basePath}/crash`, produceCrash);\n\n  // add middlewares\n  if (allowCors) {\n    app.use(allowCrossDomain);\n  } else {\n    app.use(allowCrossDomainAsyncExecute(basePath));\n  }\n  app.use(handleIdempotency);\n  app.use(fixPythonContentType(basePath));\n  app.use(defaultToJSONContentType);\n  app.use(bodyParser.urlencoded({extended: true}));\n  app.use(methodOverride());\n  app.use(catchAllHandler);\n\n  // make sure appium never fails because of a file size upload limit\n  app.use(bodyParser.json({limit: '1gb'}));\n\n  // set up start logging (which depends on bodyParser doing its thing)\n  app.use(startLogFormatter);\n\n  addRoutes(app, {basePath, extraMethodMap});\n\n  // dynamic routes for testing, etc.\n  app.all('/welcome', welcome);\n  app.all('/test/guinea-pig', guineaPig);\n  app.all('/test/guinea-pig-scrollable', guineaPigScrollable);\n  app.all('/test/guinea-pig-app-banner', guineaPigAppBanner);\n}\n\n/**\n * Monkeypatches the `http.Server` instance and returns a {@linkcode AppiumServer}.\n * This function _mutates_ the `httpServer` parameter.\n * @param {ConfigureHttpOpts} opts\n * @returns {AppiumServer}\n */\nfunction configureHttp({httpServer, reject, keepAliveTimeout}) {\n  const serverState = {\n    notifier: new EventEmitter(),\n    closed: false,\n  };\n  // TS does not love monkeypatching.\n  const appiumServer = /** @type {AppiumServer} */ (/** @type {unknown} */ (httpServer));\n  appiumServer.addWebSocketHandler = addWebSocketHandler;\n  appiumServer.removeWebSocketHandler = removeWebSocketHandler;\n  appiumServer.removeAllWebSocketHandlers = removeAllWebSocketHandlers;\n  appiumServer.getWebSocketHandlers = getWebSocketHandlers;\n\n  // http.Server.close() only stops new connections, but we need to wait until\n  // all connections are closed and the `close` event is emitted\n  const close = appiumServer.close.bind(appiumServer);\n  appiumServer.close = async () =>\n    await new B((resolve, reject) => {\n      // https://github.com/nodejs/node-v0.x-archive/issues/9066#issuecomment-124210576\n      serverState.closed = true;\n      serverState.notifier.emit('shutdown');\n      log.info('Waiting until the server is closed');\n      httpServer.on('close', () => {\n        log.info('Received server close event');\n        resolve();\n      });\n      close((err) => {\n        if (err) reject(err); // eslint-disable-line curly\n      });\n    });\n\n  appiumServer.on(\n    'error',\n    /** @param {NodeJS.ErrnoException} err */ (err) => {\n      if (err.code === 'EADDRNOTAVAIL') {\n        log.error(\n          'Could not start REST http interface listener. ' + 'Requested address is not available.'\n        );\n      } else {\n        log.error(\n          'Could not start REST http interface listener. The requested ' +\n            'port may already be in use. Please make sure there is no ' +\n            'other instance of this server running already.'\n        );\n      }\n      reject(err);\n    }\n  );\n\n  appiumServer.on(\n    'connection',\n    /** @param {AppiumServerSocket} socket */ (socket) => {\n      socket.setTimeout(keepAliveTimeout);\n      socket.on('error', reject);\n\n      function destroy() {\n        socket.destroy();\n      }\n      socket._openReqCount = 0;\n      socket.once('close', () => serverState.notifier.removeListener('shutdown', destroy));\n      serverState.notifier.once('shutdown', destroy);\n    }\n  );\n\n  appiumServer.on('request', function (req, res) {\n    const socket = /** @type {AppiumServerSocket} */ (req.connection || req.socket);\n    socket._openReqCount++;\n    res.on('finish', function () {\n      socket._openReqCount--;\n      if (serverState.closed && socket._openReqCount === 0) {\n        socket.destroy();\n      }\n    });\n  });\n\n  return appiumServer;\n}\n\n/**\n * Starts an {@linkcode AppiumServer}\n * @param {StartServerOpts} opts\n * @returns {Promise<void>}\n */\nasync function startServer({httpServer, port, hostname, keepAliveTimeout}) {\n  // If the hostname is omitted, the server will accept\n  // connections on any IP address\n  /** @type {(port: number, hostname?: string) => B<http.Server>} */\n  const start = B.promisify(httpServer.listen, {context: httpServer});\n  const startPromise = start(port, hostname);\n  httpServer.keepAliveTimeout = keepAliveTimeout;\n  // headers timeout must be greater than keepAliveTimeout\n  httpServer.headersTimeout = keepAliveTimeout + 5 * 1000;\n  await startPromise;\n}\n\n/**\n * Normalize base path string\n * @param {string} basePath\n * @returns {string}\n */\nfunction normalizeBasePath(basePath) {\n  if (!_.isString(basePath)) {\n    throw new Error(`Invalid path prefix ${basePath}`);\n  }\n\n  // ensure the path prefix does not end in '/', since our method map\n  // starts all paths with '/'\n  basePath = basePath.replace(/\\/$/, '');\n\n  // likewise, ensure the path prefix does always START with /, unless the path\n  // is empty meaning no base path at all\n  if (basePath !== '' && basePath[0] !== '/') {\n    basePath = `/${basePath}`;\n  }\n\n  return basePath;\n}\n\nexport {server, configureServer, normalizeBasePath};\n\n/**\n * Options for {@linkcode startServer}.\n * @typedef StartServerOpts\n * @property {import('http').Server} httpServer - HTTP server instance\n * @property {number} port - Port to run on\n * @property {number} keepAliveTimeout - Keep-alive timeout in milliseconds\n * @property {string} [hostname] - Optional hostname\n */\n\n/**\n * @typedef {import('@appium/types').AppiumServer} AppiumServer\n * @typedef {import('@appium/types').AppiumServerSocket} AppiumServerSocket\n * @typedef {import('@appium/types').MethodMap} MethodMap\n */\n\n/**\n * Options for {@linkcode configureHttp}\n * @typedef ConfigureHttpOpts\n * @property {import('http').Server} httpServer - HTTP server instance\n * @property {(error?: any) => void} reject - Rejection function from `Promise` constructor\n * @property {number} keepAliveTimeout - Keep-alive timeout in milliseconds\n */\n\n/**\n * Options for {@linkcode server}\n * @typedef ServerOpts\n * @property {RouteConfiguringFunction} routeConfiguringFunction\n * @property {number} port\n * @property {import('@appium/types').ServerArgs} cliArgs\n * @property {string} [hostname]\n * @property {boolean} [allowCors]\n * @property {string} [basePath]\n * @property {MethodMap} [extraMethodMap]\n * @property {import('@appium/types').UpdateServerCallback[]} [serverUpdaters]\n * @property {number} [keepAliveTimeout]\n */\n\n/**\n * A function which configures routes\n * @callback RouteConfiguringFunction\n * @param {import('express').Express} app\n * @param {RouteConfiguringFunctionOpts} [opts]\n * @returns {void}\n */\n\n/**\n * Options for a {@linkcode RouteConfiguringFunction}\n * @typedef RouteConfiguringFunctionOpts\n * @property {string} [basePath]\n * @property {MethodMap} [extraMethodMap]\n */\n\n/**\n * Options for {@linkcode configureServer}\n * @typedef ConfigureServerOpts\n * @property {import('express').Express} app\n * @property {RouteConfiguringFunction} addRoutes\n * @property {boolean} [allowCors]\n * @property {string} [basePath]\n * @property {MethodMap} [extraMethodMap]\n */\n"],"mappings":"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"}