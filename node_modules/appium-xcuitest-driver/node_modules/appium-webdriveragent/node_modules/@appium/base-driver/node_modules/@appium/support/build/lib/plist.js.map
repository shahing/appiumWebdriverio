{"version":3,"file":"plist.js","names":["BPLIST_IDENTIFIER","BUFFER","Buffer","from","TEXT","PLIST_IDENTIFIER","parseXmlPlistFile","plistFilename","xmlContent","fs","readFile","xmlplist","parse","parsePlistFile","plist","mustExist","quiet","exists","log","errorAndThrow","debug","obj","type","bplistParse","parseFile","length","Error","ign","err","message","updatePlistFile","updatedFields","binary","_","extend","newPlist","bplistCreate","build","writeFile","createBinaryPlist","data","parseBinaryPlist","parseBuffer","getXmlPlist","isString","startsWith","isBuffer","compare","toString","getBinaryPlist","createPlist","object","parsePlist","textPlist","binaryPlist"],"sources":["../../lib/plist.js"],"sourcesContent":["import xmlplist from 'plist';\nimport bplistCreate from 'bplist-creator';\nimport bplistParse from 'bplist-parser';\nimport fs from './fs';\nimport log from './logger';\nimport _ from 'lodash';\n\nconst BPLIST_IDENTIFIER = {\n  BUFFER: Buffer.from('bplist00'),\n  TEXT: 'bplist00',\n};\nconst PLIST_IDENTIFIER = {\n  BUFFER: Buffer.from('<'),\n  TEXT: '<',\n};\n\n// XML Plist library helper\nasync function parseXmlPlistFile(plistFilename) {\n  let xmlContent = await fs.readFile(plistFilename, 'utf8');\n  return xmlplist.parse(xmlContent);\n}\n\n/**\n * Parses a file in xml or binary format of plist\n * @param {string} plist The plist file path\n * @param {boolean} mustExist If set to false, this method will return an empty object when the file doesn't exist\n * @param {boolean} quiet If set to false, the plist path will be logged in debug level\n * @returns {Promise<any>} parsed plist JS Object\n */\nasync function parsePlistFile(plist, mustExist = true, quiet = true) {\n  // handle nonexistant file\n  if (!(await fs.exists(plist))) {\n    if (mustExist) {\n      log.errorAndThrow(`Plist file doesn't exist: '${plist}'`);\n    } else {\n      log.debug(`Plist file '${plist}' does not exist. Returning an empty plist.`);\n      return {};\n    }\n  }\n\n  let obj = {};\n  let type = 'binary';\n  try {\n    obj = await bplistParse.parseFile(plist);\n    if (obj.length) {\n      obj = obj[0];\n    } else {\n      throw new Error(`Binary file '${plist}'' appears to be empty`);\n    }\n  } catch (ign) {\n    try {\n      obj = await parseXmlPlistFile(plist);\n      type = 'xml';\n    } catch (err) {\n      log.errorAndThrow(`Could not parse plist file '${plist}' as XML: ${err.message}`);\n    }\n  }\n\n  if (!quiet) {\n    log.debug(`Parsed plist file '${plist}' as ${type}`);\n  }\n  return obj;\n}\n\n/**\n * Updates a plist file with the given fields\n * @param {string} plist The plist file path\n * @param {Object} updatedFields The updated fields-value pairs\n * @param {boolean} binary If set to false, the file will be created as a xml plist\n * @param {boolean} mustExist If set to false, this method will update an empty plist\n * @param {boolean} quiet If set to false, the plist path will be logged in debug level\n */\nasync function updatePlistFile(\n  plist,\n  updatedFields,\n  binary = true,\n  mustExist = true,\n  quiet = true\n) {\n  let obj;\n  try {\n    obj = await parsePlistFile(plist, mustExist);\n  } catch (err) {\n    log.errorAndThrow(`Could not update plist: ${err.message}`);\n  }\n  _.extend(obj, updatedFields);\n  let newPlist = binary ? bplistCreate(obj) : xmlplist.build(obj);\n  try {\n    await fs.writeFile(plist, newPlist);\n  } catch (err) {\n    log.errorAndThrow(`Could not save plist: ${err.message}`);\n  }\n  if (!quiet) {\n    log.debug(`Wrote plist file '${plist}'`);\n  }\n}\n/**\n * Creates a binary plist Buffer from an object\n * @param {Object} data The object to be turned into a binary plist\n * @returns {Buffer} plist in the form of a binary buffer\n */\nfunction createBinaryPlist(data) {\n  return bplistCreate(data);\n}\n\n/**\n * Parses a Buffer into an Object\n * @param {Buffer} data The beffer of a binary plist\n */\nfunction parseBinaryPlist(data) {\n  return bplistParse.parseBuffer(data);\n}\n\nfunction getXmlPlist(data) {\n  if (_.isString(data) && data.startsWith(PLIST_IDENTIFIER.TEXT)) {\n    return data;\n  }\n  if (\n    _.isBuffer(data) &&\n    PLIST_IDENTIFIER.BUFFER.compare(data, 0, PLIST_IDENTIFIER.BUFFER.length) === 0\n  ) {\n    return data.toString();\n  }\n  return null;\n}\n\nfunction getBinaryPlist(data) {\n  if (_.isString(data) && data.startsWith(BPLIST_IDENTIFIER.TEXT)) {\n    return Buffer.from(data);\n  }\n\n  if (\n    _.isBuffer(data) &&\n    BPLIST_IDENTIFIER.BUFFER.compare(data, 0, BPLIST_IDENTIFIER.BUFFER.length) === 0\n  ) {\n    return data;\n  }\n  return null;\n}\n\n/**\n * Creates a plist from an object\n * @param {Object} object The JS object to be turned into a plist\n * @param {boolean} binary Set it to true for a binary plist\n * @returns {string|Buffer} returns a buffer or a string in respect to the binary parameter\n */\nfunction createPlist(object, binary = false) {\n  if (binary) {\n    return createBinaryPlist(object);\n  } else {\n    return xmlplist.build(object);\n  }\n}\n\n/**\n * Parses an buffer or a string to a JS object a plist from an object\n * @param {string|Buffer} data The plist in the form of string or Buffer\n * @returns {Object} parsed plist JS Object\n * @throws Will throw an error if the plist type is unknown\n */\nfunction parsePlist(data) {\n  let textPlist = getXmlPlist(data);\n  if (textPlist) {\n    return xmlplist.parse(textPlist);\n  }\n\n  let binaryPlist = getBinaryPlist(data);\n  if (binaryPlist) {\n    return parseBinaryPlist(binaryPlist)[0];\n  }\n\n  throw new Error(`Unknown type of plist, data: ${data.toString()}`);\n}\n\nexport {\n  parsePlistFile,\n  parsePlist,\n  createPlist,\n  updatePlistFile,\n  createBinaryPlist,\n  parseBinaryPlist,\n};\n"],"mappings":"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"}