{"version":3,"file":"env.js","names":["DEFAULT_APPIUM_HOME","path","resolve","homedir","MANIFEST_BASENAME","MANIFEST_RELATIVE_PATH","join","OLD_VERSION_REGEX","hasAppiumDependency","cwd","Boolean","findAppiumDependencyPackage","_","memoize","process","readPkg","pkgPath","pkg","readPackageInDir","version","dependencies","appium","devDependencies","peerDependencies","test","String","undefined","log","debug","pkgDir","json","list","npm","exec","_readPackageInDir","normalize","resolveAppiumHome","_resolveAppiumHome","isAbsolute","TypeError","env","APPIUM_HOME","resolveManifestPath","_resolveManifestPath","appiumHome"],"sources":["../../lib/env.js"],"sourcesContent":["// @ts-check\nimport _ from 'lodash';\nimport {homedir} from 'os';\nimport path from 'path';\nimport readPkg from 'read-pkg';\nimport {npm} from './npm';\nimport log from './logger';\n\n/**\n * Path to the default `APPIUM_HOME` dir (`~/.appium`).\n * @type {string}\n */\nexport const DEFAULT_APPIUM_HOME = path.resolve(homedir(), '.appium');\n\n/**\n * Basename of extension manifest file.\n * @type {string}\n */\nexport const MANIFEST_BASENAME = 'extensions.yaml';\n\n/**\n * Relative path to extension manifest file from `APPIUM_HOME`.\n * @type {string}\n */\nexport const MANIFEST_RELATIVE_PATH = path.join(\n  'node_modules',\n  '.cache',\n  'appium',\n  MANIFEST_BASENAME\n);\n\nconst OLD_VERSION_REGEX = /^[01]/;\n\n/**\n * Resolves `true` if an `appium` dependency can be found somewhere in the given `cwd`.\n *\n * @param {string} cwd\n * @returns {Promise<boolean>}\n */\nexport async function hasAppiumDependency(cwd) {\n  return Boolean(await findAppiumDependencyPackage(cwd));\n}\n\n/**\n * Given `cwd`, use `npm` to find the closest package _or workspace root_, and return the path if the root depends upon `appium`.\n *\n * Looks at `dependencies` and `devDependencies` for `appium`.\n */\nexport const findAppiumDependencyPackage = _.memoize(\n  /**\n   * @param {string} [cwd]\n   * @returns {Promise<string|undefined>}\n   */\n  async (cwd = process.cwd()) => {\n    /**\n     * Tries to read `package.json` in `cwd` and resolves the identity if it depends on `appium`;\n     * otherwise resolves `undefined`.\n     * @param {string} cwd\n     * @returns {Promise<string|undefined>}\n     */\n    const readPkg = async (cwd) => {\n      /** @type {string|undefined} */\n      let pkgPath;\n      try {\n        const pkg = await readPackageInDir(cwd);\n        const version =\n          pkg?.dependencies?.appium ??\n          pkg?.devDependencies?.appium ??\n          pkg?.peerDependencies?.appium;\n        pkgPath = version && !OLD_VERSION_REGEX.test(String(version)) ? cwd : undefined;\n      } catch {}\n      if (pkgPath) {\n        log.debug(`Found package.json having current Appium dep in ${pkgPath}`);\n      } else {\n        log.debug(`No package.json having current Appium dep in ${cwd}`);\n      }\n      return pkgPath;\n    };\n\n    cwd = path.resolve(cwd);\n\n    /** @type {string} */\n    let pkgDir;\n    try {\n      const {json: list} = await npm.exec('list', ['--long', '--json'], {cwd});\n      ({path: pkgDir} = list);\n      if (pkgDir) {\n        log.debug(`Determined package/workspace root from ${cwd} => ${pkgDir}`);\n      } else {\n        pkgDir = cwd;\n      }\n    } catch {\n      pkgDir = cwd;\n    }\n    return await readPkg(pkgDir);\n  }\n);\n\n/**\n * Read a `package.json` in dir `cwd`.  If none found, return `undefined`.\n */\nexport const readPackageInDir = _.memoize(\n  /**\n   *\n   * @param {string} cwd - Directory ostensibly having a `package.json`\n   * @returns {Promise<import('read-pkg').NormalizedPackageJson|undefined>}\n   */\n  async function _readPackageInDir(cwd) {\n    return await readPkg({cwd, normalize: true});\n  }\n);\n\n/**\n * Determines location of Appium's \"home\" dir\n *\n * - If `APPIUM_HOME` is set in the environment, use that\n * - If we find a `package.json` in or above `cwd` and it has an `appium` dependency, use that.\n *\n * All returned paths will be absolute.\n */\nexport const resolveAppiumHome = _.memoize(\n  /**\n   * @param {string} [cwd] - Current working directory.  _Must_ be absolute, if specified.\n   * @returns {Promise<string>}\n   */\n  async function _resolveAppiumHome(cwd = process.cwd()) {\n    if (!path.isAbsolute(cwd)) {\n      throw new TypeError('`cwd` parameter must be an absolute path');\n    }\n\n    if (process.env.APPIUM_HOME) {\n      log.debug(`Using APPIUM_HOME from env: ${process.env.APPIUM_HOME}`);\n      return path.resolve(cwd, process.env.APPIUM_HOME);\n    }\n\n    const pkgPath = await findAppiumDependencyPackage(cwd);\n    if (pkgPath) {\n      return pkgPath;\n    }\n    log.debug(`Using default APPIUM_HOME: ${DEFAULT_APPIUM_HOME}`);\n    return DEFAULT_APPIUM_HOME;\n  }\n);\n\n/**\n * Figure out manifest path based on `appiumHome`.\n *\n * The assumption is that, if `appiumHome` has been provided, it was resolved via {@link resolveAppiumHome `resolveAppiumHome()`}!  If unsure,\n * don't pass a parameter and let `resolveAppiumHome()` handle it.\n */\nexport const resolveManifestPath = _.memoize(\n  /**\n   * @param {string} [appiumHome] - Appium home directory\n   * @returns {Promise<string>}\n   */\n  async function _resolveManifestPath(appiumHome) {\n    // can you \"await\" in a default parameter? is that a good idea?\n    appiumHome = appiumHome ?? (await resolveAppiumHome());\n    return path.join(appiumHome, MANIFEST_RELATIVE_PATH);\n  }\n);\n\n/**\n * @typedef {import('read-pkg').NormalizedPackageJson} NormalizedPackageJson\n */\n"],"mappings":"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"}