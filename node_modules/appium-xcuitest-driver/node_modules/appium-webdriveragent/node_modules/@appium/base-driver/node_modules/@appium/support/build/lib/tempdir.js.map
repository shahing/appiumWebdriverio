{"version":3,"file":"tempdir.js","names":["RDWR_EXCL","cnst","O_CREAT","O_TRUNC","O_RDWR","O_EXCL","tempDir","now","Date","filePath","nodePath","join","process","env","APPIUM_TMP_DIR","os","tmpdir","getFullYear","getMonth","getDate","pid","Math","random","toString","fs","mkdir","path","rawAffixes","defaultPrefix","affixes","parseAffixes","name","prefix","suffix","tempDirectory","open","fd","err","log","errorAndThrow","Error","_static","openDir","staticDir"],"sources":["../../lib/tempdir.js"],"sourcesContent":["/* This library is originated from temp.js at http://github.com/bruce/node-temp */\nimport fs from './fs';\nimport os from 'os';\nimport nodePath from 'path';\nimport cnst from 'constants';\nimport log from './logger';\n\nconst RDWR_EXCL = cnst.O_CREAT | cnst.O_TRUNC | cnst.O_RDWR | cnst.O_EXCL;\n\n/**\n * Generate a temporary directory in os.tempdir() or process.env.APPIUM_TMP_DIR.\n * e.g.\n * - No `process.env.APPIUM_TMP_DIR`: `/var/folders/34/2222sh8n27d6rcp7jqlkw8km0000gn/T/xxxxxxxx.yyyy`\n * - With `process.env.APPIUM_TMP_DIR = '/path/to/root'`: `/path/to/root/xxxxxxxx.yyyy`\n *\n * @returns {Promise<string>} A path to the temporary directory\n */\nasync function tempDir() {\n  const now = new Date();\n  const filePath = nodePath.join(\n    process.env.APPIUM_TMP_DIR || os.tmpdir(),\n    [\n      now.getFullYear(),\n      now.getMonth(),\n      now.getDate(),\n      '-',\n      process.pid,\n      '-',\n      (Math.random() * 0x100000000 + 1).toString(36),\n    ].join('')\n  );\n  // creates a temp directory using the date and a random string\n\n  await fs.mkdir(filePath);\n\n  return filePath;\n}\n\n/**\n * @typedef Affixes\n * @property {string} [prefix] - prefix of the temp directory name\n * @property {string} [suffix] - suffix of the temp directory name\n */\n\n/**\n * Generate a temporary directory in os.tempdir() or process.env.APPIUM_TMP_DIR\n * with arbitrary prefix/suffix for the directory name.\n *\n * @param {string|Affixes} rawAffixes\n * @param {string} [defaultPrefix]\n * @returns {Promise<string>}  A path to the temporary directory with rawAffixes and defaultPrefix\n */\nasync function path(rawAffixes, defaultPrefix) {\n  const affixes = parseAffixes(rawAffixes, defaultPrefix);\n  const name = `${affixes.prefix || ''}${affixes.suffix || ''}`;\n  const tempDirectory = await tempDir();\n  return nodePath.join(tempDirectory, name);\n}\n\n/**\n * @typedef OpenedAffixes\n * @property {string} path - The path to file\n * @property {number} fd - The file descriptor opened\n */\n\n/**\n * Generate a temporary directory in os.tempdir() or process.env.APPIUM_TMP_DIR\n * with arbitrary prefix/suffix for the directory name and return it as open.\n *\n * @param {Affixes} affixes\n * @returns {Promise<OpenedAffixes>}\n */\nasync function open(affixes) {\n  const filePath = await path(affixes, 'f-');\n  try {\n    let fd = await fs.open(filePath, RDWR_EXCL, 0o600);\n    // opens the file in mode 384\n    return {path: filePath, fd};\n  } catch (err) {\n    return log.errorAndThrow(err);\n  }\n}\n\n/**\n *\n * Returns prefix/suffix object\n *\n * @param {string|Affixes} rawAffixes\n * @param {string} [defaultPrefix]\n * @returns {Affixes}\n */\nfunction parseAffixes(rawAffixes, defaultPrefix) {\n  /** @type {Affixes} */\n  let affixes = {};\n  if (rawAffixes) {\n    switch (typeof rawAffixes) {\n      case 'string':\n        affixes.prefix = rawAffixes;\n        break;\n      case 'object':\n        affixes = rawAffixes;\n        break;\n      default:\n        throw new Error(`Unknown affix declaration: ${affixes}`);\n    }\n  } else {\n    affixes.prefix = defaultPrefix;\n  }\n  return affixes;\n}\n\nconst _static = tempDir();\n\n/**\n * Returns a new path to a temporary directory\n *\n * @returns {string} A new tempDir() if tempRootDirectory is not provided\n */\nconst openDir = tempDir;\n\n/**\n * Returns a path to a temporary directory whcih is defined as static in the same process\n *\n * @returns {Promise<string>} A temp directory path whcih is defined as static in the same process\n */\n// eslint-disable-next-line require-await\nasync function staticDir() {\n  return _static;\n}\n\nexport {open, path, openDir, staticDir};\n"],"mappings":";;;;;;;;;;;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAMA,SAAS,GAAGC,kBAAA,CAAKC,OAAL,GAAeD,kBAAA,CAAKE,OAApB,GAA8BF,kBAAA,CAAKG,MAAnC,GAA4CH,kBAAA,CAAKI,MAAnE;;AAUA,eAAeC,OAAf,GAAyB;EACvB,MAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;EACA,MAAMC,QAAQ,GAAGC,aAAA,CAASC,IAAT,CACfC,OAAO,CAACC,GAAR,CAAYC,cAAZ,IAA8BC,WAAA,CAAGC,MAAH,EADf,EAEf,CACET,GAAG,CAACU,WAAJ,EADF,EAEEV,GAAG,CAACW,QAAJ,EAFF,EAGEX,GAAG,CAACY,OAAJ,EAHF,EAIE,GAJF,EAKEP,OAAO,CAACQ,GALV,EAME,GANF,EAOE,CAACC,IAAI,CAACC,MAAL,KAAgB,WAAhB,GAA8B,CAA/B,EAAkCC,QAAlC,CAA2C,EAA3C,CAPF,EAQEZ,IARF,CAQO,EARP,CAFe,CAAjB;;EAcA,MAAMa,WAAA,CAAGC,KAAH,CAAShB,QAAT,CAAN;EAEA,OAAOA,QAAP;AACD;;AAgBD,eAAeiB,IAAf,CAAoBC,UAApB,EAAgCC,aAAhC,EAA+C;EAC7C,MAAMC,OAAO,GAAGC,YAAY,CAACH,UAAD,EAAaC,aAAb,CAA5B;EACA,MAAMG,IAAI,GAAI,GAAEF,OAAO,CAACG,MAAR,IAAkB,EAAG,GAAEH,OAAO,CAACI,MAAR,IAAkB,EAAG,EAA5D;EACA,MAAMC,aAAa,GAAG,MAAM5B,OAAO,EAAnC;EACA,OAAOI,aAAA,CAASC,IAAT,CAAcuB,aAAd,EAA6BH,IAA7B,CAAP;AACD;;AAeD,eAAeI,IAAf,CAAoBN,OAApB,EAA6B;EAC3B,MAAMpB,QAAQ,GAAG,MAAMiB,IAAI,CAACG,OAAD,EAAU,IAAV,CAA3B;;EACA,IAAI;IACF,IAAIO,EAAE,GAAG,MAAMZ,WAAA,CAAGW,IAAH,CAAQ1B,QAAR,EAAkBT,SAAlB,EAA6B,KAA7B,CAAf;IAEA,OAAO;MAAC0B,IAAI,EAAEjB,QAAP;MAAiB2B;IAAjB,CAAP;EACD,CAJD,CAIE,OAAOC,GAAP,EAAY;IACZ,OAAOC,eAAA,CAAIC,aAAJ,CAAkBF,GAAlB,CAAP;EACD;AACF;;AAUD,SAASP,YAAT,CAAsBH,UAAtB,EAAkCC,aAAlC,EAAiD;EAE/C,IAAIC,OAAO,GAAG,EAAd;;EACA,IAAIF,UAAJ,EAAgB;IACd,QAAQ,OAAOA,UAAf;MACE,KAAK,QAAL;QACEE,OAAO,CAACG,MAAR,GAAiBL,UAAjB;QACA;;MACF,KAAK,QAAL;QACEE,OAAO,GAAGF,UAAV;QACA;;MACF;QACE,MAAM,IAAIa,KAAJ,CAAW,8BAA6BX,OAAQ,EAAhD,CAAN;IARJ;EAUD,CAXD,MAWO;IACLA,OAAO,CAACG,MAAR,GAAiBJ,aAAjB;EACD;;EACD,OAAOC,OAAP;AACD;;AAED,MAAMY,OAAO,GAAGnC,OAAO,EAAvB;;AAOA,MAAMoC,OAAO,GAAGpC,OAAhB;;;AAQA,eAAeqC,SAAf,GAA2B;EACzB,OAAOF,OAAP;AACD"}