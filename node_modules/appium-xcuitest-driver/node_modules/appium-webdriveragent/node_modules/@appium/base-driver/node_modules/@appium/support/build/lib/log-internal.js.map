{"version":3,"file":"log-internal.js","names":["DEFAULT_REPLACER","SecureValuesPreprocessor","constructor","_rules","rules","parseRule","rule","pattern","replacer","flags","_","isString","length","Error","JSON","stringify","escapeRegExp","isPlainObject","has","text","flag","includes","push","uniq","RegExp","join","loadRules","source","isArray","fs","exists","parse","readFile","e","message","issues","preprocess","str","result","replace","SECURE_VALUES_PREPROCESSOR"],"sources":["../../lib/log-internal.js"],"sourcesContent":["import fs from './fs';\nimport _ from 'lodash';\n\nconst DEFAULT_REPLACER = '**SECURE**';\n\nclass SecureValuesPreprocessor {\n  constructor() {\n    this._rules = [];\n  }\n\n  /**\n   * @returns {Array<SecureValuePreprocessingRule>} The list of successfully\n   * parsed preprocessing rules\n   */\n  get rules() {\n    return this._rules;\n  }\n\n  /**\n   * Parses single rule from the given JSON file\n   *\n   * @param {string|Rule} rule The rule might either be represented as a single string\n   * or a configuration object\n   * @throws {Error} If there was an error while parsing the rule\n   * @returns {SecureValuePreprocessingRule} The parsed rule\n   */\n  parseRule(rule) {\n    let pattern;\n    let replacer = DEFAULT_REPLACER;\n    let flags = ['g'];\n    if (_.isString(rule)) {\n      if (rule.length === 0) {\n        throw new Error(`${JSON.stringify(rule)} -> The value must not be empty`);\n      }\n      pattern = `\\\\b${_.escapeRegExp(rule)}\\\\b`;\n    } else if (_.isPlainObject(rule)) {\n      if (_.has(rule, 'pattern')) {\n        if (!_.isString(rule.pattern) || rule.pattern.length === 0) {\n          throw new Error(\n            `${JSON.stringify(rule)} -> The value of 'pattern' must be a valid non-empty string`\n          );\n        }\n        pattern = rule.pattern;\n      } else if (_.has(rule, 'text')) {\n        if (!_.isString(rule.text) || rule.text.length === 0) {\n          throw new Error(\n            `${JSON.stringify(rule)} -> The value of 'text' must be a valid non-empty string`\n          );\n        }\n        pattern = `\\\\b${_.escapeRegExp(rule.text)}\\\\b`;\n      }\n      if (!pattern) {\n        throw new Error(\n          `${JSON.stringify(rule)} -> Must either have a field named 'pattern' or 'text'`\n        );\n      }\n\n      if (_.has(rule, 'flags')) {\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2\n        for (const flag of ['i', 'g', 'm', 's', 'u', 'y']) {\n          if (_.includes(rule.flags, flag)) {\n            flags.push(flag);\n          }\n        }\n        flags = _.uniq(flags);\n      }\n\n      if (_.isString(rule.replacer)) {\n        replacer = rule.replacer;\n      }\n    } else {\n      throw new Error(`${JSON.stringify(rule)} -> Must either be a string or an object`);\n    }\n\n    return {\n      pattern: new RegExp(pattern, flags.join('')),\n      replacer,\n    };\n  }\n\n  /**\n   * Loads rules from the given JSON file\n   *\n   * @param {string|string[]|Rule[]} source The full path to the JSON file containing secure\n   * values replacement rules or the rules themselves represented as an array\n   * @throws {Error} If the format of the source file is invalid or\n   * it does not exist\n   * @returns {Promise<string[]>} The list of issues found while parsing each rule.\n   * An empty list is returned if no rule parsing issues were found\n   */\n  async loadRules(source) {\n    let rules;\n    if (_.isArray(source)) {\n      rules = source;\n    } else {\n      if (!(await fs.exists(source))) {\n        throw new Error(`'${source}' does not exist or is not accessible`);\n      }\n      try {\n        rules = JSON.parse(await fs.readFile(source, 'utf8'));\n      } catch (e) {\n        throw new Error(`'${source}' must be a valid JSON file. Original error: ${e.message}`);\n      }\n      if (!_.isArray(rules)) {\n        throw new Error(`'${source}' must contain a valid JSON array`);\n      }\n    }\n\n    const issues = [];\n    this._rules = [];\n    for (const rule of rules) {\n      try {\n        this._rules.push(this.parseRule(rule));\n      } catch (e) {\n        issues.push(e.message);\n      }\n    }\n    return issues;\n  }\n\n  /**\n   * Performs secure values replacement inside the given string\n   * according to the previously loaded rules. No replacement is made\n   * if there are no rules or the given value is not a string\n   *\n   * @param {string} str The string to make replacements in\n   * @returns {string} The string with replacements made\n   */\n  preprocess(str) {\n    if (this._rules.length === 0 || !_.isString(str)) {\n      return str;\n    }\n\n    let result = str;\n    for (const rule of this._rules) {\n      result = result.replace(rule.pattern, rule.replacer);\n    }\n    return result;\n  }\n}\n\nconst SECURE_VALUES_PREPROCESSOR = new SecureValuesPreprocessor();\n\nexport {SECURE_VALUES_PREPROCESSOR, SecureValuesPreprocessor};\nexport default SECURE_VALUES_PREPROCESSOR;\n\n/**\n * @typedef Rule\n * @property {string} pattern A valid RegExp pattern to be replaced\n * @property {string} text A text match to replace. Either this property or the\n * above one must be provided. `pattern` has priority over `text` if both are provided.\n * @property {string} [flags] Regular expression flags for the given pattern.\n * Supported flag are the same as for the standard JavaScript RegExp constructor:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Advanced_searching_with_flags_2\n * The 'g' (global matching) is always enabled though.\n * @property {string} [replacer] The replacer value to use. By default\n * equals to `DEFAULT_SECURE_REPLACER`\n */\n\n/**\n * @typedef SecureValuePreprocessingRule\n * @property {RegExp} pattern The parsed pattern which is going to be used for replacement\n * @property {string} [replacer] The replacer value to use. By default\n * equals to `DEFAULT_SECURE_REPLACER`\n */\n"],"mappings":"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"}