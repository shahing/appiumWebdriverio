{"version":3,"file":"image-util.js","names":["BYTES_IN_PIXEL_BLOCK","SCANLINE_FILTER_METHOD","MIME_JPEG","MIME_PNG","MIME_BMP","Jimp","getJimpImage","data","B","resolve","reject","_","isString","isBuffer","Error","Buffer","from","err","imgObj","getBuffer","promisify","bind","context","cropBase64Image","base64Image","rect","image","base64ToImage","cropImage","imageToBase64","imageBuffer","PNG","filterType","parse","chunks","pack","on","chunk","push","concat","toString","imageRect","width","height","interRect","getRectIntersection","JSON","stringify","firstVerticalPixel","top","lastVerticalPixel","firstHorizontalPixel","left","lastHorizontalPixel","croppedArray","y","x","firstByteIdxInPixelBlock","byteIdx","imageSize"],"sources":["../../lib/image-util.js"],"sourcesContent":["import _ from 'lodash';\nimport Jimp from 'jimp';\nimport {Buffer} from 'buffer';\nimport {PNG} from 'pngjs';\nimport B from 'bluebird';\n\nconst BYTES_IN_PIXEL_BLOCK = 4;\nconst SCANLINE_FILTER_METHOD = 4;\nconst {MIME_JPEG, MIME_PNG, MIME_BMP} = Jimp;\n\n/**\n * Utility function to get a Jimp image object from buffer or base64 data. Jimp\n * is a great library however it does IO in the constructor so it's not\n * convenient for our async/await model.\n *\n * @param {Buffer|string} data - binary image buffer or base64-encoded image\n * string\n * @returns {Promise<AppiumJimp>} - the jimp image object\n */\nasync function getJimpImage(data) {\n  return await new B((resolve, reject) => {\n    if (!_.isString(data) && !_.isBuffer(data)) {\n      return reject(new Error('Must initialize jimp object with string or buffer'));\n    }\n    // if data is a string, assume it is a base64-encoded image\n    if (_.isString(data)) {\n      data = Buffer.from(data, 'base64');\n    }\n    new Jimp(\n      data,\n      /**\n       * @param {Error?} err\n       * @param {AppiumJimp} imgObj\n       */\n      (err, imgObj) => {\n        if (err) {\n          return reject(err);\n        }\n        if (!imgObj) {\n          return reject(new Error('Could not create jimp image from that data'));\n        }\n        imgObj.getBuffer = B.promisify(imgObj.getBuffer.bind(imgObj), {\n          context: imgObj,\n        });\n        resolve(imgObj);\n      }\n    );\n  });\n}\n\n/**\n * Crop the image by given rectangle (use base64 string as input and output)\n *\n * @param {string} base64Image The string with base64 encoded image\n * @param {Region} rect The selected region of image\n * @return {Promise<string>} base64 encoded string of cropped image\n */\nasync function cropBase64Image(base64Image, rect) {\n  const image = await base64ToImage(base64Image);\n  cropImage(image, rect);\n  return await imageToBase64(image);\n}\n\n/**\n * Create a pngjs image from given base64 image\n *\n * @param {string} base64Image The string with base64 encoded image\n * @return {Promise<PNG>} The image object\n */\nasync function base64ToImage(base64Image) {\n  const imageBuffer = Buffer.from(base64Image, 'base64');\n  return await new B((resolve, reject) => {\n    const image = new PNG({filterType: SCANLINE_FILTER_METHOD});\n    image.parse(imageBuffer, (err, image) => {\n      // eslint-disable-line promise/prefer-await-to-callbacks\n      if (err) {\n        return reject(err);\n      }\n      resolve(image);\n    });\n  });\n}\n\n/**\n * Create a base64 string for given image object\n *\n * @param {PNG} image The image object\n * @return {Promise<string>} The string with base64 encoded image\n */\nasync function imageToBase64(image) {\n  return await new B((resolve, reject) => {\n    const chunks = [];\n    image\n      .pack()\n      .on('data', (chunk) => chunks.push(chunk))\n      .on('end', () => {\n        resolve(Buffer.concat(chunks).toString('base64'));\n      })\n      .on('error', (err) => {\n        // eslint-disable-line promise/prefer-await-to-callbacks\n        reject(err);\n      });\n  });\n}\n\n/**\n * Crop the image by given rectangle\n *\n * @param {PNG} image The image to mutate by cropping\n * @param {Region} rect The selected region of image\n */\nfunction cropImage(image, rect) {\n  const imageRect = {width: image.width, height: image.height};\n  const interRect = getRectIntersection(rect, imageRect);\n  if (interRect.width < rect.width || interRect.height < rect.height) {\n    throw new Error(\n      `Cannot crop ${JSON.stringify(rect)} from ${JSON.stringify(\n        imageRect\n      )} because the intersection between them was not the size of the rect`\n    );\n  }\n\n  const firstVerticalPixel = interRect.top;\n  const lastVerticalPixel = interRect.top + interRect.height;\n\n  const firstHorizontalPixel = interRect.left;\n  const lastHorizontalPixel = interRect.left + interRect.width;\n\n  const croppedArray = [];\n  for (let y = firstVerticalPixel; y < lastVerticalPixel; y++) {\n    for (let x = firstHorizontalPixel; x < lastHorizontalPixel; x++) {\n      const firstByteIdxInPixelBlock = (imageRect.width * y + x) << 2;\n      for (let byteIdx = 0; byteIdx < BYTES_IN_PIXEL_BLOCK; byteIdx++) {\n        croppedArray.push(image.data[firstByteIdxInPixelBlock + byteIdx]);\n      }\n    }\n  }\n\n  image.data = Buffer.from(croppedArray);\n  image.width = interRect.width;\n  image.height = interRect.height;\n  return image;\n}\n\nfunction getRectIntersection(rect, imageSize) {\n  const left = rect.left >= imageSize.width ? imageSize.width : rect.left;\n  const top = rect.top >= imageSize.height ? imageSize.height : rect.top;\n  const width = imageSize.width >= left + rect.width ? rect.width : imageSize.width - left;\n  const height = imageSize.height >= top + rect.height ? rect.height : imageSize.height - top;\n  return {left, top, width, height};\n}\n\nexport {\n  cropBase64Image,\n  base64ToImage,\n  imageToBase64,\n  cropImage,\n  getJimpImage,\n  MIME_JPEG,\n  MIME_PNG,\n  MIME_BMP,\n};\n\n/**\n * @typedef {Omit<Jimp,'getBuffer'> & {getBuffer: Jimp['getBufferAsync']}} AppiumJimp\n */\n\n/**\n * @typedef Region\n * @property {number} left\n * @property {number} top\n * @property {number} width\n * @property {number} height\n */\n"],"mappings":"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"}