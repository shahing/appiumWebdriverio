"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WebDriverAgent = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _path = _interopRequireDefault(require("path"));
var _url2 = _interopRequireDefault(require("url"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _baseDriver = require("@appium/base-driver");
var _support = require("@appium/support");
var _logger = _interopRequireDefault(require("./logger"));
var _noSessionProxy = require("./no-session-proxy");
var _utils = require("./utils");
var _xcodebuild = _interopRequireDefault(require("./xcodebuild"));
var _asyncLock = _interopRequireDefault(require("async-lock"));
var _teen_process = require("teen_process");
var _checkDependencies = require("./check-dependencies");
var _constants = require("./constants");
const WDA_LAUNCH_TIMEOUT = 60 * 1000;
const WDA_AGENT_PORT = 8100;
const WDA_CF_BUNDLE_NAME = 'WebDriverAgentRunner-Runner';
const SHARED_RESOURCES_GUARD = new _asyncLock.default();
class WebDriverAgent {
  constructor(xcodeVersion, args = {}, log = null) {
    this.xcodeVersion = xcodeVersion;
    this.args = _lodash.default.clone(args);
    this.log = log ?? _logger.default;
    this.device = args.device;
    this.platformVersion = args.platformVersion;
    this.platformName = args.platformName;
    this.iosSdkVersion = args.iosSdkVersion;
    this.host = args.host;
    this.isRealDevice = !!args.realDevice;
    this.idb = (args.device || {}).idb;
    this.wdaBundlePath = args.wdaBundlePath;
    this.setWDAPaths(args.bootstrapPath, args.agentPath);
    this.wdaLocalPort = args.wdaLocalPort;
    this.wdaRemotePort = args.wdaLocalPort || WDA_AGENT_PORT;
    this.wdaBaseUrl = args.wdaBaseUrl || _constants.WDA_BASE_URL;
    this.prebuildWDA = args.prebuildWDA;
    this.webDriverAgentUrl = args.webDriverAgentUrl;
    this.started = false;
    this.wdaConnectionTimeout = args.wdaConnectionTimeout;
    this.useXctestrunFile = args.useXctestrunFile;
    this.usePrebuiltWDA = args.usePrebuiltWDA;
    this.derivedDataPath = args.derivedDataPath;
    this.mjpegServerPort = args.mjpegServerPort;
    this.updatedWDABundleId = args.updatedWDABundleId;
    this.xcodebuild = new _xcodebuild.default(this.xcodeVersion, this.device, {
      platformVersion: this.platformVersion,
      platformName: this.platformName,
      iosSdkVersion: this.iosSdkVersion,
      agentPath: this.agentPath,
      bootstrapPath: this.bootstrapPath,
      realDevice: this.isRealDevice,
      showXcodeLog: args.showXcodeLog,
      xcodeConfigFile: args.xcodeConfigFile,
      xcodeOrgId: args.xcodeOrgId,
      xcodeSigningId: args.xcodeSigningId,
      keychainPath: args.keychainPath,
      keychainPassword: args.keychainPassword,
      useSimpleBuildTest: args.useSimpleBuildTest,
      usePrebuiltWDA: args.usePrebuiltWDA,
      updatedWDABundleId: this.updatedWDABundleId,
      launchTimeout: args.wdaLaunchTimeout || WDA_LAUNCH_TIMEOUT,
      wdaRemotePort: this.wdaRemotePort,
      useXctestrunFile: this.useXctestrunFile,
      derivedDataPath: args.derivedDataPath,
      mjpegServerPort: this.mjpegServerPort,
      allowProvisioningDeviceRegistration: args.allowProvisioningDeviceRegistration,
      resultBundlePath: args.resultBundlePath,
      resultBundleVersion: args.resultBundleVersion
    }, this.log);
  }
  setWDAPaths(bootstrapPath, agentPath) {
    this.bootstrapPath = bootstrapPath || _utils.BOOTSTRAP_PATH;
    this.log.info(`Using WDA path: '${this.bootstrapPath}'`);
    this.agentPath = agentPath || _path.default.resolve(this.bootstrapPath, 'WebDriverAgent.xcodeproj');
    this.log.info(`Using WDA agent: '${this.agentPath}'`);
  }
  async cleanupObsoleteProcesses() {
    const obsoletePids = await (0, _utils.getPIDsListeningOnPort)(this.url.port, cmdLine => cmdLine.includes('/WebDriverAgentRunner') && !cmdLine.toLowerCase().includes(this.device.udid.toLowerCase()));
    if (_lodash.default.isEmpty(obsoletePids)) {
      this.log.debug(`No obsolete cached processes from previous WDA sessions ` + `listening on port ${this.url.port} have been found`);
      return;
    }
    this.log.info(`Detected ${obsoletePids.length} obsolete cached process${obsoletePids.length === 1 ? '' : 'es'} ` + `from previous WDA sessions. Cleaning them up`);
    try {
      await (0, _teen_process.exec)('kill', obsoletePids);
    } catch (e) {
      this.log.warn(`Failed to kill obsolete cached process${obsoletePids.length === 1 ? '' : 'es'} '${obsoletePids}'. ` + `Original error: ${e.message}`);
    }
  }
  async isRunning() {
    return !!(await this.getStatus());
  }
  get basePath() {
    if (this.url.path === '/') {
      return '';
    }
    return this.url.path || '';
  }
  async getStatus() {
    const noSessionProxy = new _noSessionProxy.NoSessionProxy({
      server: this.url.hostname,
      port: this.url.port,
      base: this.basePath,
      timeout: 3000
    });
    try {
      return await noSessionProxy.command('/status', 'GET');
    } catch (err) {
      this.log.debug(`WDA is not listening at '${this.url.href}'`);
      return null;
    }
  }
  async uninstall() {
    try {
      const bundleIds = await this.device.getUserInstalledBundleIdsByBundleName(WDA_CF_BUNDLE_NAME);
      if (_lodash.default.isEmpty(bundleIds)) {
        this.log.debug('No WDAs on the device.');
        return;
      }
      this.log.debug(`Uninstalling WDAs: '${bundleIds}'`);
      for (const bundleId of bundleIds) {
        await this.device.removeApp(bundleId);
      }
    } catch (e) {
      this.log.debug(e);
      this.log.warn(`WebDriverAgent uninstall failed. Perhaps, it is already uninstalled? ` + `Original error: ${e.message}`);
    }
  }
  async _cleanupProjectIfFresh() {
    const homeFolder = process.env.HOME;
    if (!homeFolder) {
      this.log.info('The HOME folder path cannot be determined');
      return;
    }
    const currentUpgradeTimestamp = await (0, _utils.getWDAUpgradeTimestamp)();
    if (!_lodash.default.isInteger(currentUpgradeTimestamp)) {
      this.log.info('It is impossible to determine the timestamp of the package');
      return;
    }
    const timestampPath = _path.default.resolve(homeFolder, _constants.WDA_UPGRADE_TIMESTAMP_PATH);
    const didTimestampExist = await _support.fs.exists(timestampPath);
    if (didTimestampExist) {
      try {
        await _support.fs.access(timestampPath, _support.fs.W_OK);
      } catch (ign) {
        this.log.info(`WebDriverAgent upgrade timestamp at '${timestampPath}' is not writeable. ` + `Skipping sources cleanup`);
        return;
      }
      const recentUpgradeTimestamp = parseInt(await _support.fs.readFile(timestampPath, 'utf8'), 10);
      if (_lodash.default.isInteger(recentUpgradeTimestamp)) {
        if (recentUpgradeTimestamp >= currentUpgradeTimestamp) {
          this.log.info(`WebDriverAgent does not need a cleanup. The sources are up to date ` + `(${recentUpgradeTimestamp} >= ${currentUpgradeTimestamp})`);
          return;
        }
        this.log.info(`WebDriverAgent sources have been upgraded ` + `(${recentUpgradeTimestamp} < ${currentUpgradeTimestamp})`);
      } else {
        this.log.warn(`The recent upgrade timestamp at '${timestampPath}' is corrupted. Trying to fix it`);
      }
    }
    try {
      await (0, _support.mkdirp)(_path.default.dirname(timestampPath));
      await _support.fs.writeFile(timestampPath, `${currentUpgradeTimestamp}`, 'utf8');
      this.log.debug(`Stored the recent WebDriverAgent upgrade timestamp ${currentUpgradeTimestamp} ` + `at '${timestampPath}'`);
    } catch (e) {
      this.log.info(`Unable to create the recent WebDriverAgent upgrade timestamp at '${timestampPath}'. ` + `Original error: ${e.message}`);
      return;
    }
    if (!didTimestampExist) {
      this.log.info('There is no need to perform the project cleanup. A fresh install has been detected');
      return;
    }
    try {
      await this.xcodebuild.cleanProject();
    } catch (e) {
      this.log.warn(`Cannot perform WebDriverAgent project cleanup. Original error: ${e.message}`);
    }
  }
  async launch(sessionId) {
    if (this.webDriverAgentUrl) {
      this.log.info(`Using provided WebdriverAgent at '${this.webDriverAgentUrl}'`);
      this.url = this.webDriverAgentUrl;
      this.setupProxies(sessionId);
      return await this.getStatus();
    }
    this.log.info('Launching WebDriverAgent on the device');
    this.setupProxies(sessionId);
    if (!this.useXctestrunFile && !(await _support.fs.exists(this.agentPath))) {
      throw new Error(`Trying to use WebDriverAgent project at '${this.agentPath}' but the ` + 'file does not exist');
    }
    if (this.idb || this.useXctestrunFile || this.derivedDataPath && this.usePrebuiltWDA) {
      this.log.info('Skipped WDA project cleanup according to the provided capabilities');
    } else {
      const synchronizationKey = _path.default.normalize(this.bootstrapPath);
      await SHARED_RESOURCES_GUARD.acquire(synchronizationKey, async () => await this._cleanupProjectIfFresh());
    }
    await (0, _utils.resetTestProcesses)(this.device.udid, !this.isRealDevice);
    if (this.idb) {
      return await this.startWithIDB();
    }
    await this.xcodebuild.init(this.noSessionProxy);
    if (this.prebuildWDA) {
      await this.xcodebuild.prebuild();
    }
    return await this.xcodebuild.start();
  }
  async startWithIDB() {
    this.log.info('Will launch WDA with idb instead of xcodebuild since the corresponding flag is enabled');
    const {
      wdaBundleId,
      testBundleId
    } = await this.prepareWDA();
    const env = {
      USE_PORT: this.wdaRemotePort,
      WDA_PRODUCT_BUNDLE_IDENTIFIER: this.updatedWDABundleId
    };
    if (this.mjpegServerPort) {
      env.MJPEG_SERVER_PORT = this.mjpegServerPort;
    }
    return await this.idb.runXCUITest(wdaBundleId, wdaBundleId, testBundleId, {
      env
    });
  }
  async parseBundleId(wdaBundlePath) {
    const infoPlistPath = _path.default.join(wdaBundlePath, 'Info.plist');
    const infoPlist = await _support.plist.parsePlist(await _support.fs.readFile(infoPlistPath));
    if (!infoPlist.CFBundleIdentifier) {
      throw new Error(`Could not find bundle id in '${infoPlistPath}'`);
    }
    return infoPlist.CFBundleIdentifier;
  }
  async prepareWDA() {
    const wdaBundlePath = this.wdaBundlePath || (await this.fetchWDABundle());
    const wdaBundleId = await this.parseBundleId(wdaBundlePath);
    if (!(await this.device.isAppInstalled(wdaBundleId))) {
      await this.device.installApp(wdaBundlePath);
    }
    const testBundleId = await this.idb.installXCTestBundle(_path.default.join(wdaBundlePath, 'PlugIns', 'WebDriverAgentRunner.xctest'));
    return {
      wdaBundleId,
      testBundleId,
      wdaBundlePath
    };
  }
  async fetchWDABundle() {
    if (!this.derivedDataPath) {
      return await (0, _checkDependencies.bundleWDASim)(this.xcodebuild);
    }
    const wdaBundlePaths = await _support.fs.glob(`${this.derivedDataPath}/**/*${_constants.WDA_RUNNER_APP}/`, {
      absolute: true
    });
    if (_lodash.default.isEmpty(wdaBundlePaths)) {
      throw new Error(`Could not find the WDA bundle in '${this.derivedDataPath}'`);
    }
    return wdaBundlePaths[0];
  }
  async isSourceFresh() {
    const existsPromises = ['Resources', `Resources${_path.default.sep}WebDriverAgent.bundle`].map(subPath => _support.fs.exists(_path.default.resolve(this.bootstrapPath, subPath)));
    return (await _bluebird.default.all(existsPromises)).some(v => v === false);
  }
  setupProxies(sessionId) {
    const proxyOpts = {
      log: this.log,
      server: this.url.hostname,
      port: this.url.port,
      base: this.basePath,
      timeout: this.wdaConnectionTimeout,
      keepAlive: true
    };
    this.jwproxy = new _baseDriver.JWProxy(proxyOpts);
    this.jwproxy.sessionId = sessionId;
    this.proxyReqRes = this.jwproxy.proxyReqRes.bind(this.jwproxy);
    this.noSessionProxy = new _noSessionProxy.NoSessionProxy(proxyOpts);
  }
  async quit() {
    this.log.info('Shutting down sub-processes');
    await this.xcodebuild.quit();
    await this.xcodebuild.reset();
    if (this.jwproxy) {
      this.jwproxy.sessionId = null;
    }
    this.started = false;
    if (!this.args.webDriverAgentUrl) {
      this.webDriverAgentUrl = null;
    }
  }
  get url() {
    if (!this._url) {
      if (this.webDriverAgentUrl) {
        this._url = _url2.default.parse(this.webDriverAgentUrl);
      } else {
        const port = this.wdaLocalPort || WDA_AGENT_PORT;
        const {
          protocol,
          hostname
        } = _url2.default.parse(this.wdaBaseUrl || _constants.WDA_BASE_URL);
        this._url = _url2.default.parse(`${protocol}//${hostname}:${port}`);
      }
    }
    return this._url;
  }
  set url(_url) {
    this._url = _url2.default.parse(_url);
  }
  get fullyStarted() {
    return this.started;
  }
  set fullyStarted(started = false) {
    this.started = started;
  }
  async retrieveDerivedDataPath() {
    return await this.xcodebuild.retrieveDerivedDataPath();
  }
  async setupCaching() {
    const status = await this.getStatus();
    if (!status || !status.build) {
      this.log.debug('WDA is currently not running. There is nothing to cache');
      return;
    }
    const {
      productBundleIdentifier,
      upgradedAt
    } = status.build;
    if (_support.util.hasValue(productBundleIdentifier) && _support.util.hasValue(this.updatedWDABundleId) && this.updatedWDABundleId !== productBundleIdentifier) {
      this.log.info(`Will uninstall running WDA since it has different bundle id. The actual value is '${productBundleIdentifier}'.`);
      return await this.uninstall();
    }
    if (_support.util.hasValue(productBundleIdentifier) && !_support.util.hasValue(this.updatedWDABundleId) && _constants.WDA_RUNNER_BUNDLE_ID !== productBundleIdentifier) {
      this.log.info(`Will uninstall running WDA since its bundle id is not equal to the default value ${_constants.WDA_RUNNER_BUNDLE_ID}`);
      return await this.uninstall();
    }
    const actualUpgradeTimestamp = await (0, _utils.getWDAUpgradeTimestamp)();
    this.log.debug(`Upgrade timestamp of the currently bundled WDA: ${actualUpgradeTimestamp}`);
    this.log.debug(`Upgrade timestamp of the WDA on the device: ${upgradedAt}`);
    if (actualUpgradeTimestamp && upgradedAt && _lodash.default.toLower(`${actualUpgradeTimestamp}`) !== _lodash.default.toLower(`${upgradedAt}`)) {
      this.log.info('Will uninstall running WDA since it has different version in comparison to the one ' + `which is bundled with appium-xcuitest-driver module (${actualUpgradeTimestamp} != ${upgradedAt})`);
      return await this.uninstall();
    }
    const message = _support.util.hasValue(productBundleIdentifier) ? `Will reuse previously cached WDA instance at '${this.url.href}' with '${productBundleIdentifier}'` : `Will reuse previously cached WDA instance at '${this.url.href}'`;
    this.log.info(`${message}. Set the wdaLocalPort capability to a value different from ${this.url.port} if this is an undesired behavior.`);
    this.webDriverAgentUrl = this.url.href;
  }
  async quitAndUninstall() {
    await this.quit();
    await this.uninstall();
  }
}
exports.WebDriverAgent = WebDriverAgent;
var _default = WebDriverAgent;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,