"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AfcWritableFileStream = exports.AfcReadableFileStream = void 0;
require("source-map-support/register");
var _stream = _interopRequireDefault(require("stream"));
var _lodash = _interopRequireDefault(require("lodash"));
var _logger = _interopRequireDefault(require("../logger"));
class AfcReadableFileStream extends _stream.default.Readable {
  constructor(fileHandle, afcService, options) {
    super(options);
    this._fileHandle = fileHandle;
    this._afcService = afcService;
    this._autoDestroy = !!options.autoDestroy;
    this._destroyed = false;
  }
  _read(size) {
    this._afcService.readFile(this._fileHandle, size).then(data => {
      if (!this._destroyed) {
        this.push(_lodash.default.isEmpty(data) ? null : data);
      }
    }).catch(e => {
      if (this._autoDestroy) {
        this.destroy(e);
      } else {
        this.emit('error', e);
      }
    });
  }
  _destroy(err, done) {
    if (this._destroyed) {
      return;
    }
    this._destroyed = true;
    this.push(null);
    this._afcService.closeFileHandle(this._fileHandle).then(() => done(err)).catch(e => {
      if (err) {
        _logger.default.debug(e);
      } else {
        err = e;
      }
      done(err);
    });
  }
}
exports.AfcReadableFileStream = AfcReadableFileStream;
class AfcWritableFileStream extends _stream.default.Writable {
  constructor(fileHandle, afcService, options) {
    super(options);
    this._fileHandle = fileHandle;
    this._afcService = afcService;
    this._autoDestroy = !!options.autoDestroy;
    this._destroyed = false;
  }
  _write(chunk, encoding, next) {
    this._afcService.writeFile(this._fileHandle, chunk).then(() => next()).catch(e => {
      if (this._autoDestroy) {
        this.destroy(e);
      }
      next(e);
    });
  }
  _destroy(err, done) {
    if (this._destroyed) {
      return;
    }
    this._destroyed = true;
    this._afcService.closeFileHandle(this._fileHandle).then(() => done(err)).catch(e => {
      if (err) {
        _logger.default.debug(e);
      } else {
        err = e;
      }
      done(err);
    });
  }
}
exports.AfcWritableFileStream = AfcWritableFileStream;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBZmNSZWFkYWJsZUZpbGVTdHJlYW0iLCJzdHJlYW0iLCJSZWFkYWJsZSIsImNvbnN0cnVjdG9yIiwiZmlsZUhhbmRsZSIsImFmY1NlcnZpY2UiLCJvcHRpb25zIiwiX2ZpbGVIYW5kbGUiLCJfYWZjU2VydmljZSIsIl9hdXRvRGVzdHJveSIsImF1dG9EZXN0cm95IiwiX2Rlc3Ryb3llZCIsIl9yZWFkIiwic2l6ZSIsInJlYWRGaWxlIiwidGhlbiIsImRhdGEiLCJwdXNoIiwiXyIsImlzRW1wdHkiLCJjYXRjaCIsImUiLCJkZXN0cm95IiwiZW1pdCIsIl9kZXN0cm95IiwiZXJyIiwiZG9uZSIsImNsb3NlRmlsZUhhbmRsZSIsImxvZyIsImRlYnVnIiwiQWZjV3JpdGFibGVGaWxlU3RyZWFtIiwiV3JpdGFibGUiLCJfd3JpdGUiLCJjaHVuayIsImVuY29kaW5nIiwibmV4dCIsIndyaXRlRmlsZSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9hZmMvc3RyZWFtcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by10aGVuICovXG5pbXBvcnQgc3RyZWFtIGZyb20gJ3N0cmVhbSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuXG5jbGFzcyBBZmNSZWFkYWJsZUZpbGVTdHJlYW0gZXh0ZW5kcyBzdHJlYW0uUmVhZGFibGUge1xuXG4gIGNvbnN0cnVjdG9yIChmaWxlSGFuZGxlLCBhZmNTZXJ2aWNlLCBvcHRpb25zKSB7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gICAgdGhpcy5fZmlsZUhhbmRsZSA9IGZpbGVIYW5kbGU7XG4gICAgdGhpcy5fYWZjU2VydmljZSA9IGFmY1NlcnZpY2U7XG4gICAgdGhpcy5fYXV0b0Rlc3Ryb3kgPSAhIW9wdGlvbnMuYXV0b0Rlc3Ryb3k7XG4gICAgdGhpcy5fZGVzdHJveWVkID0gZmFsc2U7XG4gIH1cblxuICBfcmVhZCAoc2l6ZSkge1xuICAgIHRoaXMuX2FmY1NlcnZpY2UucmVhZEZpbGUodGhpcy5fZmlsZUhhbmRsZSwgc2l6ZSlcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIGlmICghdGhpcy5fZGVzdHJveWVkKSB7XG4gICAgICAgICAgdGhpcy5wdXNoKF8uaXNFbXB0eShkYXRhKSA/IG51bGwgOiBkYXRhKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICBpZiAodGhpcy5fYXV0b0Rlc3Ryb3kpIHtcbiAgICAgICAgICB0aGlzLmRlc3Ryb3koZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5lbWl0KCdlcnJvcicsIGUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIF9kZXN0cm95IChlcnIsIGRvbmUpIHtcbiAgICBpZiAodGhpcy5fZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2Rlc3Ryb3llZCA9IHRydWU7XG4gICAgdGhpcy5wdXNoKG51bGwpO1xuICAgIHRoaXMuX2FmY1NlcnZpY2UuY2xvc2VGaWxlSGFuZGxlKHRoaXMuX2ZpbGVIYW5kbGUpXG4gICAgICAudGhlbigoKSA9PiBkb25lKGVycikpXG4gICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIGxvZy5kZWJ1ZyhlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlcnIgPSBlO1xuICAgICAgICB9XG4gICAgICAgIGRvbmUoZXJyKTtcbiAgICAgIH0pO1xuICB9XG59XG5cbmNsYXNzIEFmY1dyaXRhYmxlRmlsZVN0cmVhbSBleHRlbmRzIHN0cmVhbS5Xcml0YWJsZSB7XG5cbiAgY29uc3RydWN0b3IgKGZpbGVIYW5kbGUsIGFmY1NlcnZpY2UsIG9wdGlvbnMpIHtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICB0aGlzLl9maWxlSGFuZGxlID0gZmlsZUhhbmRsZTtcbiAgICB0aGlzLl9hZmNTZXJ2aWNlID0gYWZjU2VydmljZTtcbiAgICB0aGlzLl9hdXRvRGVzdHJveSA9ICEhb3B0aW9ucy5hdXRvRGVzdHJveTtcbiAgICB0aGlzLl9kZXN0cm95ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIF93cml0ZSAoY2h1bmssIGVuY29kaW5nLCBuZXh0KSB7XG4gICAgdGhpcy5fYWZjU2VydmljZS53cml0ZUZpbGUodGhpcy5fZmlsZUhhbmRsZSwgY2h1bmspXG4gICAgICAudGhlbigoKSA9PiBuZXh0KCkpXG4gICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuX2F1dG9EZXN0cm95KSB7XG4gICAgICAgICAgdGhpcy5kZXN0cm95KGUpO1xuICAgICAgICB9XG4gICAgICAgIG5leHQoZSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIF9kZXN0cm95IChlcnIsIGRvbmUpIHtcbiAgICBpZiAodGhpcy5fZGVzdHJveWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2Rlc3Ryb3llZCA9IHRydWU7XG4gICAgdGhpcy5fYWZjU2VydmljZS5jbG9zZUZpbGVIYW5kbGUodGhpcy5fZmlsZUhhbmRsZSlcbiAgICAgIC50aGVuKCgpID0+IGRvbmUoZXJyKSlcbiAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgbG9nLmRlYnVnKGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGVyciA9IGU7XG4gICAgICAgIH1cbiAgICAgICAgZG9uZShlcnIpO1xuICAgICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgQWZjUmVhZGFibGVGaWxlU3RyZWFtLCBBZmNXcml0YWJsZUZpbGVTdHJlYW0gfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFDQTtBQUNBO0FBQ0E7QUFFQSxNQUFNQSxxQkFBcUIsU0FBU0MsZUFBTSxDQUFDQyxRQUFRLENBQUM7RUFFbERDLFdBQVcsQ0FBRUMsVUFBVSxFQUFFQyxV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