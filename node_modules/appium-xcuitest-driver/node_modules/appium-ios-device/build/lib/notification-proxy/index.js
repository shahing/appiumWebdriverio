"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.NotificationProxyService = exports.NOTIFICATION_PROXY_SERVICE_NAME = void 0;
require("source-map-support/register");
var _plistServiceEncoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-encoder"));
var _plistServiceDecoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-decoder"));
var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));
var _constants = require("../constants");
var _lodash = _interopRequireDefault(require("lodash"));
var _baseService = require("../base-service");
const NOTIFICATION_PROXY_SERVICE_NAME = 'com.apple.mobile.notification_proxy';
exports.NOTIFICATION_PROXY_SERVICE_NAME = NOTIFICATION_PROXY_SERVICE_NAME;
const MAX_FRAME_SIZE = 16 * _constants.KB;
const RELAY_NOTIFICATION = 'RelayNotification';
const PROXY_DEATH = 'ProxyDeath';
class NotificationProxyService extends _baseService.BaseServiceSocket {
  constructor(socketClient) {
    super(socketClient);
    this._decoder = new _plistServiceDecoder.default();
    this._splitter = new _lengthBasedSplitter.default({
      readableStream: socketClient,
      littleEndian: false,
      maxFrameLength: MAX_FRAME_SIZE,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 4
    });
    this._socketClient.pipe(this._splitter).pipe(this._decoder);
    this._encoder = new _plistServiceEncoder.default();
    this._encoder.pipe(this._socketClient);
    this._assignClientFailureHandlers(this._encoder);
    this._listeners = {};
    this._decoder.on('data', this._handleData.bind(this));
  }
  _handleData(data) {
    switch (data.Command) {
      case RELAY_NOTIFICATION:
        {
          const listener = this._listeners[data.Name];
          if (!listener) {
            return;
          }
          if (_lodash.default.isFunction(listener.notification)) {
            listener.notification();
          }
          break;
        }
      case PROXY_DEATH:
        {
          const listener = this._listeners[data.Name];
          if (!listener) {
            return;
          }
          if (_lodash.default.isFunction(listener.proxyDeath)) {
            listener.proxyDeath();
          }
          delete this._listeners[data.Name];
          break;
        }
      default:
        throw new Error(`Unknown data type ${JSON.stringify(data)}`);
    }
  }
  observeNotification(notification, listener) {
    if (this._listeners[notification]) {
      throw new Error(`Notification listener for ${notification} already exists. Another one can't be added`);
    }
    this._listeners[notification] = listener;
    this._encoder.write({
      Command: 'ObserveNotification',
      Name: notification
    });
  }
  postNotification(notification) {
    this._encoder.write({
      Command: 'PostNotification',
      Name: notification
    });
  }
  shutdown() {
    this._encoder.write({
      Command: 'Shutdown'
    });
  }
  close() {
    this.shutdown();
    super.close();
  }
}
exports.NotificationProxyService = NotificationProxyService;
var _default = NotificationProxyService;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,