"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.WebInspectorDecoder = void 0;
require("source-map-support/register");
var _stream = _interopRequireDefault(require("stream"));
var _support = require("@appium/support");
class WebInspectorDecoder extends _stream.default.Transform {
  constructor(maxLength) {
    super({
      objectMode: true
    });
    this._frameBufferIndex = 0;
    this._frameBuffer = Buffer.allocUnsafeSlow(maxLength);
  }
  _transform(data, encoding, onData) {
    this._decode(data);
    onData();
  }
  _decode(data) {
    if (data.WIRFinalMessageKey) {
      const buffer = data.WIRFinalMessageKey;
      this._frameBufferIndex += this._readBytes(buffer, 0, this._frameBuffer, this._frameBufferIndex, buffer.length);
      const pref = _support.plist.parsePlist(this._frameBuffer.slice(0, this._frameBufferIndex));
      this.push(pref);
      this._resetBuffers();
    } else {
      const buffer = data.WIRPartialMessageKey;
      this._frameBufferIndex += this._readBytes(buffer, 0, this._frameBuffer, this._frameBufferIndex, buffer.length);
    }
  }
  _readBytes(src, srcIndex, target, targetIndex, nBytesToBeRead) {
    let availableBytes = Math.min(nBytesToBeRead, src.length - srcIndex);
    src.copy(target, targetIndex, srcIndex, srcIndex + availableBytes);
    return availableBytes;
  }
  _resetBuffers() {
    this._frameBufferIndex = 0;
  }
}
exports.WebInspectorDecoder = WebInspectorDecoder;
var _default = WebInspectorDecoder;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJXZWJJbnNwZWN0b3JEZWNvZGVyIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJtYXhMZW5ndGgiLCJvYmplY3RNb2RlIiwiX2ZyYW1lQnVmZmVySW5kZXgiLCJfZnJhbWVCdWZmZXIiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZVNsb3ciLCJfdHJhbnNmb3JtIiwiZGF0YSIsImVuY29kaW5nIiwib25EYXRhIiwiX2RlY29kZSIsIldJUkZpbmFsTWVzc2FnZUtleSIsImJ1ZmZlciIsIl9yZWFkQnl0ZXMiLCJsZW5ndGgiLCJwcmVmIiwicGxpc3QiLCJwYXJzZVBsaXN0Iiwic2xpY2UiLCJwdXNoIiwiX3Jlc2V0QnVmZmVycyIsIldJUlBhcnRpYWxNZXNzYWdlS2V5Iiwic3JjIiwic3JjSW5kZXgiLCJ0YXJnZXQiLCJ0YXJnZXRJbmRleCIsIm5CeXRlc1RvQmVSZWFkIiwiYXZhaWxhYmxlQnl0ZXMiLCJNYXRoIiwibWluIiwiY29weSJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi93ZWJpbnNwZWN0b3IvdHJhbnNmb3JtZXIvd2ViaW5zcGVjdG9yLWRlY29kZXIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgcGxpc3QgfSBmcm9tICdAYXBwaXVtL3N1cHBvcnQnO1xuXG5cbmNsYXNzIFdlYkluc3BlY3RvckRlY29kZXIgZXh0ZW5kcyBTdHJlYW0uVHJhbnNmb3JtIHtcbiAgY29uc3RydWN0b3IgKG1heExlbmd0aCkge1xuICAgIHN1cGVyKHsgb2JqZWN0TW9kZTogdHJ1ZSB9KTtcbiAgICB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4ID0gMDtcbiAgICB0aGlzLl9mcmFtZUJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cobWF4TGVuZ3RoKTtcbiAgfVxuXG4gIF90cmFuc2Zvcm0gKGRhdGEsIGVuY29kaW5nLCBvbkRhdGEpIHtcbiAgICB0aGlzLl9kZWNvZGUoZGF0YSk7XG4gICAgb25EYXRhKCk7XG4gIH1cblxuICBfZGVjb2RlIChkYXRhKSB7XG4gICAgaWYgKGRhdGEuV0lSRmluYWxNZXNzYWdlS2V5KSB7XG4gICAgICBjb25zdCBidWZmZXIgPSBkYXRhLldJUkZpbmFsTWVzc2FnZUtleTtcbiAgICAgIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXggKz0gdGhpcy5fcmVhZEJ5dGVzKGJ1ZmZlciwgMCwgdGhpcy5fZnJhbWVCdWZmZXIsIHRoaXMuX2ZyYW1lQnVmZmVySW5kZXgsIGJ1ZmZlci5sZW5ndGgpO1xuICAgICAgY29uc3QgcHJlZiA9IHBsaXN0LnBhcnNlUGxpc3QodGhpcy5fZnJhbWVCdWZmZXIuc2xpY2UoMCwgdGhpcy5fZnJhbWVCdWZmZXJJbmRleCkpO1xuICAgICAgdGhpcy5wdXNoKHByZWYpO1xuICAgICAgdGhpcy5fcmVzZXRCdWZmZXJzKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGJ1ZmZlciA9IGRhdGEuV0lSUGFydGlhbE1lc3NhZ2VLZXk7XG4gICAgICB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4ICs9IHRoaXMuX3JlYWRCeXRlcyhidWZmZXIsIDAsIHRoaXMuX2ZyYW1lQnVmZmVyLCB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4LCBidWZmZXIubGVuZ3RoKTtcbiAgICB9XG4gIH1cblxuICBfcmVhZEJ5dGVzIChzcmMsIHNyY0luZGV4LCB0YXJnZXQsIHRhcmdldEluZGV4LCBuQnl0ZXNUb0JlUmVhZCkge1xuICAgIGxldCBhdmFpbGFibGVCeXRlcyA9IE1hdGgubWluKG5CeXRlc1RvQmVSZWFkLCBzcmMubGVuZ3RoIC0gc3JjSW5kZXgpO1xuICAgIHNyYy5jb3B5KHRhcmdldCwgdGFyZ2V0SW5kZXgsIHNyY0luZGV4LCBzcmNJbmRleCArIGF2YWlsYWJsZUJ5dGVzKTtcbiAgICByZXR1cm4gYXZhaWxhYmxlQnl0ZXM7XG4gIH1cblxuICBfcmVzZXRCdWZmZXJzICgpIHtcbiAgICB0aGlzLl9mcmFtZUJ1ZmZlckluZGV4ID0gMDtcbiAgfVxufVxuXG5leHBvcnQgeyBXZWJJbnNwZWN0b3JEZWNvZGVyIH07XG5leHBvcnQgZGVmYXVsdCBXZWJJbnNwZWN0b3JEZWNvZGVyO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFHQSxNQUFNQSxtQkFBbUIsU0FBU0MsZUFBTSxDQUFDQyxTQUFTLENBQUM7RUFDakRDLFdBQVcsQ0FBRUMsU0FBUyxFQUFFO0lBQ3RCLEtBQUssQ0FBQztNQUFFQyxVQUFVLEVBQUU7SUFBSyxDQUFDLENBQUM7SUFDM0IsSUFBSSxDQUFDQyxpQkFBaUIsR0FBRyxDQUFDO0lBQzFCLElBQUksQ0FBQ0MsWUFBWSxHQUFHQyxNQUFNLENBQUNDLGVBQWUsQ0FBQ0wsU0FBUyxDQUFDO0VBQ3ZEO0VBRUFNLFVBQVUsQ0FBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRTtJQUNsQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0gsSUFBSSxDQUFDO0lBQ2xCRSxNQUFNLEVBQUU7RUFDVjtFQUVBQyxPQUFPLENBQUVILElBQUksRUFBRTtJQUNiLElBQUlBLElBQUksQ0FBQ0ksa0JBQWtCLEVBQUU7TUFDM0IsTUFBTUMsTUFBTSxHQUFHTCxJQUFJLENBQUNJLGtCQUFrQjtNQUN0QyxJQUFJLENBQUNULGlCQUFpQixJQUFJLElBQUksQ0FBQ1csVUFBVSxDQUFDRCxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQ1QsWUFBWSxFQUFFLElBQUksQ0FBQ0QsaUJBQWlCLEVBQUVVLE1BQU0sQ0FBQ0UsTUFBTSxDQUFDO01BQzlHLE1BQU1DLElBQUksR0FBR0MsY0FBSyxDQUFDQyxVQUFVLENBQUMsSUFBSSxDQUFDZCxZQUFZLENBQUNlLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDaEIsaUJBQWlCLENBQUMsQ0FBQztNQUNqRixJQUFJLENBQUNpQixJQUFJLENBQUNKLElBQUksQ0FBQztNQUNmLElBQUksQ0FBQ0ssYUFBYSxFQUFFO0lBQ3RCLENBQUMsTUFBTTtNQUNMLE1BQU1SLE1BQU0sR0FBR0wsSUFBSSxDQUFDYyxvQkFBb0I7TUFDeEMsSUFBSSxDQUFDbkIsaUJBQWlCLElBQUksSUFBSSxDQUFDVyxVQUFVLENBQUNELE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDVCxZQUFZLEVBQUUsSUFBSSxDQUFDRCxpQkFBaUIsRUFBRVUsTUFBTSxDQUFDRSxNQUFNLENBQUM7SUFDaEg7RUFDRjtFQUVBRCxVQUFVLENBQUVTLEdBQUcsRUFBRUMsUUFBUSxFQUFFQyxNQUFNLEVBQUVDLFdBQVcsRUFBRUMsY0FBYyxFQUFFO0lBQzlELElBQUlDLGNBQWMsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUNILGNBQWMsRUFBRUosR0FBRyxDQUFDUixNQUFNLEdBQUdTLFFBQVEsQ0FBQztJQUNwRUQsR0FBRyxDQUFDUSxJQUFJLENBQUNOLE1BQU0sRUFBRUMsV0FBVyxFQUFFRixRQUFRLEVBQUVBLFFBQVEsR0FBR0ksY0FBYyxDQUFDO0lBQ2xFLE9BQU9BLGNBQWM7RUFDdkI7RUFFQVAsYUFBYSxHQUFJO0lBQ2YsSUFBSSxDQUFDbEIsaUJBQWlCLEdBQUcsQ0FBQztFQUM1QjtBQUNGO0FBQUM7QUFBQSxlQUdjTixtQkFBbUI7QUFBQSJ9