{"version":3,"file":"index.js","names":["WEB_INSPECTOR_SERVICE_NAME","MAX_FRAME_SIZE","MB","PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION","WebInspectorService","BaseServiceSocket","constructor","opts","majorOsVersion","isSimulator","socketChunkSize","verbose","verboseHexDump","socketClient","maxFrameLength","_","isFunction","setMaxSendFragment","isNil","log","debug","warn","_verbose","_isSimulator","_majorOsVersion","_initializePartialMessageSupport","_initializeFullMessageSupport","_decoder","PlistServiceDecoder","_socketClient","pipe","StreamLogger","RECEIVE","_splitter","LengthBasedSplitter","readableStream","littleEndian","lengthFieldOffset","lengthFieldLength","lengthAdjustment","_encoder","PlistServiceEncoder","SEND","WebInspectorDecoder","WebInspectorEncoder","sendMessage","rpcObject","Error","util","jsonStringify","write","listenMessage","onData","on","data"],"sources":["../../../lib/webinspector/index.js"],"sourcesContent":["import WebInspectorDecoder from './transformer/webinspector-decoder';\nimport WebInspectorEncoder from './transformer/webinspector-encoder';\nimport PlistServiceDecoder from '../plist-service/transformer/plist-service-decoder';\nimport PlistServiceEncoder from '../plist-service/transformer/plist-service-encoder';\nimport LengthBasedSplitter from '../util/transformer/length-based-splitter';\nimport StreamLogger from '../util/transformer/stream-logger';\nimport _ from 'lodash';\nimport { util } from '@appium/support';\nimport { MB } from '../constants';\nimport log from '../logger';\nimport { BaseServiceSocket } from '../base-service';\n\n\nconst WEB_INSPECTOR_SERVICE_NAME = 'com.apple.webinspector';\nconst MAX_FRAME_SIZE = 20 * MB;\n\nconst PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION = 11;\n\n/**\n * @typedef {Object} WebInspectorServiceOptions\n *\n * @property {number} majorOsVersion The major version of the os version\n * @property {boolean} isSimulator Whether the device is a simulator\n * @property {?number} socketChunkSize Size, in bytes of the chunks to send to\n *                                     real device (only iOS 11+). Defaults to\n *                                     16384 bytes (the TLSSocket max).\n * @property {boolean} verbose Turn on logging of each message sent or received.\n *                             Defaults to false\n * @property {boolean} verboseHexDump Turn on logging of _all_ communication as\n *                                    hex dump. Defaults to false\n * @property {*} socketClient The socket client where the communication will happen\n * @property {number} maxFrameLength [20 * 1024 * 1024] - The maximum size\n *                                   in bytes of a single data frame\n *                                   in the device communication protocol\n */\n\nclass WebInspectorService extends BaseServiceSocket {\n  /**\n   * The main service for communication with the webinspectord\n   *\n   * @param {WebInspectorServiceOptions}\n   */\n  constructor (opts = {}) {\n    const {\n      majorOsVersion,\n      isSimulator = false,\n      socketChunkSize,\n      verbose = false,\n      verboseHexDump = false,\n      socketClient,\n      maxFrameLength = MAX_FRAME_SIZE,\n    } = opts;\n\n    super(socketClient);\n\n    // set the largest fragment size for the socket, if the option is there\n    if (_.isFunction(socketClient.setMaxSendFragment) && !_.isNil(socketChunkSize) && socketChunkSize > 0) {\n      if (socketClient.setMaxSendFragment(socketChunkSize)) {\n        log.debug(`Maximum TLS fragment size set to '${socketChunkSize}'`);\n      } else {\n        // anything over the _actual_ maximum will fail, and things will remain the same\n        log.warn(`Unable to set TLS fragment size to '${socketChunkSize}'`);\n      }\n    }\n\n    this._verbose = verbose;\n    this._isSimulator = isSimulator;\n    this._majorOsVersion = majorOsVersion;\n\n    if (!isSimulator && majorOsVersion < PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION) {\n      this._initializePartialMessageSupport(verboseHexDump, maxFrameLength);\n    } else {\n      this._initializeFullMessageSupport(verboseHexDump, maxFrameLength);\n    }\n  }\n\n  /**\n   * Intializes the data flow for iOS 11+.\n   *\n   * @param {boolean} verbose - whether to print out the hex dump for communication\n   * @param {number} maxFrameLength - The maximum size in bytes of a single data frame\n   *                                  in the device communication protocol\n   */\n  _initializeFullMessageSupport (verbose, maxFrameLength) {\n    this._decoder = new PlistServiceDecoder();\n    this._socketClient\n      // log first, in case there is a problem in processing\n      .pipe(new StreamLogger(StreamLogger.RECEIVE, verbose))\n      .pipe(this._splitter = new LengthBasedSplitter({\n        readableStream: this._socketClient,\n        littleEndian: false,\n        maxFrameLength,\n        lengthFieldOffset: 0,\n        lengthFieldLength: 4,\n        lengthAdjustment: 4,\n      }))\n      .pipe(this._decoder);\n\n    this._encoder = new PlistServiceEncoder();\n    this._encoder\n      .pipe(new StreamLogger(StreamLogger.SEND, verbose))\n      .pipe(this._socketClient);\n  }\n\n  /**\n   * Intializes the data flow for iOS < 11, where data is separated into partial\n   * messages before sending.\n   *\n   * @param {boolean} verbose - whether to print out the hex dump for communication\n   * @param {number} maxFrameLength - The maximum size in bytes of a single data frame\n   *                                  in the device communication protocol\n   */\n  _initializePartialMessageSupport (verbose, maxFrameLength) {\n    // 1MB as buffer for bulding webinspector full messages. We can increase the value if more buffer is needed\n    this._decoder = new WebInspectorDecoder(MB);\n    this._socketClient\n      // log first, in case there is a problem in processing\n      .pipe(new StreamLogger(StreamLogger.RECEIVE, verbose))\n      .pipe(this._splitter = new LengthBasedSplitter({\n        readableStream: this._socketClient,\n        littleEndian: false,\n        maxFrameLength,\n        lengthFieldOffset: 0,\n        lengthFieldLength: 4,\n        lengthAdjustment: 4,\n      }))\n      .pipe(new PlistServiceDecoder())\n      .pipe(this._decoder);\n\n    this._encoder = new WebInspectorEncoder();\n    this._encoder\n      .pipe(new PlistServiceEncoder())\n      .pipe(new StreamLogger(StreamLogger.SEND, verbose))\n      .pipe(this._socketClient);\n  }\n\n  /**\n   * Sends an object to the webinspectord socket\n   * @param {Object} rpcObject The object that will be sent\n   * @throws Will throw an error when the object is null or undefined\n   */\n  sendMessage (rpcObject) {\n    if (_.isNil(rpcObject)) {\n      throw new Error('Cannot send a null object');\n    }\n\n    if (this._verbose) {\n      log.debug('Sending message to Web Inspector:');\n      log.debug(util.jsonStringify(rpcObject));\n    }\n\n    this._encoder.write(rpcObject);\n\n    // write an empty message, which on real devices ensures the actual message\n    // gets sent to the device. without this it will periodically hang with\n    // nothing sent\n    // however, this causes webinspectord to crash on devices running iOS 10\n    if (!this._isSimulator && this._majorOsVersion >= PARTIAL_MESSAGE_SUPPORT_DEPRECATION_VERSION) {\n      this._encoder.write(' ');\n    }\n  }\n\n  /** The callback function which will be called during message listening\n   * @name MessageCallback\n   * @function\n   * @param {Object} object The rpc object that is sent from the webinspectord\n  */\n\n  /**\n   * Listen to messages coming from webinspectord\n   * @param {MessageCallback} callback\n   */\n  listenMessage (onData) {\n    this._decoder.on('data', (data) => {\n      if (this._verbose) {\n        log.debug('Received message from Web Inspector:');\n        log.debug(util.jsonStringify(data));\n      }\n      onData(data);\n    });\n  }\n}\n\nexport { WebInspectorService, WEB_INSPECTOR_SERVICE_NAME };\nexport default WebInspectorService;\n"],"mappings":"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"}