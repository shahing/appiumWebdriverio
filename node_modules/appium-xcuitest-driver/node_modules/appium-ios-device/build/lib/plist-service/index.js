"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PlistService = void 0;
require("source-map-support/register");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _sslHelper = require("../ssl-helper");
var _plistServiceEncoder = _interopRequireDefault(require("./transformer/plist-service-encoder"));
var _plistServiceDecoder = _interopRequireDefault(require("./transformer/plist-service-decoder"));
var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));
var _baseService = require("../base-service");
var _constants = require("../constants");
const MAX_FRAME_SIZE = 1 * _constants.MB;
const CHECK_FREQ_MS = 50;
class PlistService extends _baseService.BaseServiceSocket {
  constructor(socketClient) {
    super(socketClient);
    this._decoder = new _plistServiceDecoder.default();
    this._splitter = new _lengthBasedSplitter.default({
      readableStream: socketClient,
      littleEndian: false,
      maxFrameLength: MAX_FRAME_SIZE,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 4
    });
    this._socketClient.pipe(this._splitter).pipe(this._decoder);
    this._encoder = new _plistServiceEncoder.default();
    this._encoder.pipe(this._socketClient);
    this._assignClientFailureHandlers(this._encoder);
    this.replyQueue = [];
    this._decoder.on('data', data => this.replyQueue.push(data));
  }
  async sendPlistAndReceive(json, timeout = 5000) {
    this.sendPlist(json);
    return await this.receivePlist(timeout);
  }
  sendPlist(json) {
    if (!json) {
      throw new Error('Cant send a null a object');
    }
    this._encoder.write(json);
  }
  async receivePlist(timeout = 5000) {
    return await new _bluebird.default((resolve, reject) => {
      const queue = this.replyQueue;
      const data = queue.shift();
      if (data) {
        resolve(data);
        return;
      }
      const checkExist = setInterval(() => {
        const data = queue.shift();
        if (!data) {
          return;
        }
        clearInterval(checkExist);
        resolve(data);
      }, CHECK_FREQ_MS);
      setTimeout(() => {
        clearInterval(checkExist);
        reject(new Error(`Failed to receive any data within the timeout: ${timeout}`));
      }, timeout);
    });
  }
  enableSessionSSL(hostPrivateKey, hostCertificate) {
    this._socketClient.unpipe(this._splitter);
    this._encoder.unpipe(this._socketClient);
    this._socketClient = (0, _sslHelper.upgradeToSSL)(this._socketClient, hostPrivateKey, hostCertificate);
    this._encoder.pipe(this._socketClient);
    this._socketClient.pipe(this._splitter).pipe(this._decoder);
  }
}
exports.PlistService = PlistService;
var _default = PlistService;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNQVhfRlJBTUVfU0laRSIsIk1CIiwiQ0hFQ0tfRlJFUV9NUyIsIlBsaXN0U2VydmljZSIsIkJhc2VTZXJ2aWNlU29ja2V0IiwiY29uc3RydWN0b3IiLCJzb2NrZXRDbGllbnQiLCJfZGVjb2RlciIsIlBsaXN0U2VydmljZURlY29kZXIiLCJfc3BsaXR0ZXIiLCJMZW5ndGhCYXNlZFNwbGl0dGVyIiwicmVhZGFibGVTdHJlYW0iLCJsaXR0bGVFbmRpYW4iLCJtYXhGcmFtZUxlbmd0aCIsImxlbmd0aEZpZWxkT2Zmc2V0IiwibGVuZ3RoRmllbGRMZW5ndGgiLCJsZW5ndGhBZGp1c3RtZW50IiwiX3NvY2tldENsaWVudCIsInBpcGUiLCJfZW5jb2RlciIsIlBsaXN0U2VydmljZUVuY29kZXIiLCJfYXNzaWduQ2xpZW50RmFpbHVyZUhhbmRsZXJzIiwicmVwbHlRdWV1ZSIsIm9uIiwiZGF0YSIsInB1c2giLCJzZW5kUGxpc3RBbmRSZWNlaXZlIiwianNvbiIsInRpbWVvdXQiLCJzZW5kUGxpc3QiLCJyZWNlaXZlUGxpc3QiLCJFcnJvciIsIndyaXRlIiwiQiIsInJlc29sdmUiLCJyZWplY3QiLCJxdWV1ZSIsInNoaWZ0IiwiY2hlY2tFeGlzdCIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInNldFRpbWVvdXQiLCJlbmFibGVTZXNzaW9uU1NMIiwiaG9zdFByaXZhdGVLZXkiLCJob3N0Q2VydGlmaWNhdGUiLCJ1bnBpcGUiLCJ1cGdyYWRlVG9TU0wiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvcGxpc3Qtc2VydmljZS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyB1cGdyYWRlVG9TU0wgfSBmcm9tICcuLi9zc2wtaGVscGVyJztcbmltcG9ydCBQbGlzdFNlcnZpY2VFbmNvZGVyIGZyb20gJy4vdHJhbnNmb3JtZXIvcGxpc3Qtc2VydmljZS1lbmNvZGVyJztcbmltcG9ydCBQbGlzdFNlcnZpY2VEZWNvZGVyIGZyb20gJy4vdHJhbnNmb3JtZXIvcGxpc3Qtc2VydmljZS1kZWNvZGVyJztcbmltcG9ydCBMZW5ndGhCYXNlZFNwbGl0dGVyIGZyb20gJy4uL3V0aWwvdHJhbnNmb3JtZXIvbGVuZ3RoLWJhc2VkLXNwbGl0dGVyJztcbmltcG9ydCB7IEJhc2VTZXJ2aWNlU29ja2V0IH0gZnJvbSAnLi4vYmFzZS1zZXJ2aWNlJztcbmltcG9ydCB7IE1CIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcblxuXG5jb25zdCBNQVhfRlJBTUVfU0laRSA9IDEgKiBNQjtcblxuY29uc3QgQ0hFQ0tfRlJFUV9NUyA9IDUwO1xuXG5jbGFzcyBQbGlzdFNlcnZpY2UgZXh0ZW5kcyBCYXNlU2VydmljZVNvY2tldCB7XG4gIGNvbnN0cnVjdG9yIChzb2NrZXRDbGllbnQpIHtcbiAgICBzdXBlcihzb2NrZXRDbGllbnQpO1xuXG4gICAgdGhpcy5fZGVjb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VEZWNvZGVyKCk7XG4gICAgdGhpcy5fc3BsaXR0ZXIgPSBuZXcgTGVuZ3RoQmFzZWRTcGxpdHRlcih7XG4gICAgICByZWFkYWJsZVN0cmVhbTogc29ja2V0Q2xpZW50LFxuICAgICAgbGl0dGxlRW5kaWFuOiBmYWxzZSxcbiAgICAgIG1heEZyYW1lTGVuZ3RoOiBNQVhfRlJBTUVfU0laRSxcbiAgICAgIGxlbmd0aEZpZWxkT2Zmc2V0OiAwLFxuICAgICAgbGVuZ3RoRmllbGRMZW5ndGg6IDQsXG4gICAgICBsZW5ndGhBZGp1c3RtZW50OiA0LFxuICAgIH0pO1xuICAgIHRoaXMuX3NvY2tldENsaWVudC5waXBlKHRoaXMuX3NwbGl0dGVyKS5waXBlKHRoaXMuX2RlY29kZXIpO1xuXG4gICAgdGhpcy5fZW5jb2RlciA9IG5ldyBQbGlzdFNlcnZpY2VFbmNvZGVyKCk7XG4gICAgdGhpcy5fZW5jb2Rlci5waXBlKHRoaXMuX3NvY2tldENsaWVudCk7XG4gICAgdGhpcy5fYXNzaWduQ2xpZW50RmFpbHVyZUhhbmRsZXJzKHRoaXMuX2VuY29kZXIpO1xuXG4gICAgdGhpcy5yZXBseVF1ZXVlID0gW107XG4gICAgdGhpcy5fZGVjb2Rlci5vbignZGF0YScsIChkYXRhKSA9PiB0aGlzLnJlcGx5UXVldWUucHVzaChkYXRhKSk7XG4gIH1cblxuICBhc3luYyBzZW5kUGxpc3RBbmRSZWNlaXZlIChqc29uLCB0aW1lb3V0ID0gNTAwMCkge1xuICAgIHRoaXMuc2VuZFBsaXN0KGpzb24pO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLnJlY2VpdmVQbGlzdCh0aW1lb3V0KTtcbiAgfVxuXG4gIHNlbmRQbGlzdCAoanNvbikge1xuICAgIGlmICghanNvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW50IHNlbmQgYSBudWxsIGEgb2JqZWN0Jyk7XG4gICAgfVxuICAgIHRoaXMuX2VuY29kZXIud3JpdGUoanNvbik7XG4gIH1cblxuICBhc3luYyByZWNlaXZlUGxpc3QgKHRpbWVvdXQgPSA1MDAwKSB7XG4gICAgcmV0dXJuIGF3YWl0IG5ldyBCKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHF1ZXVlID0gdGhpcy5yZXBseVF1ZXVlO1xuICAgICAgY29uc3QgZGF0YSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICByZXNvbHZlKGRhdGEpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBjaGVja0V4aXN0ID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICBjb25zdCBkYXRhID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgaWYgKCFkYXRhKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFySW50ZXJ2YWwoY2hlY2tFeGlzdCk7XG4gICAgICAgIHJlc29sdmUoZGF0YSk7XG4gICAgICB9LCBDSEVDS19GUkVRX01TKTtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBjbGVhckludGVydmFsKGNoZWNrRXhpc3QpO1xuICAgICAgICByZWplY3QobmV3IEVycm9yKGBGYWlsZWQgdG8gcmVjZWl2ZSBhbnkgZGF0YSB3aXRoaW4gdGhlIHRpbWVvdXQ6ICR7dGltZW91dH1gKSk7XG4gICAgICB9LCB0aW1lb3V0KTtcbiAgICB9KTtcbiAgfVxuXG4gIGVuYWJsZVNlc3Npb25TU0wgKGhvc3RQcml2YXRlS2V5LCBob3N0Q2VydGlmaWNhdGUpIHtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQudW5waXBlKHRoaXMuX3NwbGl0dGVyKTtcbiAgICB0aGlzLl9lbmNvZGVyLnVucGlwZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICAgIHRoaXMuX3NvY2tldENsaWVudCA9IHVwZ3JhZGVUb1NTTCh0aGlzLl9zb2NrZXRDbGllbnQsIGhvc3RQcml2YXRlS2V5LCBob3N0Q2VydGlmaWNhdGUpO1xuICAgIHRoaXMuX2VuY29kZXIucGlwZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICAgIHRoaXMuX3NvY2tldENsaWVudC5waXBlKHRoaXMuX3NwbGl0dGVyKS5waXBlKHRoaXMuX2RlY29kZXIpO1xuICB9XG59XG5cbmV4cG9ydCB7IFBsaXN0U2VydmljZSB9O1xuZXhwb3J0IGRlZmF1bHQgUGxpc3RTZXJ2aWNlO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0EsTUFBTUEsY0FBYyxHQUFHLENBQUMsR0FBR0MsYUFBRTtBQUU3QixNQUFNQyxhQUFhLEdBQUcsRUFBRTtBQUV4QixNQUFNQyxZQUFZLFNBQVNDLDhCQUFpQixDQUFDO0VBQzNDQyxXQUFXLENBQUVDLFlBQVksRUFBRTtJQUN6QixLQUFLLENBQUNBLFlBQVksQ0FBQztJQUVuQixJQUFJLENBQUNDLFFBQVEsR0FBRyxJQUFJQyw0QkFBbUIsRUFBRTtJQUN6QyxJQUFJLENBQUNDLFNBQVMsR0FBRyxJQUFJQyw0QkFBbUIsQ0FBQztNQUN2Q0MsY0FBYyxFQUFFTCxZQUFZO01BQzVCTSxZQUFZLEVBQUUsS0FBSztN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