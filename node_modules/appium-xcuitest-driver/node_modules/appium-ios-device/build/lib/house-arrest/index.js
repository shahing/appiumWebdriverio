"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.HouseArrestService = exports.HOUSE_ARREST_SERVICE_NAME = void 0;
require("source-map-support/register");
var _plistServiceDecoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-decoder"));
var _plistServiceEncoder = _interopRequireDefault(require("../plist-service/transformer/plist-service-encoder"));
var _lengthBasedSplitter = _interopRequireDefault(require("../util/transformer/length-based-splitter"));
var _constants = require("../constants");
var _afc = _interopRequireDefault(require("../afc"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _baseService = require("../base-service");
const HOUSE_ARREST_SERVICE_NAME = 'com.apple.mobile.house_arrest';
exports.HOUSE_ARREST_SERVICE_NAME = HOUSE_ARREST_SERVICE_NAME;
const MAX_FRAME_SIZE = 1 * _constants.KB;
class HouseArrestService extends _baseService.BaseServiceSocket {
  constructor(socketClient) {
    super(socketClient);
    this._decoder = new _plistServiceDecoder.default();
    this._splitter = new _lengthBasedSplitter.default({
      readableStream: socketClient,
      littleEndian: false,
      maxFrameLength: MAX_FRAME_SIZE,
      lengthFieldOffset: 0,
      lengthFieldLength: 4,
      lengthAdjustment: 4
    });
    this._socketClient.pipe(this._splitter).pipe(this._decoder);
    this._encoder = new _plistServiceEncoder.default();
    this._encoder.pipe(this._socketClient);
    this._assignClientFailureHandlers(this._encoder);
  }
  async vendContainer(bundleId) {
    const responsePromise = this._receivePlistPromise();
    this._encoder.write({
      Command: 'VendContainer',
      Identifier: bundleId
    });
    const response = await responsePromise;
    if (response.Status !== 'Complete') {
      throw new Error(`Failed to vend into the application container. Error: ${response.Error}`);
    }
    this._socketClient.unpipe(this._splitter);
    this._splitter.unpipe(this._decoder);
    return new _afc.default(this._socketClient);
  }
  async vendDocuments(bundleId) {
    const responsePromise = this._receivePlistPromise();
    this._encoder.write({
      Command: 'VendDocuments',
      Identifier: bundleId
    });
    const response = await responsePromise;
    if (response.Status !== 'Complete') {
      throw new Error(`Failed to vend into the application documents. Error: ${response.Error}`);
    }
    this._socketClient.unpipe(this._splitter);
    this._splitter.unpipe(this._decoder);
    return new _afc.default(this._socketClient);
  }
  _receivePlistPromise(timeout = 10000) {
    return new _bluebird.default((resolve, reject) => {
      this._decoder.once('data', resolve);
      setTimeout(() => reject(new Error(`Failed to receive any data within the timeout: ${timeout}`)), timeout);
    });
  }
}
exports.HouseArrestService = HouseArrestService;
var _default = HouseArrestService;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJIT1VTRV9BUlJFU1RfU0VSVklDRV9OQU1FIiwiTUFYX0ZSQU1FX1NJWkUiLCJLQiIsIkhvdXNlQXJyZXN0U2VydmljZSIsIkJhc2VTZXJ2aWNlU29ja2V0IiwiY29uc3RydWN0b3IiLCJzb2NrZXRDbGllbnQiLCJfZGVjb2RlciIsIlBsaXN0U2VydmljZURlY29kZXIiLCJfc3BsaXR0ZXIiLCJMZW5ndGhCYXNlZFNwbGl0dGVyIiwicmVhZGFibGVTdHJlYW0iLCJsaXR0bGVFbmRpYW4iLCJtYXhGcmFtZUxlbmd0aCIsImxlbmd0aEZpZWxkT2Zmc2V0IiwibGVuZ3RoRmllbGRMZW5ndGgiLCJsZW5ndGhBZGp1c3RtZW50IiwiX3NvY2tldENsaWVudCIsInBpcGUiLCJfZW5jb2RlciIsIlBsaXN0U2VydmljZUVuY29kZXIiLCJfYXNzaWduQ2xpZW50RmFpbHVyZUhhbmRsZXJzIiwidmVuZENvbnRhaW5lciIsImJ1bmRsZUlkIiwicmVzcG9uc2VQcm9taXNlIiwiX3JlY2VpdmVQbGlzdFByb21pc2UiLCJ3cml0ZSIsIkNvbW1hbmQiLCJJZGVudGlmaWVyIiwicmVzcG9uc2UiLCJTdGF0dXMiLCJFcnJvciIsInVucGlwZSIsIkFmY1NlcnZpY2UiLCJ2ZW5kRG9jdW1lbnRzIiwidGltZW91dCIsIkIiLCJyZXNvbHZlIiwicmVqZWN0Iiwib25jZSIsInNldFRpbWVvdXQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvaG91c2UtYXJyZXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQbGlzdFNlcnZpY2VEZWNvZGVyIGZyb20gJy4uL3BsaXN0LXNlcnZpY2UvdHJhbnNmb3JtZXIvcGxpc3Qtc2VydmljZS1kZWNvZGVyJztcbmltcG9ydCBQbGlzdFNlcnZpY2VFbmNvZGVyIGZyb20gJy4uL3BsaXN0LXNlcnZpY2UvdHJhbnNmb3JtZXIvcGxpc3Qtc2VydmljZS1lbmNvZGVyJztcbmltcG9ydCBMZW5ndGhCYXNlZFNwbGl0dGVyIGZyb20gJy4uL3V0aWwvdHJhbnNmb3JtZXIvbGVuZ3RoLWJhc2VkLXNwbGl0dGVyJztcbmltcG9ydCB7IEtCIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCBBZmNTZXJ2aWNlIGZyb20gJy4uL2FmYyc7XG5pbXBvcnQgQiBmcm9tICdibHVlYmlyZCc7XG5pbXBvcnQgeyBCYXNlU2VydmljZVNvY2tldCB9IGZyb20gJy4uL2Jhc2Utc2VydmljZSc7XG5cblxuY29uc3QgSE9VU0VfQVJSRVNUX1NFUlZJQ0VfTkFNRSA9ICdjb20uYXBwbGUubW9iaWxlLmhvdXNlX2FycmVzdCc7XG5jb25zdCBNQVhfRlJBTUVfU0laRSA9IDEgKiBLQjtcblxuY2xhc3MgSG91c2VBcnJlc3RTZXJ2aWNlIGV4dGVuZHMgQmFzZVNlcnZpY2VTb2NrZXQge1xuICBjb25zdHJ1Y3RvciAoc29ja2V0Q2xpZW50KSB7XG4gICAgc3VwZXIoc29ja2V0Q2xpZW50KTtcblxuICAgIHRoaXMuX2RlY29kZXIgPSBuZXcgUGxpc3RTZXJ2aWNlRGVjb2RlcigpO1xuICAgIHRoaXMuX3NwbGl0dGVyID0gbmV3IExlbmd0aEJhc2VkU3BsaXR0ZXIoe1xuICAgICAgcmVhZGFibGVTdHJlYW06IHNvY2tldENsaWVudCxcbiAgICAgIGxpdHRsZUVuZGlhbjogZmFsc2UsXG4gICAgICBtYXhGcmFtZUxlbmd0aDogTUFYX0ZSQU1FX1NJWkUsXG4gICAgICBsZW5ndGhGaWVsZE9mZnNldDogMCxcbiAgICAgIGxlbmd0aEZpZWxkTGVuZ3RoOiA0LFxuICAgICAgbGVuZ3RoQWRqdXN0bWVudDogNCxcbiAgICB9KTtcbiAgICB0aGlzLl9zb2NrZXRDbGllbnQucGlwZSh0aGlzLl9zcGxpdHRlcikucGlwZSh0aGlzLl9kZWNvZGVyKTtcblxuICAgIHRoaXMuX2VuY29kZXIgPSBuZXcgUGxpc3RTZXJ2aWNlRW5jb2RlcigpO1xuICAgIHRoaXMuX2VuY29kZXIucGlwZSh0aGlzLl9zb2NrZXRDbGllbnQpO1xuICAgIHRoaXMuX2Fzc2lnbkNsaWVudEZhaWx1cmVIYW5kbGVycyh0aGlzLl9lbmNvZGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZW5kcyBpbnRvIHRoZSBhcHBsaWNhdGlvbiBjb250YWluZXIgYW5kIHJldHVybnMgYW4gQWZjU2VydmljZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgVGhlIGJ1bmRsZSBpZCBvZiB0aGUgYXBwIGNvbnRhaW5lciB0aGF0IHdlIHdpbGwgZW50ZXIgdG9cbiAgICogQHRocm93cyBXaWxsIHRocm93IGFuIGVycm9yIGlmIGhvdXNlIGFycmVzdCBmYWlscyB0byBhY2Nlc3MgdGhlIGFwcGxpY2F0aW9uJ3MgY29udGFpbmVyXG4gICAqIEByZXR1cm5zIHtBZmNTZXJ2aWNlfVxuICAgKi9cbiAgYXN5bmMgdmVuZENvbnRhaW5lciAoYnVuZGxlSWQpIHtcbiAgICBjb25zdCByZXNwb25zZVByb21pc2UgPSB0aGlzLl9yZWNlaXZlUGxpc3RQcm9taXNlKCk7XG4gICAgdGhpcy5fZW5jb2Rlci53cml0ZSh7XG4gICAgICBDb21tYW5kOiAnVmVuZENvbnRhaW5lcicsXG4gICAgICBJZGVudGlmaWVyOiBidW5kbGVJZCxcbiAgICB9KTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc3BvbnNlUHJvbWlzZTtcbiAgICBpZiAocmVzcG9uc2UuU3RhdHVzICE9PSAnQ29tcGxldGUnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byB2ZW5kIGludG8gdGhlIGFwcGxpY2F0aW9uIGNvbnRhaW5lci4gRXJyb3I6ICR7cmVzcG9uc2UuRXJyb3J9YCk7XG4gICAgfVxuICAgIHRoaXMuX3NvY2tldENsaWVudC51bnBpcGUodGhpcy5fc3BsaXR0ZXIpO1xuICAgIHRoaXMuX3NwbGl0dGVyLnVucGlwZSh0aGlzLl9kZWNvZGVyKTtcbiAgICByZXR1cm4gbmV3IEFmY1NlcnZpY2UodGhpcy5fc29ja2V0Q2xpZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBWZW5kcyBpbnRvIHRoZSBhcHBsaWNhdGlvbiBkb2N1bWVudHMgYW5kIHJldHVybnMgYW4gQWZjU2VydmljZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gYnVuZGxlSWQgVGhlIGJ1bmRsZSBpZCBvZiB0aGUgYXBwIGRvY3VtZW50cyB0aGF0IHdlIHdpbGwgZW50ZXIgdG9cbiAgICogQHRocm93cyBXaWxsIHRocm93IGFuIGVycm9yIGlmIGhvdXNlIGFycmVzdCBmYWlscyB0byBhY2Nlc3MgdGhlIGFwcGxpY2F0aW9uJ3MgZG9jdW1lbnRzXG4gICAqIEByZXR1cm5zIHtBZmNTZXJ2aWNlfVxuICAgKi9cbiAgYXN5bmMgdmVuZERvY3VtZW50cyAoYnVuZGxlSWQpIHtcbiAgICBjb25zdCByZXNwb25zZVByb21pc2UgPSB0aGlzLl9yZWNlaXZlUGxpc3RQcm9taXNlKCk7XG4gICAgdGhpcy5fZW5jb2Rlci53cml0ZSh7XG4gICAgICBDb21tYW5kOiAnVmVuZERvY3VtZW50cycsXG4gICAgICBJZGVudGlmaWVyOiBidW5kbGVJZCxcbiAgICB9KTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlc3BvbnNlUHJvbWlzZTtcbiAgICBpZiAocmVzcG9uc2UuU3RhdHVzICE9PSAnQ29tcGxldGUnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byB2ZW5kIGludG8gdGhlIGFwcGxpY2F0aW9uIGRvY3VtZW50cy4gRXJyb3I6ICR7cmVzcG9uc2UuRXJyb3J9YCk7XG4gICAgfVxuICAgIHRoaXMuX3NvY2tldENsaWVudC51bnBpcGUodGhpcy5fc3BsaXR0ZXIpO1xuICAgIHRoaXMuX3NwbGl0dGVyLnVucGlwZSh0aGlzLl9kZWNvZGVyKTtcbiAgICByZXR1cm4gbmV3IEFmY1NlcnZpY2UodGhpcy5fc29ja2V0Q2xpZW50KTtcbiAgfVxuXG4gIF9yZWNlaXZlUGxpc3RQcm9taXNlICh0aW1lb3V0ID0gMTAwMDApIHtcbiAgICByZXR1cm4gbmV3IEIoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5fZGVjb2Rlci5vbmNlKCdkYXRhJywgcmVzb2x2ZSk7XG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHJlamVjdChuZXcgRXJyb3IoYEZhaWxlZCB0byByZWNlaXZlIGFueSBkYXRhIHdpdGhpbiB0aGUgdGltZW91dDogJHt0aW1lb3V0fWApKSwgdGltZW91dCk7XG4gICAgfSk7XG4gIH1cbn1cblxuZXhwb3J0IHsgSG91c2VBcnJlc3RTZXJ2aWNlLCBIT1VTRV9BUlJFU1RfU0VSVklDRV9OQU1FIH07XG5leHBvcnQgZGVmYXVsdCBIb3VzZUFycmVzdFNlcnZpY2U7XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQSxNQUFNQSx5QkFBeUIsR0FBRywrQkFBK0I7QUFBQztBQUNsRSxNQUFNQyxjQUFjLEdBQUcsQ0FBQyxHQUFHQyxhQUFFO0FBRTdCLE1BQU1DLGtCQUFrQixTQUFTQyw4QkFBaUIsQ0FBQztFQUNqREMsV0FBVyxDQUFFQyxZQUFZLEVBQUU7SUFDekIsS0FBSyxDQUFDQSxZQUFZLENBQUM7SUFFbkIsSUFBSSxDQUFDQyxRQUFRLEdBQUcsSUFBSUMsNEJBQW1CLEVBQUU7SUFDekMsSUFBSSxDQUFDQyxTQUFTLEdBQUcsSUFBSUMsNEJBQW1CLENBQUM7TUFDdkNDLGNBQWMsRUFBRUwsWUFBWTtNQUM1Qk0sWUFBWSxFQUFFLEtBQUs7TUFDbkJDLGNBQWMsRUFBRVosY0FBYztNQUM5QmEsaUJBQWlCLEVBQUUsQ0FBQztNQUNwQkMsaUJBQWlCLEVBQUUsQ0FBQztNQUNwQkMsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxDQUFDQyxhQUFhLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUNULFNBQVMsQ0FBQyxDQUFDUyxJQUFJLENBQUMsSUFBSSxDQUFDWCxRQUFRLENBQUM7SUFFM0QsSUFBSSxDQUFDWSxRQUFRLEdBQUcsSUFBSUMsNEJBQW1CLEVBQUU7SUFDekMsSUFBSSxDQUFDRCxRQUFRLENBQUNELElBQUksQ0FBQyxJQUFJLENBQUNELGFBQWEsQ0FBQztJQUN0QyxJQUFJLENBQUNJLDRCQUE0QixDQUFDLElBQUksQ0FBQ0YsUUFBUSxDQUFDO0VBQ2xEO0VBUUEsTUFBTUcsYUFBYSxDQUFFQyxRQUFRLEVBQUU7SUFDN0IsTUFBTUMsZUFBZSxHQUFHLElBQUksQ0FBQ0Msb0JBQW9CLEVBQUU7SUFDbkQsSUFBSSxDQUFDTixRQUFRLENBQUNPLEtBQUssQ0FBQztNQUNsQkMsT0FBTyxFQUFFLGVBQWU7TUFDeEJDLFVBQVUsRUFBRUw7SUFDZCxDQUFDLENBQUM7SUFDRixNQUFNTSxRQUFRLEdBQUcsTUFBTUwsZUFBZTtJQUN0QyxJQUFJSyxRQUFRLENBQUNDLE1BQU0sS0FBSyxVQUFVLEVBQUU7TUFDbEMsTUFBTSxJQUFJQyxLQUFLLENBQUUseURBQXdERixRQUFRLENBQUNFLEtBQU0sRUFBQyxDQUFDO0lBQzVGO0lBQ0EsSUFBSSxDQUFDZCxhQUFhLENBQUNlLE1BQU0sQ0FBQyxJQUFJLENBQUN2QixTQUFTLENBQUM7SUFDekMsSUFBSSxDQUFDQSxTQUFTLENBQUN1QixNQUFNLENBQUMsSUFBSSxDQUFDekIsUUFBUSxDQUFDO0lBQ3BDLE9BQU8sSUFBSTBCLFlBQVUsQ0FBQyxJQUFJLENBQUNoQixhQUFhLENBQUM7RUFDM0M7RUFRQSxNQUFNaUIsYUFBYSxDQUFFWCxRQUFRLEVBQUU7SUFDN0IsTUFBTUMsZUFBZSxHQUFHLElBQUksQ0FBQ0Msb0JBQW9CLEVBQUU7SUFDbkQsSUFBSSxDQUFDTixRQUFRLENBQUNPLEtBQUssQ0FBQztNQUNsQkMsT0FBTyxFQUFFLGVBQWU7TUFDeEJDLFVBQVUsRUFBRUw7SUFDZCxDQUFDLENBQUM7SUFDRixNQUFNTSxRQUFRLEdBQUcsTUFBTUwsZUFBZTtJQUN0QyxJQUFJSyxRQUFRLENBQUNDLE1BQU0sS0FBSyxVQUFVLEVBQUU7TUFDbEMsTUFBTSxJQUFJQyxLQUFLLENBQUUseURBQXdERixRQUFRLENBQUNFLEtBQU0sRUFBQyxDQUFDO0lBQzVGO0lBQ0EsSUFBSSxDQUFDZCxhQUFhLENBQUNlLE1BQU0sQ0FBQyxJQUFJLENBQUN2QixTQUFTLENBQUM7SUFDekMsSUFBSSxDQUFDQSxTQUFTLENBQUN1QixNQUFNLENBQUMsSUFBSSxDQUFDekIsUUFBUSxDQUFDO0lBQ3BDLE9BQU8sSUFBSTBCLFlBQVUsQ0FBQyxJQUFJLENBQUNoQixhQUFhLENBQUM7RUFDM0M7RUFFQVEsb0JBQW9CLENBQUVVLE9BQU8sR0FBRyxLQUFLLEVBQUU7SUFDckMsT0FBTyxJQUFJQyxpQkFBQyxDQUFDLENBQUNDLE9BQU8sRUFBRUMsTUFBTSxLQUFLO01BQ2hDLElBQUksQ0FBQy9CLFFBQVEsQ0FBQ2dDLElBQUksQ0FBQyxNQUFNLEVBQUVGLE9BQU8sQ0FBQztNQUNuQ0csVUFBVSxDQUFDLE1BQU1GLE1BQU0sQ0FBQyxJQUFJUCxLQUFLLENBQUUsa0RBQWlESSxPQUFRLEVBQUMsQ0FBQyxDQUFDLEVBQUVBLE9BQU8sQ0FBQztJQUMzRyxDQUFDLENBQUM7RUFDSjtBQUNGO0FBQUM7QUFBQSxlQUdjaEMsa0JBQWtCO0FBQUEifQ==