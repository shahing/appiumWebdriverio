"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startAfcService = startAfcService;
exports.startCrashLogService = startCrashLogService;
exports.startHouseArrestService = startHouseArrestService;
exports.startInstallationProxyService = startInstallationProxyService;
exports.startInstrumentService = startInstrumentService;
exports.startMCInstallService = startMCInstallService;
exports.startNotificationProxyService = startNotificationProxyService;
exports.startSimulateLocationService = startSimulateLocationService;
exports.startSyslogService = startSyslogService;
exports.startWebInspectorService = startWebInspectorService;
require("source-map-support/register");
var _utilities = require("./utilities");
var _syslog = require("./syslog");
var _simulatelocation = require("./simulatelocation");
var _webinspector = require("./webinspector");
var _installationProxy = require("./installation-proxy");
var _afc = require("./afc");
var _notificationProxy = require("./notification-proxy");
var _houseArrest = require("./house-arrest");
var _instrument = require("./instrument");
var _mcinstall = require("./mcinstall");
var _plistService = _interopRequireDefault(require("./plist-service"));
var _semver = _interopRequireDefault(require("semver"));
const CRASH_LOG_SERVICE_NAME = 'com.apple.crashreportcopymobile';
const INSTRUMENT_HANDSHAKE_VERSION = 14;
async function startSyslogService(udid, opts = {}) {
  const socket = await startService(udid, _syslog.SYSLOG_SERVICE_NAME, opts.socket);
  return new _syslog.SyslogService(socket);
}
async function startSimulateLocationService(udid, opts = {}) {
  const socket = await startService(udid, _simulatelocation.SIMULATE_LOCATION_SERVICE_NAME, opts.socket);
  return new _simulatelocation.SimulateLocationService(socket);
}
async function startWebInspectorService(udid, opts = {}) {
  const osVersion = opts.osVersion || (await (0, _utilities.getOSVersion)(udid, opts.socket));
  const isSimulator = !!opts.isSimulator;
  const verbose = !!opts.verbose;
  const verboseHexDump = !!opts.verboseHexDump;
  const socketChunkSize = opts.socketChunkSize;
  const maxFrameLength = opts.maxFrameLength;
  const semverVersion = _semver.default.coerce(osVersion);
  if (!semverVersion) {
    throw new Error(`Could not create a semver version out of '${osVersion}'`);
  }
  if (opts.socket) {
    return new _webinspector.WebInspectorService({
      majorOsVersion: semverVersion.major,
      isSimulator,
      socketChunkSize,
      verbose,
      verboseHexDump,
      socketClient: opts.socket,
      maxFrameLength
    });
  }
  const socket = await startService(udid, _webinspector.WEB_INSPECTOR_SERVICE_NAME, undefined);
  return new _webinspector.WebInspectorService({
    majorOsVersion: semverVersion.major,
    isSimulator,
    socketChunkSize,
    verbose,
    verboseHexDump,
    socketClient: socket,
    maxFrameLength
  });
}
async function startInstallationProxyService(udid, opts = {}) {
  const socket = await startService(udid, _installationProxy.INSTALLATION_PROXY_SERVICE_NAME, opts.socket);
  return new _installationProxy.InstallationProxyService(new _plistService.default(socket));
}
async function startAfcService(udid, opts = {}) {
  const socket = await startService(udid, _afc.AFC_SERVICE_NAME, opts.socket);
  return new _afc.AfcService(socket);
}
async function startCrashLogService(udid, opts = {}) {
  const socket = await startService(udid, CRASH_LOG_SERVICE_NAME, opts.socket);
  return new _afc.AfcService(socket);
}
async function startNotificationProxyService(udid, opts = {}) {
  const socket = await startService(udid, _notificationProxy.NOTIFICATION_PROXY_SERVICE_NAME, opts.socket);
  return new _notificationProxy.NotificationProxyService(socket);
}
async function startHouseArrestService(udid, opts = {}) {
  const socket = await startService(udid, _houseArrest.HOUSE_ARREST_SERVICE_NAME, opts.socket);
  return new _houseArrest.HouseArrestService(socket);
}
async function startInstrumentService(udid, opts = {}) {
  const osVersion = opts.osVersion || (await (0, _utilities.getOSVersion)(udid, opts.socket));
  return new _instrument.InstrumentService(parseInt(osVersion.split('.')[0], 10) < INSTRUMENT_HANDSHAKE_VERSION ? await startService(udid, _instrument.INSTRUMENT_SERVICE_NAME, opts.socket, true) : await startService(udid, _instrument.INSTRUMENT_SERVICE_NAME_VERSION_14, opts.socket));
}
async function startMCInstallService(udid, opts = {}) {
  const socket = await startService(udid, _mcinstall.MC_INSTALL_SERVICE_NAME, opts.socket);
  return new _mcinstall.MCInstallProxyService(new _plistService.default(socket));
}
async function startService(udid, serviceName, socket, handshakeOnly = false) {
  const lockdown = await (0, _utilities.startLockdownSession)(udid, socket);
  try {
    const service = await lockdown.startService(serviceName);
    if (service.EnableServiceSSL) {
      return await (0, _utilities.connectPortSSL)(udid, service.Port, socket, handshakeOnly);
    } else {
      return await (0, _utilities.connectPort)(udid, service.Port, socket);
    }
  } finally {
    lockdown.close();
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,