{"version":3,"file":"dtx-encode.js","names":["DTXEncoder","Stream","Transform","constructor","objectMode","_transform","data","encoding","onData","push","_encode","sync","channelCode","selector","auxiliaries","identifier","dtx","DTXMessage","expectsReply","DTXMessageAuxBuffer","build"],"sources":["../../../../lib/instrument/transformer/dtx-encode.js"],"sourcesContent":["import Stream from 'stream';\nimport {DTXMessage, DTXMessageAuxBuffer} from '../headers';\n\n\nclass DTXEncoder extends Stream.Transform {\n\n  constructor () {\n    super({ objectMode: true });\n  }\n\n  _transform (data, encoding, onData) {\n    this.push(this._encode(data), 'buffer');\n    onData();\n  }\n\n  _encode (data) {\n    const {sync, channelCode, selector, auxiliaries, identifier} = data;\n    const dtx = new DTXMessage({\n      identifier,\n      channelCode,\n      selector,\n      expectsReply: sync\n    });\n    if (auxiliaries instanceof DTXMessageAuxBuffer) {\n      dtx.auxiliaries = auxiliaries;\n    } else {\n      dtx.auxiliaries.data = auxiliaries;\n    }\n    return dtx.build();\n  }\n}\n\nexport { DTXEncoder };\n"],"mappings":";;;;;;;;AAAA;AACA;AAGA,MAAMA,UAAU,SAASC,eAAM,CAACC,SAAS,CAAC;EAExCC,WAAW,GAAI;IACb,KAAK,CAAC;MAAEC,UAAU,EAAE;IAAK,CAAC,CAAC;EAC7B;EAEAC,UAAU,CAAEC,IAAI,EAAEC,QAAQ,EAAEC,MAAM,EAAE;IAClC,IAAI,CAACC,IAAI,CAAC,IAAI,CAACC,OAAO,CAACJ,IAAI,CAAC,EAAE,QAAQ,CAAC;IACvCE,MAAM,EAAE;EACV;EAEAE,OAAO,CAAEJ,IAAI,EAAE;IACb,MAAM;MAACK,IAAI;MAAEC,WAAW;MAAEC,QAAQ;MAAEC,WAAW;MAAEC;IAAU,CAAC,GAAGT,IAAI;IACnE,MAAMU,GAAG,GAAG,IAAIC,mBAAU,CAAC;MACzBF,UAAU;MACVH,WAAW;MACXC,QAAQ;MACRK,YAAY,EAAEP;IAChB,CAAC,CAAC;IACF,IAAIG,WAAW,YAAYK,4BAAmB,EAAE;MAC9CH,GAAG,CAACF,WAAW,GAAGA,WAAW;IAC/B,CAAC,MAAM;MACLE,GAAG,CAACF,WAAW,CAACR,IAAI,GAAGQ,WAAW;IACpC;IACA,OAAOE,GAAG,CAACI,KAAK,EAAE;EACpB;AACF;AAAC"}