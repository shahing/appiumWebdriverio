"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DTXDecoder = void 0;
require("source-map-support/register");
var _stream = _interopRequireDefault(require("stream"));
var _headers = require("../headers");
class DTXDecoder extends _stream.default.Transform {
  constructor() {
    super({
      objectMode: true
    });
    this._dtxManager = {};
    this.buffer = Buffer.allocUnsafe(0);
    this.cursor = 0;
    this.header = undefined;
  }
  _transform(data, encoding, onData) {
    this._decode(data);
    onData();
  }
  _decode(data) {
    this.buffer = Buffer.concat([this.buffer.slice(this.cursor, this.buffer.length), data]);
    this.cursor = 0;
    while (this.cursor < this.buffer.length) {
      const magic = this._recv(_headers.DTX_MESSAGE_HEADER_MAGIC_LEN);
      if (!magic) {
        return;
      }
      this.cursor -= _headers.DTX_MESSAGE_HEADER_MAGIC_LEN;
      if (magic && magic.readUInt32LE(0) === _headers.DTX_MESSAGE_HEADER_MAGIC) {
        const headerBuffer = this._recv(_headers.DTX_MESSAGE_HEADER_LENGTH);
        if (!headerBuffer) {
          return;
        }
        this.header = _headers.DTXMessageHeader.parse(headerBuffer);
        if (this.header.fragmentId === 0) {
          if (!(this.header.channel in this._dtxManager)) {
            this._dtxManager[this.header.channel] = {
              headerBuffer,
              payloadBuffer: new Buffer.allocUnsafe(0)
            };
          }
          if (this.header.fragmentCount > 1) {
            continue;
          }
        }
      }
      const bodyBuffer = this._recv(this.header.payloadLength);
      if (!bodyBuffer) {
        return;
      }
      if (this._dtxManager[this.header.channel]) {
        this._dtxManager[this.header.channel].payloadBuffer = Buffer.concat([this._dtxManager[this.header.channel].payloadBuffer, bodyBuffer]);
      }
      if (this.header.fragmentId === this.header.fragmentCount - 1) {
        data = this._dtxManager[this.header.channel];
        delete this._dtxManager[this.header.channel];
        if (data) {
          this.push(_headers.DTXMessage.parse(data.headerBuffer, data.payloadBuffer));
        }
      }
    }
    this.cursor = 0;
    this.buffer = Buffer.allocUnsafe(0);
  }
  _recv(length) {
    if (this.buffer.length < this.cursor + length) {
      return null;
    }
    const buf = this.buffer.slice(this.cursor, this.cursor + length);
    this.cursor += length;
    return buf;
  }
}
exports.DTXDecoder = DTXDecoder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEVFhEZWNvZGVyIiwiU3RyZWFtIiwiVHJhbnNmb3JtIiwiY29uc3RydWN0b3IiLCJvYmplY3RNb2RlIiwiX2R0eE1hbmFnZXIiLCJidWZmZXIiLCJCdWZmZXIiLCJhbGxvY1Vuc2FmZSIsImN1cnNvciIsImhlYWRlciIsInVuZGVmaW5lZCIsIl90cmFuc2Zvcm0iLCJkYXRhIiwiZW5jb2RpbmciLCJvbkRhdGEiLCJfZGVjb2RlIiwiY29uY2F0Iiwic2xpY2UiLCJsZW5ndGgiLCJtYWdpYyIsIl9yZWN2IiwiRFRYX01FU1NBR0VfSEVBREVSX01BR0lDX0xFTiIsInJlYWRVSW50MzJMRSIsIkRUWF9NRVNTQUdFX0hFQURFUl9NQUdJQyIsImhlYWRlckJ1ZmZlciIsIkRUWF9NRVNTQUdFX0hFQURFUl9MRU5HVEgiLCJEVFhNZXNzYWdlSGVhZGVyIiwicGFyc2UiLCJmcmFnbWVudElkIiwiY2hhbm5lbCIsInBheWxvYWRCdWZmZXIiLCJmcmFnbWVudENvdW50IiwiYm9keUJ1ZmZlciIsInBheWxvYWRMZW5ndGgiLCJwdXNoIiwiRFRYTWVzc2FnZSIsImJ1ZiJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYi9pbnN0cnVtZW50L3RyYW5zZm9ybWVyL2R0eC1kZWNvZGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0cmVhbSBmcm9tICdzdHJlYW0nO1xuaW1wb3J0IHsgRFRYX01FU1NBR0VfSEVBREVSX0xFTkdUSCwgRFRYX01FU1NBR0VfSEVBREVSX01BR0lDLCBEVFhfTUVTU0FHRV9IRUFERVJfTUFHSUNfTEVOLFxuICAgICAgICAgRFRYTWVzc2FnZUhlYWRlciwgRFRYTWVzc2FnZX0gZnJvbSAnLi4vaGVhZGVycyc7XG5cbmNsYXNzIERUWERlY29kZXIgZXh0ZW5kcyBTdHJlYW0uVHJhbnNmb3JtIHtcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgc3VwZXIoeyBvYmplY3RNb2RlOiB0cnVlIH0pO1xuICAgIHRoaXMuX2R0eE1hbmFnZXIgPSB7fTtcbiAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKTtcbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy5oZWFkZXIgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBfdHJhbnNmb3JtIChkYXRhLCBlbmNvZGluZywgb25EYXRhKSB7XG4gICAgdGhpcy5fZGVjb2RlKGRhdGEpO1xuICAgIG9uRGF0YSgpO1xuICB9XG5cbiAgX2RlY29kZSAoZGF0YSkge1xuICAgIC8vIE1lcmdlIHBhY2tldHNcbiAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuYnVmZmVyLnNsaWNlKHRoaXMuY3Vyc29yLCB0aGlzLmJ1ZmZlci5sZW5ndGgpLCBkYXRhXSk7XG4gICAgdGhpcy5jdXJzb3IgPSAwO1xuICAgIHdoaWxlICh0aGlzLmN1cnNvciA8IHRoaXMuYnVmZmVyLmxlbmd0aCkge1xuICAgICAgY29uc3QgbWFnaWMgPSB0aGlzLl9yZWN2KERUWF9NRVNTQUdFX0hFQURFUl9NQUdJQ19MRU4pO1xuICAgICAgaWYgKCFtYWdpYykgeyByZXR1cm47IH1cbiAgICAgIHRoaXMuY3Vyc29yIC09IERUWF9NRVNTQUdFX0hFQURFUl9NQUdJQ19MRU47XG4gICAgICBpZiAobWFnaWMgJiYgbWFnaWMucmVhZFVJbnQzMkxFKDApID09PSBEVFhfTUVTU0FHRV9IRUFERVJfTUFHSUMpIHtcbiAgICAgICAgY29uc3QgaGVhZGVyQnVmZmVyID0gdGhpcy5fcmVjdihEVFhfTUVTU0FHRV9IRUFERVJfTEVOR1RIKTtcbiAgICAgICAgaWYgKCFoZWFkZXJCdWZmZXIpIHsgcmV0dXJuOyB9XG4gICAgICAgIHRoaXMuaGVhZGVyID0gRFRYTWVzc2FnZUhlYWRlci5wYXJzZShoZWFkZXJCdWZmZXIpO1xuICAgICAgICBpZiAodGhpcy5oZWFkZXIuZnJhZ21lbnRJZCA9PT0gMCkge1xuICAgICAgICAgIC8vIG9ubHkgdGhlIDB0aCBmcmFnbWVudCBjb250YWlucyBhIG1lc3NhZ2UgaGVhZGVyXG4gICAgICAgICAgaWYgKCEodGhpcy5oZWFkZXIuY2hhbm5lbCBpbiB0aGlzLl9kdHhNYW5hZ2VyKSkge1xuICAgICAgICAgICAgdGhpcy5fZHR4TWFuYWdlclt0aGlzLmhlYWRlci5jaGFubmVsXSA9IHtoZWFkZXJCdWZmZXIsIHBheWxvYWRCdWZmZXI6IG5ldyBCdWZmZXIuYWxsb2NVbnNhZmUoMCl9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodGhpcy5oZWFkZXIuZnJhZ21lbnRDb3VudCA+IDEpIHtcbiAgICAgICAgICAgIC8vIENvbnRpbnVlIHRvIGdldCB0aGUgbmV4dCBtZXNzYWdlIGZyYWdtZW50c1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjb25zdCBib2R5QnVmZmVyID0gdGhpcy5fcmVjdih0aGlzLmhlYWRlci5wYXlsb2FkTGVuZ3RoKTtcbiAgICAgIGlmICghYm9keUJ1ZmZlcikgeyByZXR1cm47IH1cbiAgICAgIGlmICh0aGlzLl9kdHhNYW5hZ2VyW3RoaXMuaGVhZGVyLmNoYW5uZWxdKSB7XG4gICAgICAgIHRoaXMuX2R0eE1hbmFnZXJbdGhpcy5oZWFkZXIuY2hhbm5lbF0ucGF5bG9hZEJ1ZmZlciA9IEJ1ZmZlci5jb25jYXQoW3RoaXMuX2R0eE1hbmFnZXJbdGhpcy5oZWFkZXIuY2hhbm5lbF0ucGF5bG9hZEJ1ZmZlciwgYm9keUJ1ZmZlcl0pO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaGVhZGVyLmZyYWdtZW50SWQgPT09ICh0aGlzLmhlYWRlci5mcmFnbWVudENvdW50IC0gMSkpIHtcbiAgICAgICAgZGF0YSA9IHRoaXMuX2R0eE1hbmFnZXJbdGhpcy5oZWFkZXIuY2hhbm5lbF07XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9kdHhNYW5hZ2VyW3RoaXMuaGVhZGVyLmNoYW5uZWxdO1xuICAgICAgICBpZiAoZGF0YSkge1xuICAgICAgICAgIHRoaXMucHVzaChEVFhNZXNzYWdlLnBhcnNlKGRhdGEuaGVhZGVyQnVmZmVyLCBkYXRhLnBheWxvYWRCdWZmZXIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmN1cnNvciA9IDA7XG4gICAgdGhpcy5idWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUoMCk7XG4gIH1cblxuICBfcmVjdiAobGVuZ3RoKSB7XG4gICAgaWYgKHRoaXMuYnVmZmVyLmxlbmd0aCA8IHRoaXMuY3Vyc29yICsgbGVuZ3RoKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgYnVmID0gdGhpcy5idWZmZXIuc2xpY2UodGhpcy5jdXJzb3IsIHRoaXMuY3Vyc29yICsgbGVuZ3RoKTtcbiAgICB0aGlzLmN1cnNvciArPSBsZW5ndGg7XG4gICAgcmV0dXJuIGJ1ZjtcbiAgfVxufVxuXG5leHBvcnQgeyBEVFhEZWNvZGVyIH07XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUE7QUFDQTtBQUdBLE1BQU1BLFVBQVUsU0FBU0MsZUFBTSxDQUFDQyxTQUFTLENBQUM7RUFFeENDLFdBQVcsR0FBSTtJQUNiLEtBQUssQ0FBQztNQUFFQyxVQUFVLEVBQUU7SUFBSyxDQUFDLENBQUM7SUFDM0IsSUFBSSxDQUFDQyxXQUFXLEdBQUcsQ0FBQyxDQUFDO0lBQ3JCLElBQUksQ0FBQ0MsTUFBTSxHQUFHQyxNQUFNLENBQUNDLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDbkMsSUFBSSxDQUFDQyxNQUFNLEdBQUcsQ0FBQztJQUNmLElBQUksQ0FBQ0MsTUFBTSxHQUFHQyxTQUFTO0VBQ3pCO0VBRUFDLFVBQVUsQ0FBRUMsSUFBSSxFQUFFQyxRQUFRLEVBQUVDLE1BQU0sRUFBRTtJQUNsQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0gsSUFBSSxDQUFDO0lBQ2xCRSxNQUFNLEVBQUU7RUFDVjtFQUVBQyxPQUFPLENBQUVILElBQUksRUFBRTtJQUViLElBQUksQ0FBQ1AsTUFBTSxHQUFHQyxNQUFNLENBQUNVLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQ1gsTUFBTSxDQUFDWSxL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