"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("../logger"));
var _baseDriver = require("@appium/base-driver");
var _utils = require("../utils");
var _atoms = require("../atoms");
var _support = require("@appium/support");
var _asyncbox = require("asyncbox");
var _lodash = _interopRequireDefault(require("lodash"));
const RPC_RESPONSE_TIMEOUT_MS = 5000;
async function executeAtom(atom, args, frames) {
  if (!this.rpcClient.isConnected) {
    throw new Error('Remote debugger is not connected');
  }
  _logger.default.debug(`Executing atom '${atom}' with 'args=${JSON.stringify(args)}; frames=${frames}'`);
  const script = await (0, _atoms.getScriptForAtom)(atom, args, frames);
  const value = await this.execute(script, true);
  _logger.default.debug(`Received result for atom '${atom}' execution: ${_lodash.default.truncate((0, _utils.simpleStringify)(value), {
    length: _utils.RESPONSE_LOG_LENGTH
  })}`);
  return value;
}
async function executeAtomAsync(atom, args, frames) {
  const evaluate = async (method, opts) => await this.rpcClient.send(method, Object.assign({
    appIdKey: this.appIdKey,
    pageIdKey: this.pageIdKey,
    returnByValue: false
  }, opts));
  const promiseName = `appiumAsyncExecutePromise${_support.util.uuidV4().replace(/-/g, '')}`;
  const script = `var res, rej;
    window.${promiseName} = new Promise(function (resolve, reject) {
      res = resolve;
      rej = reject;
    });
    window.${promiseName}.resolve = res;
    window.${promiseName}.reject = rej;
    window.${promiseName};`;
  const obj = await evaluate('Runtime.evaluate', {
    expression: script
  });
  const promiseObjectId = obj.result.objectId;
  const asyncCallBack = `function (res) {
      window.${promiseName}.resolve(res);
      window.${promiseName}Value = res;
    }`;
  await this.execute(await (0, _atoms.getScriptForAtom)(atom, args, frames, asyncCallBack));
  let res;
  const subcommandTimeout = 1000;
  try {
    res = await evaluate('Runtime.awaitPromise', {
      promiseObjectId,
      returnByValue: true,
      generatePreview: true,
      saveResult: true
    });
  } catch (err) {
    if (!err.message.includes(`'Runtime.awaitPromise' was not found`)) {
      throw err;
    }
    const retryWait = 100;
    const timeout = args.length >= 3 ? args[2] : RPC_RESPONSE_TIMEOUT_MS;
    const retries = parseInt(timeout / retryWait, 10) || 1;
    const timer = new _support.timing.Timer().start();
    _logger.default.debug(`Waiting up to ${timeout}ms for async execute to finish`);
    res = await (0, _asyncbox.retryInterval)(retries, retryWait, async () => {
      const hasValue = await evaluate('Runtime.evaluate', {
        expression: `window.hasOwnProperty('${promiseName}Value');`,
        returnByValue: true
      });
      if (hasValue) {
        return await evaluate('Runtime.evaluate', {
          expression: `window.${promiseName}Value;`,
          returnByValue: true
        });
      }
      throw new _baseDriver.errors.TimeoutError(`Timed out waiting for asynchronous script ` + `result after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms'));`);
    });
  } finally {
    try {
      await this.executeAtom('execute_script', [`delete window.${promiseName};`, [null, null], subcommandTimeout], frames);
    } catch (ign) {}
  }
  return (0, _utils.convertResult)(res);
}
async function execute(command, override) {
  if (this.pageLoading && !override) {
    _logger.default.debug('Trying to execute but page is not loaded.');
    await this.waitForDom();
  }
  (0, _utils.checkParams)({
    appIdKey: this.appIdKey,
    pageIdKey: this.pageIdKey
  });
  if (this.garbageCollectOnExecute) {
    await this.garbageCollect();
  }
  _logger.default.debug(`Sending javascript command: '${_lodash.default.truncate(command, {
    length: 50
  })}'`);
  const res = await this.rpcClient.send('Runtime.evaluate', {
    expression: command,
    returnByValue: true,
    appIdKey: this.appIdKey,
    pageIdKey: this.pageIdKey
  });
  return (0, _utils.convertResult)(res);
}
async function callFunction(objectId, fn, args) {
  (0, _utils.checkParams)({
    appIdKey: this.appIdKey,
    pageIdKey: this.pageIdKey
  });
  if (this.garbageCollectOnExecute) {
    await this.garbageCollect();
  }
  _logger.default.debug('Calling javascript function');
  const res = await this.rpcClient.send('Runtime.callFunctionOn', {
    objectId,
    functionDeclaration: fn,
    arguments: args,
    returnByValue: true,
    appIdKey: this.appIdKey,
    pageIdKey: this.pageIdKey
  });
  return (0, _utils.convertResult)(res);
}
var _default = {
  executeAtom,
  executeAtomAsync,
  execute,
  callFunction
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSUENfUkVTUE9OU0VfVElNRU9VVF9NUyIsImV4ZWN1dGVBdG9tIiwiYXRvbSIsImFyZ3MiLCJmcmFtZXMiLCJycGNDbGllbnQiLCJpc0Nvbm5lY3RlZCIsIkVycm9yIiwibG9nIiwiZGVidWciLCJKU09OIiwic3RyaW5naWZ5Iiwic2NyaXB0IiwiZ2V0U2NyaXB0Rm9yQXRvbSIsInZhbHVlIiwiZXhlY3V0ZSIsIl8iLCJ0cnVuY2F0ZSIsInNpbXBsZVN0cmluZ2lmeSIsImxlbmd0aCIsIlJFU1BPTlNFX0xPR19MRU5HVEgiLCJleGVjdXRlQXRvbUFzeW5jIiwiZXZhbHVhdGUiLCJtZXRob2QiLCJvcHRzIiwic2VuZCIsIk9iamVjdCIsImFzc2lnbiIsImFwcElkS2V5IiwicGFnZUlkS2V5IiwicmV0dXJuQnlWYWx1ZSIsInByb21pc2VOYW1lIiwidXRpbCIsInV1aWRWNCIsInJlcGxhY2UiLCJvYmoiLCJleHByZXNzaW9uIiwicHJvbWlzZU9iamVjdElkIiwicmVzdWx0Iiwib2JqZWN0SWQiLCJhc3luY0NhbGxCYWNrIiwicmVzIiwic3ViY29tbWFuZFRpbWVvdXQiLCJnZW5lcmF0ZVByZXZpZXciLCJzYXZlUmVzdWx0IiwiZXJyIiwibWVzc2FnZSIsImluY2x1ZGVzIiwicmV0cnlXYWl0IiwidGltZW91dCIsInJldHJpZXMiLCJwYXJzZUludCIsInRpbWVyIiwidGltaW5nIiwiVGltZXIiLCJzdGFydCIsInJldHJ5SW50ZXJ2YWwiLCJoYXNWYWx1ZSIsImVycm9ycyIsIlRpbWVvdXRFcnJvciIsImdldER1cmF0aW9uIiwiYXNNaWxsaVNlY29uZHMiLCJ0b0ZpeGVkIiwiaWduIiwiY29udmVydFJlc3VsdCIsImNvbW1hbmQiLCJvdmVycmlkZSIsInBhZ2VMb2FkaW5nIiwid2FpdEZvckRvbSIsImNoZWNrUGFyYW1zIiwiZ2FyYmFnZUNvbGxlY3RPbkV4ZWN1dGUiLCJnYXJiYWdlQ29sbGVjdCIsImNhbGxGdW5jdGlvbiIsImZuIiwiZnVuY3Rpb25EZWNsYXJhdGlvbiIsImFyZ3VtZW50cyJdLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9taXhpbnMvZXhlY3V0ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgeyBlcnJvcnMgfSBmcm9tICdAYXBwaXVtL2Jhc2UtZHJpdmVyJztcbmltcG9ydCB7IGNoZWNrUGFyYW1zLCBzaW1wbGVTdHJpbmdpZnksIGNvbnZlcnRSZXN1bHQsIFJFU1BPTlNFX0xPR19MRU5HVEggfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBnZXRTY3JpcHRGb3JBdG9tIH0gZnJvbSAnLi4vYXRvbXMnO1xuaW1wb3J0IHsgdXRpbCwgdGltaW5nIH0gZnJvbSAnQGFwcGl1bS9zdXBwb3J0JztcbmltcG9ydCB7IHJldHJ5SW50ZXJ2YWwgfSBmcm9tICdhc3luY2JveCc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5cbi8qIEhvdyBtYW55IG1pbGxpc2Vjb25kcyB0byB3YWl0IGZvciB3ZWJraXQgdG8gcmV0dXJuIGEgcmVzcG9uc2UgYmVmb3JlIHRpbWluZyBvdXQgKi9cbmNvbnN0IFJQQ19SRVNQT05TRV9USU1FT1VUX01TID0gNTAwMDtcblxuLyoqXG4gKiBFeGVjdXRlIGEgU2VsZW5pdW0gYXRvbSBpbiBTYWZhcmlcbiAqIEBwYXJhbSB7c3RyaW5nfSBhdG9tIE5hbWUgb2YgU2VsZW5pdW0gYXRvbSAoc2VlIGF0b21zLyBkaXJlY3RvcnkpXG4gKiBAcGFyYW0ge0FycmF5PCo+fSBhcmdzIEFyZ3VtZW50cyBwYXNzZWQgdG8gdGhlIGF0b21cbiAqIEBwYXJhbSB7QXJyYXk8c3RyaW5nPn0gZnJhbWVzXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgcmVzdWx0IHJlY2VpdmVkIGZyb20gdGhlIGF0b21cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUF0b20gKGF0b20sIGFyZ3MsIGZyYW1lcykge1xuICBpZiAoIXRoaXMucnBjQ2xpZW50LmlzQ29ubmVjdGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdSZW1vdGUgZGVidWdnZXIgaXMgbm90IGNvbm5lY3RlZCcpO1xuICB9XG5cbiAgbG9nLmRlYnVnKGBFeGVjdXRpbmcgYXRvbSAnJHthdG9tfScgd2l0aCAnYXJncz0ke0pTT04uc3RyaW5naWZ5KGFyZ3MpfTsgZnJhbWVzPSR7ZnJhbWVzfSdgKTtcbiAgY29uc3Qgc2NyaXB0ID0gYXdhaXQgZ2V0U2NyaXB0Rm9yQXRvbShhdG9tLCBhcmdzLCBmcmFtZXMpO1xuICBjb25zdCB2YWx1ZSA9IGF3YWl0IHRoaXMuZXhlY3V0ZShzY3JpcHQsIHRydWUpO1xuICBsb2cuZGVidWcoYFJlY2VpdmVkIHJlc3VsdCBmb3IgYXRvbSAnJHthdG9tfScgZXhlY3V0aW9uOiAke18udHJ1bmNhdGUoc2ltcGxlU3RyaW5naWZ5KHZhbHVlKSwge2xlbmd0aDogUkVTUE9OU0VfTE9HX0xFTkdUSH0pfWApO1xuICByZXR1cm4gdmFsdWU7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVBdG9tQXN5bmMgKGF0b20sIGFyZ3MsIGZyYW1lcykge1xuICAvLyBoZWxwZXIgdG8gc2VuZCBkaXJlY3RseSB0byB0aGUgd2ViIGluc3BlY3RvclxuICBjb25zdCBldmFsdWF0ZSA9IGFzeW5jIChtZXRob2QsIG9wdHMpID0+IGF3YWl0IHRoaXMucnBjQ2xpZW50LnNlbmQobWV0aG9kLCBPYmplY3QuYXNzaWduKHtcbiAgICBhcHBJZEtleTogdGhpcy5hcHBJZEtleSxcbiAgICBwYWdlSWRLZXk6IHRoaXMucGFnZUlkS2V5LFxuICAgIHJldHVybkJ5VmFsdWU6IGZhbHNlLFxuICB9LCBvcHRzKSk7XG5cbiAgLy8gZmlyc3QgY3JlYXRlIGEgUHJvbWlzZSBvbiB0aGUgcGFnZSwgc2F2aW5nIHRoZSByZXNvbHZlL3JlamVjdCBmdW5jdGlvbnNcbiAgLy8gYXMgcHJvcGVydGllc1xuICBjb25zdCBwcm9taXNlTmFtZSA9IGBhcHBpdW1Bc3luY0V4ZWN1dGVQcm9taXNlJHt1dGlsLnV1aWRWNCgpLnJlcGxhY2UoLy0vZywgJycpfWA7XG4gIGNvbnN0IHNjcmlwdCA9XG4gICAgYHZhciByZXMsIHJlajtcbiAgICB3aW5kb3cuJHtwcm9taXNlTmFtZX0gPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICByZXMgPSByZXNvbHZlO1xuICAgICAgcmVqID0gcmVqZWN0O1xuICAgIH0pO1xuICAgIHdpbmRvdy4ke3Byb21pc2VOYW1lfS5yZXNvbHZlID0gcmVzO1xuICAgIHdpbmRvdy4ke3Byb21pc2VOYW1lfS5yZWplY3QgPSByZWo7XG4gICAgd2luZG93LiR7cHJvbWlzZU5hbWV9O2A7XG4gIGNvbnN0IG9iaiA9IGF3YWl0IGV2YWx1YXRlKCdSdW50aW1lLmV2YWx1YXRlJywge1xuICAgIGV4cHJlc3Npb246IHNjcmlwdCxcbiAgfSk7XG4gIGNvbnN0IHByb21pc2VPYmplY3RJZCA9IG9iai5yZXN1bHQub2JqZWN0SWQ7XG5cbiAgLy8gZXhlY3V0ZSB0aGUgYXRvbSwgY2FsbGluZyBiYWNrIHRvIHRoZSByZXNvbHZlIGZ1bmN0aW9uXG4gIGNvbnN0IGFzeW5jQ2FsbEJhY2sgPVxuICAgIGBmdW5jdGlvbiAocmVzKSB7XG4gICAgICB3aW5kb3cuJHtwcm9taXNlTmFtZX0ucmVzb2x2ZShyZXMpO1xuICAgICAgd2luZG93LiR7cHJvbWlzZU5hbWV9VmFsdWUgPSByZXM7XG4gICAgfWA7XG4gIGF3YWl0IHRoaXMuZXhlY3V0ZShhd2FpdCBnZXRTY3JpcHRGb3JBdG9tKGF0b20sIGFyZ3MsIGZyYW1lcywgYXN5bmNDYWxsQmFjaykpO1xuXG4gIC8vIHdhaXQgZm9yIHRoZSBwcm9taXNlIHRvIGJlIHJlc29sdmVkXG4gIGxldCByZXM7XG4gIGNvbnN0IHN1YmNvbW1hbmRUaW1lb3V0ID0gMTAwMDsgLy8gdGltZW91dCBvbiBpbmRpdmlkdWFsIGNvbW1hbmRzXG4gIHRyeSB7XG4gICAgcmVzID0gYXdhaXQgZXZhbHVhdGUoJ1J1bnRpbWUuYXdhaXRQcm9taXNlJywge1xuICAgICAgcHJvbWlzZU9iamVjdElkLFxuICAgICAgcmV0dXJuQnlWYWx1ZTogdHJ1ZSxcbiAgICAgIGdlbmVyYXRlUHJldmlldzogdHJ1ZSxcbiAgICAgIHNhdmVSZXN1bHQ6IHRydWUsXG4gICAgfSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmICghZXJyLm1lc3NhZ2UuaW5jbHVkZXMoYCdSdW50aW1lLmF3YWl0UHJvbWlzZScgd2FzIG5vdCBmb3VuZGApKSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIC8vIGF3YWl0UHJvbWlzZSBpcyBub3QgYWx3YXlzIGF2YWlsYWJsZSwgc28gc2ltdWxhdGUgaXQgd2l0aCBwb2xsXG4gICAgY29uc3QgcmV0cnlXYWl0ID0gMTAwO1xuICAgIGNvbnN0IHRpbWVvdXQgPSAoYXJncy5sZW5ndGggPj0gMykgPyBhcmdzWzJdIDogUlBDX1JFU1BPTlNFX1RJTUVPVVRfTVM7XG4gICAgLy8gaWYgdGhlIHRpbWVvdXQgbWF0aCB0dXJucyB1cCAwIHJldHJpZXMsIG1ha2Ugc3VyZSBpdCBoYXBwZW5zIG9uY2VcbiAgICBjb25zdCByZXRyaWVzID0gcGFyc2VJbnQodGltZW91dCAvIHJldHJ5V2FpdCwgMTApIHx8IDE7XG4gICAgY29uc3QgdGltZXIgPSBuZXcgdGltaW5nLlRpbWVyKCkuc3RhcnQoKTtcbiAgICBsb2cuZGVidWcoYFdhaXRpbmcgdXAgdG8gJHt0aW1lb3V0fW1zIGZvciBhc3luYyBleGVjdXRlIHRvIGZpbmlzaGApO1xuICAgIHJlcyA9IGF3YWl0IHJldHJ5SW50ZXJ2YWwocmV0cmllcywgcmV0cnlXYWl0LCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyB0aGUgYXRvbSBfd2lsbF8gcmV0dXJuLCBlaXRoZXIgYmVjYXVzZSBpdCBmaW5pc2hlZCBvciBhbiBlcnJvclxuICAgICAgLy8gaW5jbHVkaW5nIGEgdGltZW91dCBlcnJvclxuICAgICAgY29uc3QgaGFzVmFsdWUgPSBhd2FpdCBldmFsdWF0ZSgnUnVudGltZS5ldmFsdWF0ZScsIHtcbiAgICAgICAgZXhwcmVzc2lvbjogYHdpbmRvdy5oYXNPd25Qcm9wZXJ0eSgnJHtwcm9taXNlTmFtZX1WYWx1ZScpO2AsXG4gICAgICAgIHJldHVybkJ5VmFsdWU6IHRydWUsXG4gICAgICB9KTtcbiAgICAgIGlmIChoYXNWYWx1ZSkge1xuICAgICAgICAvLyB3ZSBvbmx5IHB1dCB0aGUgcHJvcGVydHkgb24gYHdpbmRvd2Agd2hlbiB0aGUgY2FsbGJhY2sgaXMgY2FsbGVkLFxuICAgICAgICAvLyBzbyBpZiBpdCBpcyB0aGVyZSwgZXZlcnl0aGluZyBpcyBkb25lXG4gICAgICAgIHJldHVybiBhd2FpdCBldmFsdWF0ZSgnUnVudGltZS5ldmFsdWF0ZScsIHtcbiAgICAgICAgICBleHByZXNzaW9uOiBgd2luZG93LiR7cHJvbWlzZU5hbWV9VmFsdWU7YCxcbiAgICAgICAgICByZXR1cm5CeVZhbHVlOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIHRocm93IGEgVGltZW91dEVycm9yLCBvciBlbHNlIGl0IG5lZWRzIHRvIGJlIGNhdWdodCBhbmQgcmUtdGhyb3duXG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLlRpbWVvdXRFcnJvcihgVGltZWQgb3V0IHdhaXRpbmcgZm9yIGFzeW5jaHJvbm91cyBzY3JpcHQgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgcmVzdWx0IGFmdGVyICR7dGltZXIuZ2V0RHVyYXRpb24oKS5hc01pbGxpU2Vjb25kcy50b0ZpeGVkKDApfW1zJykpO2ApO1xuICAgIH0pO1xuICB9IGZpbmFsbHkge1xuICAgIHRyeSB7XG4gICAgICAvLyB0cnkgdG8gZ2V0IHJpZCBvZiB0aGUgcHJvbWlzZVxuICAgICAgYXdhaXQgdGhpcy5leGVjdXRlQXRvbSgnZXhlY3V0ZV9zY3JpcHQnLCBbYGRlbGV0ZSB3aW5kb3cuJHtwcm9taXNlTmFtZX07YCwgW251bGwsIG51bGxdLCBzdWJjb21tYW5kVGltZW91dF0sIGZyYW1lcyk7XG4gICAgfSBjYXRjaCAoaWduKSB7fVxuICB9XG4gIHJldHVybiBjb252ZXJ0UmVzdWx0KHJlcyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGUgKGNvbW1hbmQsIG92ZXJyaWRlKSB7XG4gIC8vIGlmIHRoZSBwYWdlIGlzIG5vdCBsb2FkZWQgeWV0LCB3YWl0IGZvciBpdFxuICBpZiAodGhpcy5wYWdlTG9hZGluZyAmJiAhb3ZlcnJpZGUpIHtcbiAgICBsb2cuZGVidWcoJ1RyeWluZyB0byBleGVjdXRlIGJ1dCBwYWdlIGlzIG5vdCBsb2FkZWQuJyk7XG4gICAgYXdhaXQgdGhpcy53YWl0Rm9yRG9tKCk7XG4gIH1cblxuICBjaGVja1BhcmFtcyh7YXBwSWRLZXk6IHRoaXMuYXBwSWRLZXksIHBhZ2VJZEtleTogdGhpcy5wYWdlSWRLZXl9KTtcblxuICBpZiAodGhpcy5nYXJiYWdlQ29sbGVjdE9uRXhlY3V0ZSkge1xuICAgIGF3YWl0IHRoaXMuZ2FyYmFnZUNvbGxlY3QoKTtcbiAgfVxuXG4gIGxvZy5kZWJ1ZyhgU2VuZGluZyBqYXZhc2NyaXB0IGNvbW1hbmQ6ICcke18udHJ1bmNhdGUoY29tbWFuZCwge2xlbmd0aDogNTB9KX0nYCk7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IHRoaXMucnBjQ2xpZW50LnNlbmQoJ1J1bnRpbWUuZXZhbHVhdGUnLCB7XG4gICAgZXhwcmVzc2lvbjogY29tbWFuZCxcbiAgICByZXR1cm5CeVZhbHVlOiB0cnVlLFxuICAgIGFwcElkS2V5OiB0aGlzLmFwcElkS2V5LFxuICAgIHBhZ2VJZEtleTogdGhpcy5wYWdlSWRLZXksXG4gIH0pO1xuXG4gIHJldHVybiBjb252ZXJ0UmVzdWx0KHJlcyk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNhbGxGdW5jdGlvbiAob2JqZWN0SWQsIGZuLCBhcmdzKSB7XG4gIGNoZWNrUGFyYW1zKHthcHBJZEtleTogdGhpcy5hcHBJZEtleSwgcGFnZUlkS2V5OiB0aGlzLnBhZ2VJZEtleX0pO1xuXG4gIGlmICh0aGlzLmdhcmJhZ2VDb2xsZWN0T25FeGVjdXRlKSB7XG4gICAgYXdhaXQgdGhpcy5nYXJiYWdlQ29sbGVjdCgpO1xuICB9XG5cbiAgbG9nLmRlYnVnKCdDYWxsaW5nIGphdmFzY3JpcHQgZnVuY3Rpb24nKTtcbiAgY29uc3QgcmVzID0gYXdhaXQgdGhpcy5ycGNDbGllbnQuc2VuZCgnUnVudGltZS5jYWxsRnVuY3Rpb25PbicsIHtcbiAgICBvYmplY3RJZCxcbiAgICBmdW5jdGlvbkRlY2xhcmF0aW9uOiBmbixcbiAgICBhcmd1bWVudHM6IGFyZ3MsXG4gICAgcmV0dXJuQnlWYWx1ZTogdHJ1ZSxcbiAgICBhcHBJZEtleTogdGhpcy5hcHBJZEtleSxcbiAgICBwYWdlSWRLZXk6IHRoaXMucGFnZUlkS2V5LFxuICB9KTtcblxuICByZXR1cm4gY29udmVydFJlc3VsdChyZXMpO1xufVxuXG5cbmV4cG9ydCBkZWZhdWx0IHsgZXhlY3V0ZUF0b20sIGV4ZWN1dGVBdG9tQXN5bmMsIGV4ZWN1dGUsIGNhbGxGdW5jdGlvbiB9O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSUEsTUFBTUEsdUJBQXVCLEdBQUcsSUFBSTtBQVNwQyxlQUFlQyxXQUFXLENBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxNQUFNLEVBQUU7RUFDOUMsSUFBSSxDQUFDLElBQUksQ0FBQ0MsU0FBUyxDQUFDQyxXQUFXLEVBQUU7SUFDL0IsTUFBTSxJQUFJQyxLQUFLLENBQUMsa0NBQWtDLENBQUM7RUFDckQ7RUFFQUMsZUFBRyxDQUFDQyxLQUFLLENBQUUsbUJBQWtCUCxJQUFLLGdCQUFlUSxJQUFJLENBQUNDLFNBQVMsQ0FBQ1IsSUFBSSxDQUFFLFlBQVdDLE1BQU8sR0FBRSxDQUFDO0VBQzNGLE1BQU1RLE1BQU0sR0FBRyxNQUFNLElBQUFDLHVCQUFnQixFQUFDWCxJQUFJLEVBQUVDLElBQUksRUFBRUMsTUFBTSxDQUFDO0VBQ3pELE1BQU1VLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQ0MsT0FBTyxDQUFDSCxNQUFN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