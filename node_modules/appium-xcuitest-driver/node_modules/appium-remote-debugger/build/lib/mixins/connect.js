"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("../logger"));
var _utils = require("../utils");
var _events = _interopRequireDefault(require("./events"));
var _support = require("@appium/support");
var _asyncbox = require("asyncbox");
var _lodash = _interopRequireDefault(require("lodash"));
const APP_CONNECT_TIMEOUT_MS = 0;
const APP_CONNECT_INTERVAL_MS = 100;
const SELECT_APP_RETRIES = 20;
const SELECT_APP_RETRY_SLEEP_MS = 500;
const SAFARI_BUNDLE_ID = 'com.apple.mobilesafari';
const BLANK_PAGE_URL = 'about:blank';
async function setConnectionKey() {
  _logger.default.debug('Sending connection key request');
  await this.rpcClient.send('setConnectionKey', {}, false);
}
async function connect(timeout = APP_CONNECT_TIMEOUT_MS) {
  this.setup();
  this.initRpcClient();
  this.rpcClient.on('_rpc_reportSetup:', _lodash.default.noop);
  this.rpcClient.on('_rpc_forwardGetListing:', this.onPageChange.bind(this));
  this.rpcClient.on('_rpc_reportConnectedApplicationList:', this.onConnectedApplicationList.bind(this));
  this.rpcClient.on('_rpc_applicationConnected:', this.onAppConnect.bind(this));
  this.rpcClient.on('_rpc_applicationDisconnected:', this.onAppDisconnect.bind(this));
  this.rpcClient.on('_rpc_applicationUpdated:', this.onAppUpdate.bind(this));
  this.rpcClient.on('_rpc_reportConnectedDriverList:', this.onConnectedDriverList.bind(this));
  this.rpcClient.on('_rpc_reportCurrentState:', this.onCurrentState.bind(this));
  this.rpcClient.on('Page.frameDetached', this.frameDetached.bind(this));
  await this.rpcClient.connect();
  try {
    await this.setConnectionKey();
    if (timeout) {
      _logger.default.debug(`Waiting up to ${timeout}ms for applications to be reported`);
      try {
        await (0, _asyncbox.waitForCondition)(() => !_lodash.default.isEmpty(this.appDict), {
          waitMs: timeout,
          interval: APP_CONNECT_INTERVAL_MS
        });
      } catch (err) {
        _logger.default.debug(`Timed out waiting for applications to be reported`);
      }
    }
    return this.appDict || {};
  } catch (err) {
    _logger.default.error(`Error setting connection key: ${err.message}`);
    await this.disconnect();
    throw err;
  }
}
async function disconnect() {
  if (this.rpcClient) {
    await this.rpcClient.disconnect();
  }
  this.emit(_events.default.EVENT_DISCONNECT, true);
  this.teardown();
}
async function selectApp(currentUrl = null, maxTries = SELECT_APP_RETRIES, ignoreAboutBlankUrl = false) {
  const shouldCheckForTarget = this.rpcClient.shouldCheckForTarget;
  this.rpcClient.shouldCheckForTarget = false;
  try {
    const timer = new _support.timing.Timer().start();
    _logger.default.debug('Selecting application');
    if (!this.appDict || _lodash.default.isEmpty(this.appDict)) {
      _logger.default.debug('No applications currently connected.');
      return [];
    }
    const {
      appIdKey,
      pageDict
    } = await this.searchForApp(currentUrl, maxTries, ignoreAboutBlankUrl);
    if (!appIdKey || !pageDict) {
      _logger.default.errorAndThrow(`Could not connect to a valid app after ${maxTries} tries.`);
    }
    if (this.appIdKey !== appIdKey) {
      _logger.default.debug(`Received altered app id, updating from '${this.appIdKey}' to '${appIdKey}'`);
      this.appIdKey = appIdKey;
    }
    logApplicationDictionary(this.appDict);
    const pageArray = _lodash.default.isEmpty(this.appDict[appIdKey].pageArray) ? (0, _utils.pageArrayFromDict)(pageDict) : this.appDict[appIdKey].pageArray;
    _logger.default.debug(`Finally selecting app ${this.appIdKey}: ${(0, _utils.simpleStringify)(pageArray)}`);
    let fullPageArray = [];
    for (const [app, info] of _lodash.default.toPairs(this.appDict)) {
      if (!_lodash.default.isArray(info.pageArray) || !info.isActive) {
        continue;
      }
      const id = app.replace('PID:', '');
      for (const page of info.pageArray) {
        if (!(ignoreAboutBlankUrl && page.url === BLANK_PAGE_URL)) {
          let pageDict = _lodash.default.clone(page);
          pageDict.id = `${id}.${pageDict.id}`;
          pageDict.bundleId = info.bundleId;
          fullPageArray.push(pageDict);
        }
      }
    }
    _logger.default.debug(`Selected app after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
    return fullPageArray;
  } finally {
    this.rpcClient.shouldCheckForTarget = shouldCheckForTarget;
  }
}
async function searchForApp(currentUrl, maxTries, ignoreAboutBlankUrl) {
  const bundleIds = this.includeSafari && !this.isSafari ? [this.bundleId, ...this.additionalBundleIds, SAFARI_BUNDLE_ID] : [this.bundleId, ...this.additionalBundleIds];
  try {
    return await (0, _asyncbox.retryInterval)(maxTries, SELECT_APP_RETRY_SLEEP_MS, async retryCount => {
      logApplicationDictionary(this.appDict);
      const possibleAppIds = (0, _utils.getPossibleDebuggerAppKeys)(bundleIds, this.appDict);
      _logger.default.debug(`Trying out the possible app ids: ${possibleAppIds.join(', ')} (try #${retryCount + 1} of ${maxTries})`);
      for (const attemptedAppIdKey of possibleAppIds) {
        try {
          if (!this.appDict[attemptedAppIdKey].isActive) {
            _logger.default.debug(`Skipping app '${attemptedAppIdKey}' because it is not active`);
            continue;
          }
          _logger.default.debug(`Attempting app '${attemptedAppIdKey}'`);
          const [appIdKey, pageDict] = await this.rpcClient.selectApp(attemptedAppIdKey, this.onAppConnect.bind(this));
          if (_lodash.default.isEmpty(pageDict)) {
            _logger.default.debug('Empty page dictionary received. Trying again.');
            continue;
          }
          this.appDict[appIdKey].pageArray = (0, _utils.pageArrayFromDict)(pageDict);
          const result = this.searchForPage(this.appDict, currentUrl, ignoreAboutBlankUrl);
          if (result) {
            return result;
          }
          if (currentUrl) {
            _logger.default.debug(`Received app, but expected url ('${currentUrl}') was not found. Trying again.`);
          } else {
            _logger.default.debug('Received app, but no match was found. Trying again.');
          }
        } catch (err) {
          _logger.default.debug(`Error checking application: '${err.message}'. Retrying connection`);
        }
      }
      retryCount++;
      throw new Error('Failed to find an app to select');
    }, 0);
  } catch (ign) {
    _logger.default.errorAndThrow(`Could not connect to a valid app after ${maxTries} tries.`);
  }
}
function searchForPage(appsDict, currentUrl = null, ignoreAboutBlankUrl = false) {
  for (const appDict of _lodash.default.values(appsDict)) {
    if (!appDict || !appDict.isActive || !appDict.pageArray || appDict.pageArray.promise) {
      continue;
    }
    for (const dict of appDict.pageArray) {
      if ((!ignoreAboutBlankUrl || dict.url !== BLANK_PAGE_URL) && (!currentUrl || dict.url === currentUrl || dict.url === `${currentUrl}/`)) {
        return {
          appIdKey: appDict.id,
          pageDict: dict
        };
      }
    }
  }
  return null;
}
async function selectPage(appIdKey, pageIdKey, skipReadyCheck = false) {
  this.appIdKey = `PID:${appIdKey}`;
  this.pageIdKey = pageIdKey;
  _logger.default.debug(`Selecting page '${pageIdKey}' on app '${this.appIdKey}' and forwarding socket setup`);
  const timer = new _support.timing.Timer().start();
  await this.rpcClient.selectPage(this.appIdKey, pageIdKey);
  if (!skipReadyCheck && !(await this.checkPageIsReady())) {
    await this.pageUnload();
  }
  _logger.default.debug(`Selected page after ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
}
function logApplicationDictionary(apps) {
  function getValueString(key, value) {
    if (_lodash.default.isFunction(value)) {
      return '[Function]';
    }
    if (key === 'pageArray' && !_lodash.default.isArray(value)) {
      return `"Waiting for data"`;
    }
    return JSON.stringify(value);
  }
  _logger.default.debug('Current applications available:');
  for (const [app, info] of _lodash.default.toPairs(apps)) {
    _logger.default.debug(`    Application: "${app}"`);
    for (const [key, value] of _lodash.default.toPairs(info)) {
      if (key === 'pageArray' && Array.isArray(value) && value.length) {
        _logger.default.debug(`        ${key}:`);
        for (const page of value) {
          let prefix = '- ';
          for (const [k, v] of _lodash.default.toPairs(page)) {
            _logger.default.debug(`          ${prefix}${k}: ${JSON.stringify(v)}`);
            prefix = '  ';
          }
        }
      } else {
        const valueString = getValueString(key, value);
        _logger.default.debug(`        ${key}: ${valueString}`);
      }
    }
  }
}
function updateAppsWithDict(dict) {
  this.appDict = this.appDict || {};
  let [id, entry] = (0, _utils.appInfoFromDict)(dict);
  if (this.appDict[id]) {
    entry.pageArray = this.appDict[id].pageArray;
  }
  this.appDict[id] = entry;
  if (_lodash.default.isUndefined(entry.pageArray)) {
    entry.pageArray = (0, _utils.deferredPromise)();
  }
  if (!this.appIdKey) {
    this.appIdKey = (0, _utils.getDebuggerAppKey)(this.bundleId, this.appDict);
  }
}
var _default = {
  setConnectionKey,
  connect,
  disconnect,
  selectApp,
  searchForApp,
  searchForPage,
  selectPage,
  updateAppsWithDict
};
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,