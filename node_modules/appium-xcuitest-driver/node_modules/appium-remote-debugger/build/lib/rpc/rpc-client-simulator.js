"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("../logger"));
var _lodash = _interopRequireDefault(require("lodash"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _net = _interopRequireDefault(require("net"));
var _rpcClient = _interopRequireDefault(require("./rpc-client"));
var _appiumIosDevice = require("appium-ios-device");
class RpcClientSimulator extends _rpcClient.default {
  constructor(opts = {}) {
    super(Object.assign({
      shouldCheckForTarget: false
    }, opts));
    const {
      socketPath,
      host = '::1',
      port,
      messageProxy
    } = opts;
    this.host = host;
    this.port = port;
    this.messageProxy = messageProxy;
    this.socket = null;
    this.socketPath = socketPath;
  }
  async connect() {
    if (this.socketPath) {
      if (this.messageProxy) {
        _logger.default.debug(`Connecting to remote debugger via proxy through unix domain socket: '${this.messageProxy}'`);
        this.socket = _net.default.connect(this.messageProxy);
        this.socket.once('connect', () => {
          _logger.default.debug(`Forwarding the actual web inspector socket to the proxy: '${this.socketPath}'`);
          this.socket.write(JSON.stringify({
            socketPath: this.socketPath
          }));
        });
      } else {
        _logger.default.debug(`Connecting to remote debugger through unix domain socket: '${this.socketPath}'`);
        this.socket = _net.default.connect(this.socketPath);
      }
    } else {
      if (this.messageProxy) {
        this.port = this.messageProxy;
      }
      _logger.default.debug(`Connecting to remote debugger ${this.messageProxy ? 'via proxy ' : ''}through TCP: ${this.host}:${this.port}`);
      this.socket = new _net.default.Socket({
        type: 'tcp6'
      });
      this.socket.connect(this.port, this.host);
    }
    this.socket.setNoDelay(true);
    this.socket.setKeepAlive(true);
    this.socket.on('close', () => {
      if (this.isConnected) {
        _logger.default.debug('Debugger socket disconnected');
      }
      this.isConnected = false;
      this.socket = null;
    });
    this.socket.on('end', () => {
      this.isConnected = false;
    });
    this.service = await _appiumIosDevice.services.startWebInspectorService(this.udid, {
      socket: this.socket,
      isSimulator: true,
      osVersion: this.platformVersion,
      verbose: this.logAllCommunication,
      verboseHexDump: this.logAllCommunicationHexDump,
      maxFrameLength: this.webInspectorMaxFrameLength
    });
    this.service.listenMessage(this.receive.bind(this));
    return await new _bluebird.default((resolve, reject) => {
      this.socket.on('connect', () => {
        _logger.default.debug(`Debugger socket connected`);
        this.isConnected = true;
        resolve();
      });
      this.socket.on('error', err => {
        if (this.isConnected) {
          _logger.default.error(`Socket error: ${err.message}`);
          this.isConnected = false;
        }
        reject(err);
      });
    });
  }
  async disconnect() {
    if (!this.isConnected) {
      return;
    }
    _logger.default.debug('Disconnecting from remote debugger');
    await super.disconnect();
    this.service.close();
    this.isConnected = false;
  }
  async sendMessage(cmd) {
    let onSocketError;
    return await new _bluebird.default((resolve, reject) => {
      onSocketError = err => {
        _logger.default.error(`Socket error: ${err.message}`);
        reject(err);
      };
      this.socket.on('error', onSocketError);
      this.service.sendMessage(cmd);
      resolve();
    }).finally(() => {
      try {
        this.socket.removeListener('error', onSocketError);
      } catch (ign) {}
    });
  }
  async receive(data) {
    if (!this.isConnected) {
      return;
    }
    if (!data) {
      return;
    }
    for (const key of ['WIRMessageDataKey', 'WIRDestinationKey', 'WIRSocketDataKey']) {
      if (!_lodash.default.isUndefined(data[key])) {
        data[key] = data[key].toString('utf8');
      }
    }
    await this.messageHandler.handleMessage(data);
  }
}
exports.default = RpcClientSimulator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,