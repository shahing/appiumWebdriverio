"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("../logger"));
var _rpcClient = _interopRequireDefault(require("./rpc-client"));
var _appiumIosDevice = require("appium-ios-device");
class RpcClientRealDevice extends _rpcClient.default {
  constructor(opts = {}) {
    super(Object.assign({
      shouldCheckForTarget: false
    }, opts));
    const {
      udid
    } = opts;
    this.udid = udid;
  }
  async connect() {
    this.service = await _appiumIosDevice.services.startWebInspectorService(this.udid, {
      osVersion: this.platformVersion,
      isSimulator: false,
      verbose: this.logAllCommunication,
      verboseHexDump: this.logAllCommunicationHexDump,
      socketChunkSize: this.socketChunkSize,
      maxFrameLength: this.webInspectorMaxFrameLength
    });
    this.service.listenMessage(this.receive.bind(this));
    this.isConnected = true;
  }
  async disconnect() {
    if (!this.isConnected) {
      return;
    }
    _logger.default.debug('Disconnecting from remote debugger');
    await super.disconnect();
    this.service.close();
    this.isConnected = false;
  }
  async sendMessage(cmd) {
    this.service.sendMessage(cmd);
  }
  async receive(data) {
    if (!this.isConnected) {
      return;
    }
    await this.messageHandler.handleMessage(data);
  }
}
exports.default = RpcClientRealDevice;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJScGNDbGllbnRSZWFsRGV2aWNlIiwiUnBjQ2xpZW50IiwiY29uc3RydWN0b3IiLCJvcHRzIiwiT2JqZWN0IiwiYXNzaWduIiwic2hvdWxkQ2hlY2tGb3JUYXJnZXQiLCJ1ZGlkIiwiY29ubmVjdCIsInNlcnZpY2UiLCJzZXJ2aWNlcyIsInN0YXJ0V2ViSW5zcGVjdG9yU2VydmljZSIsIm9zVmVyc2lvbiIsInBsYXRmb3JtVmVyc2lvbiIsImlzU2ltdWxhdG9yIiwidmVyYm9zZSIsImxvZ0FsbENvbW11bmljYXRpb24iLCJ2ZXJib3NlSGV4RHVtcCIsImxvZ0FsbENvbW11bmljYXRpb25IZXhEdW1wIiwic29ja2V0Q2h1bmtTaXplIiwibWF4RnJhbWVMZW5ndGgiLCJ3ZWJJbnNwZWN0b3JNYXhGcmFtZUxlbmd0aCIsImxpc3Rlbk1lc3NhZ2UiLCJyZWNlaXZlIiwiYmluZCIsImlzQ29ubmVjdGVkIiwiZGlzY29ubmVjdCIsImxvZyIsImRlYnVnIiwiY2xvc2UiLCJzZW5kTWVzc2FnZSIsImNtZCIsImRhdGEiLCJtZXNzYWdlSGFuZGxlciIsImhhbmRsZU1lc3NhZ2UiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvcnBjL3JwYy1jbGllbnQtcmVhbC1kZXZpY2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IFJwY0NsaWVudCBmcm9tICcuL3JwYy1jbGllbnQnO1xuaW1wb3J0IHsgc2VydmljZXMgfSBmcm9tICdhcHBpdW0taW9zLWRldmljZSc7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUnBjQ2xpZW50UmVhbERldmljZSBleHRlbmRzIFJwY0NsaWVudCB7XG4gIGNvbnN0cnVjdG9yIChvcHRzID0ge30pIHtcbiAgICBzdXBlcihPYmplY3QuYXNzaWduKHtcbiAgICAgIHNob3VsZENoZWNrRm9yVGFyZ2V0OiBmYWxzZSxcbiAgICB9LCBvcHRzKSk7XG5cbiAgICBjb25zdCB7XG4gICAgICB1ZGlkLFxuICAgIH0gPSBvcHRzO1xuXG4gICAgdGhpcy51ZGlkID0gdWRpZDtcbiAgfVxuXG4gIGFzeW5jIGNvbm5lY3QgKCkge1xuICAgIHRoaXMuc2VydmljZSA9IGF3YWl0IHNlcnZpY2VzLnN0YXJ0V2ViSW5zcGVjdG9yU2VydmljZSh0aGlzLnVkaWQsIHtcbiAgICAgIG9zVmVyc2lvbjogdGhpcy5wbGF0Zm9ybVZlcnNpb24sXG4gICAgICBpc1NpbXVsYXRvcjogZmFsc2UsXG4gICAgICB2ZXJib3NlOiB0aGlzLmxvZ0FsbENvbW11bmljYXRpb24sXG4gICAgICB2ZXJib3NlSGV4RHVtcDogdGhpcy5sb2dBbGxDb21tdW5pY2F0aW9uSGV4RHVtcCxcbiAgICAgIHNvY2tldENodW5rU2l6ZTogdGhpcy5zb2NrZXRDaHVua1NpemUsXG4gICAgICBtYXhGcmFtZUxlbmd0aDogdGhpcy53ZWJJbnNwZWN0b3JNYXhGcmFtZUxlbmd0aCxcbiAgICB9KTtcblxuICAgIHRoaXMuc2VydmljZS5saXN0ZW5NZXNzYWdlKHRoaXMucmVjZWl2ZS5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLmlzQ29ubmVjdGVkID0gdHJ1ZTtcbiAgfVxuXG4gIGFzeW5jIGRpc2Nvbm5lY3QgKCkge1xuICAgIGlmICghdGhpcy5pc0Nvbm5lY3RlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGxvZy5kZWJ1ZygnRGlzY29ubmVjdGluZyBmcm9tIHJlbW90ZSBkZWJ1Z2dlcicpO1xuICAgIGF3YWl0IHN1cGVyLmRpc2Nvbm5lY3QoKTtcbiAgICB0aGlzLnNlcnZpY2UuY2xvc2UoKTtcbiAgICB0aGlzLmlzQ29ubmVjdGVkID0gZmFsc2U7XG4gIH1cblxuICBhc3luYyBzZW5kTWVzc2FnZSAoY21kKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICAgIHRoaXMuc2VydmljZS5zZW5kTWVzc2FnZShjbWQpO1xuICB9XG5cbiAgYXN5bmMgcmVjZWl2ZSAoZGF0YSkge1xuICAgIGlmICghdGhpcy5pc0Nvbm5lY3RlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBhd2FpdCB0aGlzLm1lc3NhZ2VIYW5kbGVyLmhhbmRsZU1lc3NhZ2UoZGF0YSk7XG4gIH1cbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFHZSxNQUFNQSxtQkFBbUIsU0FBU0Msa0JBQVMsQ0FBQztFQUN6REMsV0FBVyxDQUFFQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDdEIsS0FBSyxDQUFDQyxNQUFNLENBQUNDLE1BQU0sQ0FBQztNQUNsQkMsb0JBQW9CLEVBQUU7SUFDeEIsQ0FBQyxFQUFFSCxJQUFJLENBQUMsQ0FBQztJQUVULE1BQU07TUFDSkk7SUFDRixDQUFDLEdBQUdKLElBQUk7SUFFUixJQUFJLENBQUNJLElBQUksR0FBR0EsSUFBSTtFQUNsQjtFQUVBLE1BQU1DLE9BQU8sR0FBSTtJQUNmLElBQUksQ0FBQ0MsT0FBTyxHQUFHLE1BQU1DLHlCQUFRLENBQUNDLHdCQUF3QixDQUFDLElBQUksQ0FBQ0osSUFBSSxFQUFFO01BQ2hFSyxTQUFTLEVBQUUsSUFBSSxDQUFDQyxlQUFlO01BQy9CQyxXQUFXLEVBQUUsS0FBSztNQUNsQkMsT0FBTyxFQUFFLElBQUksQ0FBQ0MsbUJBQW1CO01BQ2pDQyxjQUFjLEVBQUUsSUFBSSxDQUFDQywwQkFBMEI7TUFDL0NDLGVBQWUsRUFBRSxJQUFJLENBQUNBLGVBQWU7TUFDckNDLGNBQWMsRUFBRSxJQUFJLENBQUNDO0lBQ3ZCLENBQUMsQ0FBQztJQUVGLElBQUksQ0FBQ1osT0FBTyxDQUFDYSxhQUFhLENBQUMsSUFBSSxDQUFDQyxPQUFPLENBQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuRCxJQUFJLENBQUNDLFdBQVcsR0FBRyxJQUFJO0VBQ3pCO0VBRUEsTUFBTUMsVUFBVSxHQUFJO0lBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUNELFdBQVcsRUFBRTtNQUNyQjtJQUNGO0lBRUFFLGVBQUcsQ0FBQ0MsS0FBSyxDQUFDLG9DQUFvQyxDQUFDO0lBQy9DLE1BQU0sS0FBSyxDQUFDRixVQUFVLEVBQUU7SUFDeEIsSUFBSSxDQUFDakIsT0FBTyxDQUFDb0IsS0FBSyxFQUFFO0lBQ3BCLElBQUksQ0FBQ0osV0FBVyxHQUFHLEtBQUs7RUFDMUI7RUFFQSxNQUFNSyxXQUFXLENBQUVDLEdBQUcsRUFBRTtJQUN0QixJQUFJLENBQUN0QixPQUFPLENBQUNxQixXQUFXLENBQUNDLEdBQUcsQ0FBQztFQUMvQjtFQUVBLE1BQU1SLE9BQU8sQ0FBRVMsSUFBSSxFQUFFO0lBQ25CLElBQUksQ0FBQyxJQUFJLENBQUNQLFdBQVcsRUFBRTtNQUNyQjtJQUNGO0lBQ0EsTUFBTSxJQUFJLENBQUNRLGNBQWMsQ0FBQ0MsYUFBYSxDQUFDRixJQUFJLENBQUM7RUFDL0M7QUFDRjtBQUFDIn0=