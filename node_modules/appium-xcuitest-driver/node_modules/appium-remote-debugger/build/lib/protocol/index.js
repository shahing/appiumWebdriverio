"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
exports.getProtocolCommand = getProtocolCommand;
require("source-map-support/register");
const OBJECT_GROUP = 'console';
const COMMANDS = {
  'Animation.enable': [],
  'Animation.disable': [],
  'ApplicationCache.enable': [],
  'ApplicationCache.disable': [],
  'ApplicationCache.getFramesWithManifests': [],
  'Browser.enable': [],
  'Browser.disable': [],
  'Canvas.enable': [],
  'Canvas.disable': [],
  'CPUProfiler.startTracking': [],
  'CPUProfiler.stopTracking': [],
  'Console.disable': [],
  'Console.enable': [],
  'Console.clearMessages': [],
  'Console.getLoggingChannels': [],
  'Console.setLoggingChannelLevel': ['source', 'level'],
  'CSS.enable': [],
  'CSS.disable': [],
  'Database.enable': [],
  'Database.disable': [],
  'Debugger.enable': [],
  'Debugger.disable': [],
  'Debugger.setAsyncStackTraceDepth': ['depth'],
  'Debugger.setBreakpointsActive': ['active'],
  'Debugger.setPauseForInternalScripts': ['shouldPause'],
  'Debugger.setPauseOnAssertions': ['enabled'],
  'Debugger.setPauseOnExceptions': ['state'],
  'DOM.getDocument': [],
  'DOMStorage.enable': [],
  'DOMStorage.disable': [],
  'DOMStorage.getDOMStorageItems': ['storageId'],
  'DOMStorage.clearDOMStorageItems': ['storageId'],
  'Heap.enable': [],
  'Heap.disable': [],
  'Heap.gc': [],
  'IndexedDB.enable': [],
  'IndexedDB.disable': [],
  'Inspector.enable': [],
  'Inspector.disable': [],
  'Inspector.initialized': [],
  'LayerTree.enable': [],
  'LayerTree.disable': [],
  'Memory.enable': [],
  'Memory.disable': [],
  'Network.disable': [],
  'Network.enable': [],
  'Network.setExtraHTTPHeaders': ['headers'],
  'Network.setResourceCachingDisabled': ['disabled'],
  'Network.setEmulatedConditions': ['bytesPerSecondLimit'],
  'Page.enable': [],
  'Page.disable': [],
  'Page.reload': [],
  'Page.navigate': ['url'],
  'Page.overrideUserAgent': ['value'],
  'Page.getCookies': ['urls'],
  'Page.deleteCookie': ['cookieName', 'url'],
  'Page.getResourceTree': [],
  'Runtime.awaitPromise': ['promiseObjectId', 'returnByValue', 'generatePreview', 'saveResult'],
  'Runtime.callFunctionOn': ['objectId', 'functionDeclaration', 'arguments', 'returnByValue'],
  'Runtime.evaluate': ['expression', 'returnByValue', 'contextId'],
  'Runtime.enable': [],
  'Runtime.disable': [],
  'ServiceWorker.getInitializationInfo': [],
  'Target.exists': [],
  'Timeline.enable': [],
  'Timeline.disable': [],
  'Timeline.start': [],
  'Timeline.stop': [],
  'Timeline.setAutoCaptureEnabled': ['enabled'],
  'Timeline.setInstruments': ['instruments'],
  'Worker.enable': [],
  'Worker.disable': [],
  'Worker.initialized': ['workerId'],
  'Worker.sendMessageToWorker': ['workerId', 'message']
};
function getCommand(id, method, params = {}) {
  return {
    id,
    method,
    params: Object.assign({
      objectGroup: OBJECT_GROUP,
      includeCommandLineAPI: true,
      doNotPauseOnExceptionsAndMuteConsole: false,
      emulateUserGesture: false,
      generatePreview: false,
      saveResult: false
    }, params)
  };
}
function getProtocolCommand(id, method, opts = {}) {
  const paramNames = COMMANDS[method];
  if (!paramNames) {
    throw new Error(`Unknown command: '${method}'`);
  }
  const params = paramNames.reduce(function (params, name) {
    params[name] = opts[name];
    return params;
  }, {});
  return getCommand(id, method, params);
}
var _default = getProtocolCommand;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPQkpFQ1RfR1JPVVAiLCJDT01NQU5EUyIsImdldENvbW1hbmQiLCJpZCIsIm1ldGhvZCIsInBhcmFtcyIsIk9iamVjdCIsImFzc2lnbiIsIm9iamVjdEdyb3VwIiwiaW5jbHVkZUNvbW1hbmRMaW5lQVBJIiwiZG9Ob3RQYXVzZU9uRXhjZXB0aW9uc0FuZE11dGVDb25zb2xlIiwiZW11bGF0ZVVzZXJHZXN0dXJlIiwiZ2VuZXJhdGVQcmV2aWV3Iiwic2F2ZVJlc3VsdCIsImdldFByb3RvY29sQ29tbWFuZCIsIm9wdHMiLCJwYXJhbU5hbWVzIiwiRXJyb3IiLCJyZWR1Y2UiLCJuYW1lIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3Byb3RvY29sL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IE9CSkVDVF9HUk9VUCA9ICdjb25zb2xlJztcblxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJLaXQvd2Via2l0L3RyZWUvbWFzdGVyL1NvdXJjZS9KYXZhU2NyaXB0Q29yZS9pbnNwZWN0b3IvcHJvdG9jb2xcbmNvbnN0IENPTU1BTkRTID0ge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vV2ViS2l0L1dlYktpdC9ibG9iL21haW4vU291cmNlL0phdmFTY3JpcHRDb3JlL2luc3BlY3Rvci9wcm90b2NvbC9BbmltYXRpb24uanNvblxuICAvLyNyZWdpb24gQU5JTUFUSU9OIERPTUFJTlxuICAnQW5pbWF0aW9uLmVuYWJsZSc6IFtdLCAvLyBFbmFibGVzIENhbnZhcyBkb21haW4gZXZlbnRzXG4gICdBbmltYXRpb24uZGlzYWJsZSc6IFtdLCAvLyBEaXNhYmxlcyBDYW52YXMgZG9tYWluIGV2ZW50c1xuICAvLyNlbmRyZWdpb25cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vV2ViS2l0L1dlYktpdC9ibG9iL21haW4vU291cmNlL0phdmFTY3JpcHRDb3JlL2luc3BlY3Rvci9wcm90b2NvbC9BcHBsaWNhdGlvbkNhY2hlLmpzb25cbiAgLy8jcmVnaW9uIEFQUExJQ0FUSU9OQ0FDSEUgRE9NQUlOXG4gICdBcHBsaWNhdGlvbkNhY2hlLmVuYWJsZSc6IFtdLFxuICAnQXBwbGljYXRpb25DYWNoZS5kaXNhYmxlJzogW10sXG4gICdBcHBsaWNhdGlvbkNhY2hlLmdldEZyYW1lc1dpdGhNYW5pZmVzdHMnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dlYktpdC9XZWJLaXQvYmxvYi9tYWluL1NvdXJjZS9KYXZhU2NyaXB0Q29yZS9pbnNwZWN0b3IvcHJvdG9jb2wvQXVkaXQuanNvblxuICAvLyNyZWdpb24gQVVESVQgRE9NQUlOXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJLaXQvV2ViS2l0L2Jsb2IvbWFpbi9Tb3VyY2UvSmF2YVNjcmlwdENvcmUvaW5zcGVjdG9yL3Byb3RvY29sL0Jyb3dzZXIuanNvblxuICAvLyNyZWdpb24gQlJPV1NFUiBET01BSU5cbiAgJ0Jyb3dzZXIuZW5hYmxlJzogW10sIC8vIEVuYWJsZXMgQnJvd3NlciBkb21haW4gZXZlbnRzLiBlLmcuIGV4dGVudGlvbnNFbmFibGVkXG4gICdCcm93c2VyLmRpc2FibGUnOiBbXSwgLy8gRGlzYWJsZXMgQnJvd3NlciBkb21haW4gZXZlbnRzXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJLaXQvV2ViS2l0L2Jsb2IvbWFpbi9Tb3VyY2UvSmF2YVNjcmlwdENvcmUvaW5zcGVjdG9yL3Byb3RvY29sL0NhbnZhcy5qc29uXG4gIC8vI3JlZ2lvbiBDQU5WQVMgRE9NQUlOXG4gICdDYW52YXMuZW5hYmxlJzogW10sXG4gICdDYW52YXMuZGlzYWJsZSc6IFtdLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vV2ViS2l0L1dlYktpdC9ibG9iL21haW4vU291cmNlL0phdmFTY3JpcHRDb3JlL2luc3BlY3Rvci9wcm90b2NvbC9DUFVQcm9maWxlci5qc29uXG4gIC8vI3JlZ2lvbiBDUFVQUk9GSUxFUiBET01BSU5cbiAgJ0NQVVByb2ZpbGVyLnN0YXJ0VHJhY2tpbmcnOiBbXSxcbiAgJ0NQVVByb2ZpbGVyLnN0b3BUcmFja2luZyc6IFtdLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vV2ViS2l0L1dlYktpdC9ibG9iL21haW4vU291cmNlL0phdmFTY3JpcHRDb3JlL2luc3BlY3Rvci9wcm90b2NvbC9Db25zb2xlLmpzb25cbiAgLy8jcmVnaW9uIENPTlNPTEUgRE9NQUlOXG4gICdDb25zb2xlLmRpc2FibGUnOiBbXSxcbiAgJ0NvbnNvbGUuZW5hYmxlJzogW10sXG4gICdDb25zb2xlLmNsZWFyTWVzc2FnZXMnOiBbXSxcbiAgJ0NvbnNvbGUuZ2V0TG9nZ2luZ0NoYW5uZWxzJzogW10sXG4gICdDb25zb2xlLnNldExvZ2dpbmdDaGFubmVsTGV2ZWwnOiBbJ3NvdXJjZScsICdsZXZlbCddLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vV2ViS2l0L1dlYktpdC9ibG9iL21haW4vU291cmNlL0phdmFTY3JpcHRDb3JlL2luc3BlY3Rvci9wcm90b2NvbC9DU1MuanNvblxuICAvLyNyZWdpb24gQ1NTIERPTUFJTlxuICAnQ1NTLmVuYWJsZSc6IFtdLFxuICAnQ1NTLmRpc2FibGUnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dlYktpdC9XZWJLaXQvYmxvYi9tYWluL1NvdXJjZS9KYXZhU2NyaXB0Q29yZS9pbnNwZWN0b3IvcHJvdG9jb2wvRGF0YWJhc2UuanNvblxuICAvLyNyZWdpb24gREFUQUJBU0UgRE9NQUlOXG4gICdEYXRhYmFzZS5lbmFibGUnOiBbXSxcbiAgJ0RhdGFiYXNlLmRpc2FibGUnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dlYktpdC9XZWJLaXQvYmxvYi9tYWluL1NvdXJjZS9KYXZhU2NyaXB0Q29yZS9pbnNwZWN0b3IvcHJvdG9jb2wvRGVidWdnZXIuanNvblxuICAvLyNyZWdpb24gREVCVUdHRVIgRE9NQUlOXG4gICdEZWJ1Z2dlci5lbmFibGUnOiBbXSxcbiAgJ0RlYnVnZ2VyLmRpc2FibGUnOiBbXSxcbiAgJ0RlYnVnZ2VyLnNldEFzeW5jU3RhY2tUcmFjZURlcHRoJzogWydkZXB0aCddLFxuICAnRGVidWdnZXIuc2V0QnJlYWtwb2ludHNBY3RpdmUnOiBbJ2FjdGl2ZSddLFxuICAnRGVidWdnZXIuc2V0UGF1c2VGb3JJbnRlcm5hbFNjcmlwdHMnOiBbJ3Nob3VsZFBhdXNlJ10sXG4gICdEZWJ1Z2dlci5zZXRQYXVzZU9uQXNzZXJ0aW9ucyc6IFsnZW5hYmxlZCddLFxuICAnRGVidWdnZXIuc2V0UGF1c2VPbkV4Y2VwdGlvbnMnOiBbJ3N0YXRlJ10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJLaXQvV2ViS2l0L2Jsb2IvbWFpbi9Tb3VyY2UvSmF2YVNjcmlwdENvcmUvaW5zcGVjdG9yL3Byb3RvY29sL0RPTS5qc29uXG4gIC8vI3JlZ2lvbiBET00gRE9NQUlOXG4gICdET00uZ2V0RG9jdW1lbnQnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dlYktpdC9XZWJLaXQvYmxvYi9tYWluL1NvdXJjZS9KYXZhU2NyaXB0Q29yZS9pbnNwZWN0b3IvcHJvdG9jb2wvRE9NRGVidWdnZXIuanNvblxuICAvLyNyZWdpb24gRE9NREVCVUdHRVIgRE9NQUlOXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJLaXQvV2ViS2l0L2Jsb2IvbWFpbi9Tb3VyY2UvSmF2YVNjcmlwdENvcmUvaW5zcGVjdG9yL3Byb3RvY29sL0RPTVN0b3JhZ2UuanNvblxuICAvLyNyZWdpb24gRE9NU1RPUkFHRSBET01BSU5cbiAgJ0RPTVN0b3JhZ2UuZW5hYmxlJzogW10sXG4gICdET01TdG9yYWdlLmRpc2FibGUnOiBbXSxcbiAgJ0RPTVN0b3JhZ2UuZ2V0RE9NU3RvcmFnZUl0ZW1zJzogWydzdG9yYWdlSWQnXSxcbiAgJ0RPTVN0b3JhZ2UuY2xlYXJET01TdG9yYWdlSXRlbXMnOiBbJ3N0b3JhZ2VJZCddLFxuXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJLaXQvV2ViS2l0L2Jsb2IvbWFpbi9Tb3VyY2UvSmF2YVNjcmlwdENvcmUvaW5zcGVjdG9yL3Byb3RvY29sL0hlYXAuanNvblxuICAvLyNyZWdpb24gSEVBUCBET01BSU5cbiAgJ0hlYXAuZW5hYmxlJzogW10sXG4gICdIZWFwLmRpc2FibGUnOiBbXSxcbiAgJ0hlYXAuZ2MnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dlYktpdC9XZWJLaXQvYmxvYi9tYWluL1NvdXJjZS9KYXZhU2NyaXB0Q29yZS9pbnNwZWN0b3IvcHJvdG9jb2wvSW5kZXhlZERCLmpzb25cbiAgLy8jcmVnaW9uIElOREVYRUREQiBET01BSU5cbiAgJ0luZGV4ZWREQi5lbmFibGUnOiBbXSxcbiAgJ0luZGV4ZWREQi5kaXNhYmxlJzogW10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJLaXQvV2ViS2l0L2Jsb2IvbWFpbi9Tb3VyY2UvSmF2YVNjcmlwdENvcmUvaW5zcGVjdG9yL3Byb3RvY29sL0luc3BlY3Rvci5qc29uXG4gIC8vI3JlZ2lvbiBJTlNQRUNUT1IgRE9NQUlOXG4gICdJbnNwZWN0b3IuZW5hYmxlJzogW10sXG4gICdJbnNwZWN0b3IuZGlzYWJsZSc6IFtdLFxuICAnSW5zcGVjdG9yLmluaXRpYWxpemVkJzogW10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJLaXQvV2ViS2l0L2Jsb2IvbWFpbi9Tb3VyY2UvSmF2YVNjcmlwdENvcmUvaW5zcGVjdG9yL3Byb3RvY29sL0xheWVyVHJlZS5qc29uXG4gIC8vI3JlZ2lvbiBMQVlFUlRSRUUgRE9NQUlOXG4gICdMYXllclRyZWUuZW5hYmxlJzogW10sXG4gICdMYXllclRyZWUuZGlzYWJsZSc6IFtdLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vV2ViS2l0L1dlYktpdC9ibG9iL21haW4vU291cmNlL0phdmFTY3JpcHRDb3JlL2luc3BlY3Rvci9wcm90b2NvbC9NZW1vcnkuanNvblxuICAvLyNyZWdpb24gTUVNT1JZIERPTUFJTlxuICAnTWVtb3J5LmVuYWJsZSc6IFtdLFxuICAnTWVtb3J5LmRpc2FibGUnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dlYktpdC9XZWJLaXQvYmxvYi9tYWluL1NvdXJjZS9KYXZhU2NyaXB0Q29yZS9pbnNwZWN0b3IvcHJvdG9jb2wvTmV0d29yay5qc29uXG4gIC8vI3JlZ2lvbiBORVRXT1JLIERPTUFJTlxuICAnTmV0d29yay5kaXNhYmxlJzogW10sXG4gICdOZXR3b3JrLmVuYWJsZSc6IFtdLFxuICAnTmV0d29yay5zZXRFeHRyYUhUVFBIZWFkZXJzJzogWydoZWFkZXJzJ10sXG4gICdOZXR3b3JrLnNldFJlc291cmNlQ2FjaGluZ0Rpc2FibGVkJzogWydkaXNhYmxlZCddLFxuICAnTmV0d29yay5zZXRFbXVsYXRlZENvbmRpdGlvbnMnOiBbJ2J5dGVzUGVyU2Vjb25kTGltaXQnXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dlYktpdC9XZWJLaXQvYmxvYi9tYWluL1NvdXJjZS9KYXZhU2NyaXB0Q29yZS9pbnNwZWN0b3IvcHJvdG9jb2wvUGFnZS5qc29uXG4gIC8vI3JlZ2lvbiBQQUdFIERPTUFJTlxuICAnUGFnZS5lbmFibGUnOiBbXSxcbiAgJ1BhZ2UuZGlzYWJsZSc6IFtdLFxuICAnUGFnZS5yZWxvYWQnOiBbXSxcbiAgJ1BhZ2UubmF2aWdhdGUnOiBbJ3VybCddLFxuICAnUGFnZS5vdmVycmlkZVVzZXJBZ2VudCc6IFsndmFsdWUnXSxcbiAgJ1BhZ2UuZ2V0Q29va2llcyc6IFsndXJscyddLFxuICAnUGFnZS5kZWxldGVDb29raWUnOiBbJ2Nvb2tpZU5hbWUnLCAndXJsJ10sXG4gICdQYWdlLmdldFJlc291cmNlVHJlZSc6IFtdLFxuICAvLyNlbmRyZWdpb25cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vV2ViS2l0L1dlYktpdC9ibG9iL21haW4vU291cmNlL0phdmFTY3JpcHRDb3JlL2luc3BlY3Rvci9wcm90b2NvbC9SdW50aW1lLmpzb25cbiAgLy8jcmVnaW9uIFJVTlRJTUUgRE9NQUlOXG4gICdSdW50aW1lLmF3YWl0UHJvbWlzZSc6IFsncHJvbWlzZU9iamVjdElkJywgJ3JldHVybkJ5VmFsdWUnLCAnZ2VuZXJhdGVQcmV2aWV3JywgJ3NhdmVSZXN1bHQnXSxcbiAgJ1J1bnRpbWUuY2FsbEZ1bmN0aW9uT24nOiBbJ29iamVjdElkJywgJ2Z1bmN0aW9uRGVjbGFyYXRpb24nLCAnYXJndW1lbnRzJywgJ3JldHVybkJ5VmFsdWUnXSxcbiAgJ1J1bnRpbWUuZXZhbHVhdGUnOiBbJ2V4cHJlc3Npb24nLCAncmV0dXJuQnlWYWx1ZScsICdjb250ZXh0SWQnXSxcbiAgJ1J1bnRpbWUuZW5hYmxlJzogW10sXG4gICdSdW50aW1lLmRpc2FibGUnOiBbXSxcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dlYktpdC9XZWJLaXQvYmxvYi9tYWluL1NvdXJjZS9KYXZhU2NyaXB0Q29yZS9pbnNwZWN0b3IvcHJvdG9jb2wvU2NyaXB0UHJvZmlsZXIuanNvblxuICAvLyNyZWdpb24gU0NSSVBUUFJPRklMRVIgRE9NQUlOXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJLaXQvV2ViS2l0L2Jsb2IvbWFpbi9Tb3VyY2UvSmF2YVNjcmlwdENvcmUvaW5zcGVjdG9yL3Byb3RvY29sL1NlcnZpY2VXb3JrZXIuanNvblxuICAvLyNyZWdpb24gU0VSVklDRVdPUktFUiBET01BSU5cbiAgJ1NlcnZpY2VXb3JrZXIuZ2V0SW5pdGlhbGl6YXRpb25JbmZvJzogW10sIC8vIHJldHVybnMgJ3sgXCJuYW1lXCI6IFwiaW5mb1wiLCBcIiRyZWZcIjogXCJDb25maWd1cmF0aW9uXCIgfSdcbiAgLy8jZW5kcmVnaW9uXG5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL1dlYktpdC9XZWJLaXQvYmxvYi9tYWluL1NvdXJjZS9KYXZhU2NyaXB0Q29yZS9pbnNwZWN0b3IvcHJvdG9jb2wvVGFyZ2V0Lmpzb25cbiAgLy8jcmVnaW9uIFRBUkdFVCBET01BSU5cbiAgJ1RhcmdldC5leGlzdHMnOiBbXSwgLy8gcmVtb3ZlZCBzaW5jZSBXZWJLaXQgaW4gMTMuNFxuICAvLyNlbmRyZWdpb25cblxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vV2ViS2l0L1dlYktpdC9ibG9iL21haW4vU291cmNlL0phdmFTY3JpcHRDb3JlL2luc3BlY3Rvci9wcm90b2NvbC9UaW1lbGluZS5qc29uXG4gIC8vI3JlZ2lvbiBUSU1FTElORSBET01BSU5cbiAgJ1RpbWVsaW5lLmVuYWJsZSc6IFtdLFxuICAnVGltZWxpbmUuZGlzYWJsZSc6IFtdLFxuICAnVGltZWxpbmUuc3RhcnQnOiBbXSxcbiAgJ1RpbWVsaW5lLnN0b3AnOiBbXSxcbiAgJ1RpbWVsaW5lLnNldEF1dG9DYXB0dXJlRW5hYmxlZCc6IFsnZW5hYmxlZCddLFxuICAnVGltZWxpbmUuc2V0SW5zdHJ1bWVudHMnOiBbJ2luc3RydW1lbnRzJ10sXG4gIC8vI2VuZHJlZ2lvblxuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9XZWJLaXQvV2ViS2l0L2Jsb2IvbWFpbi9Tb3VyY2UvSmF2YVNjcmlwdENvcmUvaW5zcGVjdG9yL3Byb3RvY29sL1dvcmtlci5qc29uXG4gIC8vI3JlZ2lvbiBXT1JLRVIgRE9NQUlOXG4gICdXb3JrZXIuZW5hYmxlJzogW10sXG4gICdXb3JrZXIuZGlzYWJsZSc6IFtdLFxuICAnV29ya2VyLmluaXRpYWxpemVkJzogWyd3b3JrZXJJZCddLFxuICAnV29ya2VyLnNlbmRNZXNzYWdlVG9Xb3JrZXInOiBbJ3dvcmtlcklkJywgJ21lc3NhZ2UnXVxuICAvLyNlbmRyZWdpb25cbn07XG5cbmZ1bmN0aW9uIGdldENvbW1hbmQgKGlkLCBtZXRob2QsIHBhcmFtcyA9IHt9KSB7XG4gIHJldHVybiB7XG4gICAgaWQsXG4gICAgbWV0aG9kLFxuICAgIHBhcmFtczogT2JqZWN0LmFzc2lnbih7XG4gICAgICBvYmplY3RHcm91cDogT0JKRUNUX0dST1VQLFxuICAgICAgaW5jbHVkZUNvbW1hbmRMaW5lQVBJOiB0cnVlLFxuICAgICAgZG9Ob3RQYXVzZU9uRXhjZXB0aW9uc0FuZE11dGVDb25zb2xlOiBmYWxzZSxcbiAgICAgIGVtdWxhdGVVc2VyR2VzdHVyZTogZmFsc2UsXG4gICAgICBnZW5lcmF0ZVByZXZpZXc6IGZhbHNlLFxuICAgICAgc2F2ZVJlc3VsdDogZmFsc2UsXG4gICAgfSwgcGFyYW1zKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0UHJvdG9jb2xDb21tYW5kIChpZCwgbWV0aG9kLCBvcHRzID0ge30pIHtcbiAgY29uc3QgcGFyYW1OYW1lcyA9IENPTU1BTkRTW21ldGhvZF07XG4gIGlmICghcGFyYW1OYW1lcykge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBjb21tYW5kOiAnJHttZXRob2R9J2ApO1xuICB9XG5cbiAgY29uc3QgcGFyYW1zID0gcGFyYW1OYW1lcy5yZWR1Y2UoZnVuY3Rpb24gKHBhcmFtcywgbmFtZSkge1xuICAgIHBhcmFtc1tuYW1lXSA9IG9wdHNbbmFtZV07XG4gICAgcmV0dXJuIHBhcmFtcztcbiAgfSwge30pO1xuICByZXR1cm4gZ2V0Q29tbWFuZChpZCwgbWV0aG9kLCBwYXJhbXMpO1xufVxuXG5leHBvcnQgeyBnZXRQcm90b2NvbENvbW1hbmQgfTtcbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvY29sQ29tbWFuZDtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQSxN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