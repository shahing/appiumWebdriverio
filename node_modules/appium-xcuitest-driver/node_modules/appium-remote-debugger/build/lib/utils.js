"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RESPONSE_LOG_LENGTH = void 0;
exports.appInfoFromDict = appInfoFromDict;
exports.checkParams = checkParams;
exports.convertResult = convertResult;
exports.deferredPromise = deferredPromise;
exports.getDebuggerAppKey = getDebuggerAppKey;
exports.getModuleRoot = void 0;
exports.getPossibleDebuggerAppKeys = getPossibleDebuggerAppKeys;
exports.pageArrayFromDict = pageArrayFromDict;
exports.simpleStringify = simpleStringify;
require("source-map-support/register");
var _logger = _interopRequireDefault(require("./logger"));
var _lodash = _interopRequireDefault(require("lodash"));
var _bluebird = _interopRequireDefault(require("bluebird"));
var _baseDriver = require("@appium/base-driver");
var _support = require("@appium/support");
const MODULE_NAME = 'appium-remote-debugger';
const WEB_CONTENT_BUNDLE_ID = 'com.apple.WebKit.WebContent';
const WEB_CONTENT_PROCESS_BUNDLE_ID = 'process-com.apple.WebKit.WebContent';
const SAFARI_VIEW_PROCESS_BUNDLE_ID = 'process-SafariViewService';
const SAFARI_VIEW_BUNDLE_ID = 'com.apple.SafariViewService';
const WILDCARD_BUNDLE_ID = '*';
const INACTIVE_APP_CODE = 0;
const ACCEPTED_PAGE_TYPES = ['WIRTypeWeb', 'WIRTypeWebPage', 'WIRTypePage'];
const RESPONSE_LOG_LENGTH = 100;
exports.RESPONSE_LOG_LENGTH = RESPONSE_LOG_LENGTH;
function appInfoFromDict(dict) {
  const id = dict.WIRApplicationIdentifierKey;
  const isProxy = _lodash.default.isString(dict.WIRIsApplicationProxyKey) ? dict.WIRIsApplicationProxyKey.toLowerCase() === 'true' : dict.WIRIsApplicationProxyKey;
  let isAutomationEnabled = !!dict.WIRRemoteAutomationEnabledKey;
  if (_lodash.default.has(dict, 'WIRAutomationAvailabilityKey')) {
    if (_lodash.default.isString(dict.WIRAutomationAvailabilityKey)) {
      isAutomationEnabled = dict.WIRAutomationAvailabilityKey === 'WIRAutomationAvailabilityUnknown' ? 'Unknown' : dict.WIRAutomationAvailabilityKey === 'WIRAutomationAvailabilityAvailable';
    } else {
      isAutomationEnabled = !!dict.WIRAutomationAvailabilityKey;
    }
  }
  const entry = {
    id,
    isProxy,
    name: dict.WIRApplicationNameKey,
    bundleId: dict.WIRApplicationBundleIdentifierKey,
    hostId: dict.WIRHostApplicationIdentifierKey,
    isActive: dict.WIRIsApplicationActiveKey !== INACTIVE_APP_CODE,
    isAutomationEnabled
  };
  return [id, entry];
}
function pageArrayFromDict(pageDict) {
  if (pageDict.id) {
    return [pageDict];
  }
  let newPageArray = [];
  for (const dict of _lodash.default.values(pageDict)) {
    if (_lodash.default.isUndefined(dict.WIRTypeKey) || ACCEPTED_PAGE_TYPES.includes(dict.WIRTypeKey)) {
      newPageArray.push({
        id: dict.WIRPageIdentifierKey,
        title: dict.WIRTitleKey,
        url: dict.WIRURLKey,
        isKey: !_lodash.default.isUndefined(dict.WIRConnectionIdentifierKey)
      });
    }
  }
  return newPageArray;
}
function getDebuggerAppKey(bundleId, appDict) {
  let appId;
  for (const [key, data] of _lodash.default.toPairs(appDict)) {
    if (data.bundleId === bundleId) {
      appId = key;
      break;
    }
  }
  if (appId) {
    _logger.default.debug(`Found app id key '${appId}' for bundle '${bundleId}'`);
    let proxyAppId;
    for (const [key, data] of _lodash.default.toPairs(appDict)) {
      if (data.isProxy && data.hostId === appId) {
        _logger.default.debug(`Found separate bundleId '${data.bundleId}' ` + `acting as proxy for '${bundleId}', with app id '${key}'`);
        proxyAppId = key;
      }
    }
    if (proxyAppId) {
      appId = proxyAppId;
      _logger.default.debug(`Using proxied app id '${appId}'`);
    }
  }
  return appId;
}
function appIdForBundle(bundleId, appDict) {
  let appId;
  for (const [key, data] of _lodash.default.toPairs(appDict)) {
    if (data.bundleId.endsWith(bundleId)) {
      appId = key;
      break;
    }
  }
  if (!appId && bundleId !== WEB_CONTENT_BUNDLE_ID) {
    return appIdForBundle(WEB_CONTENT_BUNDLE_ID, appDict);
  }
  return appId;
}
function getPossibleDebuggerAppKeys(bundleIds, appDict) {
  let proxiedAppIds = [];
  const possibleBundleIds = _lodash.default.uniq([WEB_CONTENT_BUNDLE_ID, WEB_CONTENT_PROCESS_BUNDLE_ID, SAFARI_VIEW_PROCESS_BUNDLE_ID, SAFARI_VIEW_BUNDLE_ID, WILDCARD_BUNDLE_ID, ...bundleIds]);
  _logger.default.debug(`Checking for bundle identifiers: ${possibleBundleIds.join(', ')}`);
  for (const bundleId of possibleBundleIds) {
    const appId = appIdForBundle(bundleId, appDict);
    if (appId) {
      proxiedAppIds.push(appId);
      _logger.default.debug(`Found app id key '${appId}' for bundle '${bundleId}'`);
      for (const [key, data] of _lodash.default.toPairs(appDict)) {
        if (data.isProxy && data.hostId === appId) {
          _logger.default.debug(`Found separate bundleId '${data.bundleId}' ` + `acting as proxy for '${bundleId}', with app id '${key}'`);
          proxiedAppIds.push(key);
        }
      }
    }
  }
  return _lodash.default.uniq(proxiedAppIds);
}
function checkParams(params) {
  const errors = _lodash.default.toPairs(params).filter(([, value]) => _lodash.default.isNil(value)).map(([param]) => param);
  if (errors.length) {
    throw new Error(`Missing ${_support.util.pluralize('parameter', errors.length)}: ${errors.join(', ')}`);
  }
}
function simpleStringify(value, multiline = false) {
  if (!value) {
    return JSON.stringify(value);
  }
  let cleanValue = _lodash.default.clone(value);
  for (const property of ['ceil', 'clone', 'floor', 'round', 'scale', 'toString']) {
    delete cleanValue[property];
  }
  return multiline ? JSON.stringify(cleanValue, null, 2) : JSON.stringify(cleanValue);
}
function deferredPromise() {
  let resolve;
  let reject;
  const promise = new _bluebird.default((res, rej) => {
    resolve = res;
    reject = rej;
  });
  return {
    promise,
    resolve,
    reject
  };
}
function convertResult(res) {
  if (_lodash.default.isUndefined(res)) {
    throw new Error(`Did not get OK result from remote debugger. Result was: ${_lodash.default.truncate(simpleStringify(res), {
      length: RESPONSE_LOG_LENGTH
    })}`);
  } else if (_lodash.default.isString(res)) {
    try {
      res = JSON.parse(res);
    } catch (err) {}
  } else if (!_lodash.default.isObject(res)) {
    throw new Error(`Result has unexpected type: (${typeof res}).`);
  }
  if (res.status && res.status !== 0) {
    throw (0, _baseDriver.errorFromMJSONWPStatusCode)(res.status, res.value.message || res.value);
  }
  const value = _lodash.default.has(res, 'value') ? res.value : res;
  if (_lodash.default.isObject(value)) {
    for (const property of ['ceil', 'clone', 'floor', 'round', 'scale', 'toString']) {
      delete value[property];
    }
  }
  return value;
}
const getModuleRoot = _lodash.default.memoize(function getModuleRoot() {
  const root = _support.node.getModuleRootSync(MODULE_NAME, __filename);
  if (!root) {
    throw new Error(`Cannot find the root folder of the ${MODULE_NAME} Node.js module`);
  }
  return root;
});
exports.getModuleRoot = getModuleRoot;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,