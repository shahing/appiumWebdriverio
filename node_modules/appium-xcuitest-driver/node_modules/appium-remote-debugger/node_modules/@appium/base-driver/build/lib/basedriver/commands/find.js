"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FindMixin = FindMixin;

require("source-map-support/register");

var _protocol = require("../../protocol");

function FindMixin(Base) {
  class FindCommands extends Base {
    async findElement(strategy, selector) {
      return await this.findElOrElsWithProcessing(strategy, selector, false);
    }

    async findElements(strategy, selector) {
      return await this.findElOrElsWithProcessing(strategy, selector, true);
    }

    async findElementFromElement(strategy, selector, elementId) {
      return await this.findElOrElsWithProcessing(strategy, selector, false, elementId);
    }

    async findElementsFromElement(strategy, selector, elementId) {
      return await this.findElOrElsWithProcessing(strategy, selector, true, elementId);
    }

    async findElOrEls(strategy, selector, mult, context) {
      throw new _protocol.errors.NotImplementedError('Not implemented yet for find.');
    }

    async getPageSource() {
      throw new _protocol.errors.NotImplementedError('Not implemented yet for find.');
    }

    async findElOrElsWithProcessing(strategy, selector, mult, context) {
      this.validateLocatorStrategy(strategy);

      try {
        return await this.findElOrEls(strategy, selector, mult, context);
      } catch (err) {
        if (this.opts.printPageSourceOnFindFailure) {
          const src = await this.getPageSource();
          this.log.debug(`Error finding element${mult ? 's' : ''}: ${err.message}`);
          this.log.debug(`Page source requested through 'printPageSourceOnFindFailure':`);
          this.log.debug(src);
        }

        throw err;
      }
    }

  }

  return FindCommands;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGaW5kTWl4aW4iLCJCYXNlIiwiRmluZENvbW1hbmRzIiwiZmluZEVsZW1lbnQiLCJzdHJhdGVneSIsInNlbGVjdG9yIiwiZmluZEVsT3JFbHNXaXRoUHJvY2Vzc2luZyIsImZpbmRFbGVtZW50cyIsImZpbmRFbGVtZW50RnJvbUVsZW1lbnQiLCJlbGVtZW50SWQiLCJmaW5kRWxlbWVudHNGcm9tRWxlbWVudCIsImZpbmRFbE9yRWxzIiwibXVsdCIsImNvbnRleHQiLCJlcnJvcnMiLCJOb3RJbXBsZW1lbnRlZEVycm9yIiwiZ2V0UGFnZVNvdXJjZSIsInZhbGlkYXRlTG9jYXRvclN0cmF0ZWd5IiwiZXJyIiwib3B0cyIsInByaW50UGFnZVNvdXJjZU9uRmluZEZhaWx1cmUiLCJzcmMiLCJsb2ciLCJkZWJ1ZyIsIm1lc3NhZ2UiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvYmFzZWRyaXZlci9jb21tYW5kcy9maW5kLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4vKiBlc2xpbnQtZGlzYWJsZSByZXF1aXJlLWF3YWl0ICovXG4vLyBAdHMtY2hlY2tcbmltcG9ydCB7ZXJyb3JzfSBmcm9tICcuLi8uLi9wcm90b2NvbCc7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7RXZlbnRCYXNlfSBCYXNlXG4gKiBAcmV0dXJucyB7RmluZEJhc2V9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBGaW5kTWl4aW4oQmFzZSkge1xuICAvKipcbiAgICogQGltcGxlbWVudHMge0lGaW5kQ29tbWFuZHN9XG4gICAqL1xuICBjbGFzcyBGaW5kQ29tbWFuZHMgZXh0ZW5kcyBCYXNlIHtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEVsZW1lbnQ+fVxuICAgICAqL1xuICAgIGFzeW5jIGZpbmRFbGVtZW50KHN0cmF0ZWd5LCBzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmluZEVsT3JFbHNXaXRoUHJvY2Vzc2luZyhzdHJhdGVneSwgc2VsZWN0b3IsIGZhbHNlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEVsZW1lbnRbXT59XG4gICAgICovXG4gICAgYXN5bmMgZmluZEVsZW1lbnRzKHN0cmF0ZWd5LCBzZWxlY3Rvcikge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmluZEVsT3JFbHNXaXRoUHJvY2Vzc2luZyhzdHJhdGVneSwgc2VsZWN0b3IsIHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8RWxlbWVudD59XG4gICAgICovXG4gICAgYXN5bmMgZmluZEVsZW1lbnRGcm9tRWxlbWVudChzdHJhdGVneSwgc2VsZWN0b3IsIGVsZW1lbnRJZCkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmluZEVsT3JFbHNXaXRoUHJvY2Vzc2luZyhzdHJhdGVneSwgc2VsZWN0b3IsIGZhbHNlLCBlbGVtZW50SWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8RWxlbWVudFtdPn1cbiAgICAgKi9cbiAgICBhc3luYyBmaW5kRWxlbWVudHNGcm9tRWxlbWVudChzdHJhdGVneSwgc2VsZWN0b3IsIGVsZW1lbnRJZCkge1xuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZmluZEVsT3JFbHNXaXRoUHJvY2Vzc2luZyhzdHJhdGVneSwgc2VsZWN0b3IsIHRydWUsIGVsZW1lbnRJZCk7XG4gICAgfVxuICAgIC8vIE92ZXJyaWRlIHRoZSBmb2xsb3dpbmcgZnVuY3Rpb24gZm9yIHlvdXIgb3duIGRyaXZlciwgYW5kIHRoZSByZXN0IGlzIHRha2VuXG4gICAgLy8gY2FyZSBvZiFcbiAgICAvLyBSZXR1cm5zIGFuIG9iamVjdCB3aGljaCBhZGhlcmVzIHRvIHRoZSB3YXkgdGhlIEpTT04gV2lyZSBQcm90b2NvbCByZXByZXNlbnRzIGVsZW1lbnRzOlxuICAgIC8vIHsgRUxFTUVOVDogIyB9ICAgIGVnOiB7IEVMRU1FTlQ6IDMgfSAgb3IgeyBFTEVNRU5UOiAxLjAyMyB9XG4gICAgLyoqXG4gICAgICogQHRlbXBsYXRlIHtib29sZWFufSBNdWx0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmF0ZWd5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlbGVjdG9yXG4gICAgICogQHBhcmFtIHtNdWx0fSBtdWx0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjb250ZXh0XVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPE11bHQgZXh0ZW5kcyB0cnVlID8gRWxlbWVudFtdIDogRWxlbWVudD59XG4gICAgICovXG4gICAgYXN5bmMgZmluZEVsT3JFbHMoc3RyYXRlZ3ksIHNlbGVjdG9yLCBtdWx0LCBjb250ZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCB5ZXQgZm9yIGZpbmQuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn1cbiAgICAgKi9cbiAgICBhc3luYyBnZXRQYWdlU291cmNlKCkge1xuICAgICAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCdOb3QgaW1wbGVtZW50ZWQgeWV0IGZvciBmaW5kLicpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAdGVtcGxhdGUge2Jvb2xlYW59IE11bHRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyYXRlZ3lcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc2VsZWN0b3JcbiAgICAgKiBAcGFyYW0ge011bHR9IG11bHRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NvbnRleHRdXG4gICAgICogQHJldHVybnMge1Byb21pc2U8TXVsdCBleHRlbmRzIHRydWUgPyBFbGVtZW50W10gOiBFbGVtZW50Pn1cbiAgICAgKi9cbiAgICBhc3luYyBmaW5kRWxPckVsc1dpdGhQcm9jZXNzaW5nKHN0cmF0ZWd5LCBzZWxlY3RvciwgbXVsdCwgY29udGV4dCkge1xuICAgICAgdGhpcy52YWxpZGF0ZUxvY2F0b3JTdHJhdGVneShzdHJhdGVneSk7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5maW5kRWxPckVscyhzdHJhdGVneSwgc2VsZWN0b3IsIG11bHQsIGNvbnRleHQpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdHMucHJpbnRQYWdlU291cmNlT25GaW5kRmFpbHVyZSkge1xuICAgICAgICAgIGNvbnN0IHNyYyA9IGF3YWl0IHRoaXMuZ2V0UGFnZVNvdXJjZSgpO1xuICAgICAgICAgIHRoaXMubG9nLmRlYnVnKGBFcnJvciBmaW5kaW5nIGVsZW1lbnQke211bHQgPyAncycgOiAnJ306ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgdGhpcy5sb2cuZGVidWcoYFBhZ2Ugc291cmNlIHJlcXVlc3RlZCB0aHJvdWdoICdwcmludFBhZ2VTb3VyY2VPbkZpbmRGYWlsdXJlJzpgKTtcbiAgICAgICAgICB0aGlzLmxvZy5kZWJ1ZyhzcmMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHN0aWxsIHdhbnQgdGhlIGVycm9yIHRvIG9jY3VyXG4gICAgICAgIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gRmluZENvbW1hbmRzO1xufVxuXG4vKipcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5FbGVtZW50fSBFbGVtZW50XG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuRmluZENvbW1hbmRzfSBJRmluZENvbW1hbmRzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCcuL2V2ZW50JykuRXZlbnRCYXNlfSBFdmVudEJhc2VcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4uL2RyaXZlcicpLkJhc2VEcml2ZXJCYXNlPGltcG9ydCgnQGFwcGl1bS90eXBlcycpLlRpbWVvdXRDb21tYW5kcyAmIGltcG9ydCgnQGFwcGl1bS90eXBlcycpLkV2ZW50Q29tbWFuZHMgJiBJRmluZENvbW1hbmRzPn0gRmluZEJhc2VcbiAqL1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFHQTs7QUFPTyxTQUFTQSxTQUFULENBQW1CQyxJQUFuQixFQUF5QjtFQUk5QixNQUFNQyxZQUFOLFNBQTJCRCxJQUEzQixDQUFnQztJQUtiLE1BQVhFLFdBQVcsQ0FBQ0MsUUFBRCxFQUFXQyxRQUFYLEVBQXFCO01BQ3BDLE9BQU8sTUFBTSxLQUFLQyx5QkFBTCxDQUErQkYsUUFBL0IsRUFBeUNDLFFBQXpDLEVBQW1ELEtBQW5ELENBQWI7SUFDRDs7SUFNaUIsTUFBWkUsWUFBWSxDQUFDSCxRQUFELEVBQVdDLFFBQVgsRUFBcUI7TUFDckMsT0FBTyxNQUFNLEtBQUtDLHlCQUFMLENBQStCRixRQUEvQixFQUF5Q0MsUUFBekMsRUFBbUQsSUFBbkQsQ0FBYjtJQUNEOztJQU0yQixNQUF0Qkcsc0JBQXNCLENBQUNKLFFBQUQsRUFBV0MsUUFBWCxFQUFxQkksU0FBckIsRUFBZ0M7TUFDMUQsT0FBTyxNQUFNLEtBQUtILHlCQUFMLENBQStCRixRQUEvQixFQUF5Q0MsUUFBekMsRUFBbUQsS0FBbkQsRUFBMERJLFNBQTFELENBQWI7SUFDRDs7SUFNNEIsTUFBdkJDLHVCQUF1QixDQUFDTixRQUFELEVBQVdDLFFBQVgsRUFBcUJJLFNBQXJCLEVBQWdDO01BQzNELE9BQU8sTUFBTSxLQUFLSCx5QkFBTCxDQUErQkYsUUFBL0IsRUFBeUNDLFFBQXpDLEVBQW1ELElBQW5ELEVBQXlESSxTQUF6RCxDQUFiO0lBQ0Q7O0lBYWdCLE1BQVhFLFdBQVcsQ0FBQ1AsUUFBRCxFQUFXQyxRQUFYLEVBQXFCTyxJQUFyQixFQUEyQkMsT0FBM0IsRUFBb0M7TUFDbkQsTUFBTSxJQUFJQyxnQkFBQSxDQUFPQyxtQkFBWCxDQUErQiwrQkFBL0IsQ0FBTjtJQUNEOztJQUtrQixNQUFiQyxhQUFhLEdBQUc7TUFDcEIsTUFBTSxJQUFJRixnQkFBQSxDQUFPQyxtQkFBWCxDQUErQiwrQkFBL0IsQ0FBTjtJQUNEOztJQVM4QixNQUF6QlQseUJBQXlCLENBQUNGLFFBQUQsRUFBV0MsUUFBWCxFQUFxQk8sSUFBckIsRUFBMkJDLE9BQTNCLEVBQW9DO01BQ2pFLEtBQUtJLHVCQUFMLENBQTZCYixRQUE3Qjs7TUFDQSxJQUFJO1FBQ0YsT0FBTyxNQUFNLEtBQUtPLFdBQUwsQ0FBaUJQLFFBQWpCLEVBQTJCQyxRQUEzQixFQUFxQ08sSUFBckMsRUFBMkNDLE9BQTNDLENBQWI7TUFDRCxDQUZELENBRUUsT0FBT0ssR0FBUCxFQUFZO1FBQ1osSUFBSSxLQUFLQyxJQUFMLENBQVVDLDRCQUFkLEVBQTRDO1VBQzFDLE1BQU1DLEdBQUcsR0FBRyxNQUFNLEtBQUtMLGFBQUwsRUFBbEI7VUFDQSxLQUFLTSxHQUFMLENBQVNDLEtBQVQsQ0FBZ0Isd0JBQXVCWCxJQUFJLEdBQUcsR0FBSCxHQUFTLEVBQUcsS0FBSU0sR0FBRyxDQUFDTSxPQUFRLEVBQXZFO1VBQ0EsS0FBS0YsR0FBTCxDQUFTQyxLQUFULENBQWdCLCtEQUFoQjtVQUNBLEtBQUtELEdBQUwsQ0FBU0MsS0FBVCxDQUFlRixHQUFmO1FBQ0Q7O1FBRUQsTUFBTUgsR0FBTjtNQUNEO0lBQ0Y7O0VBNUU2Qjs7RUErRWhDLE9BQU9oQixZQUFQO0FBQ0QifQ==