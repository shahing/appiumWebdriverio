{"version":3,"file":"proxy.js","names":["DEFAULT_LOG","logger","getLogger","DEFAULT_REQUEST_TIMEOUT","COMPACT_ERROR_PATTERNS","MJSONWP","W3C","PROTOCOLS","ALLOWED_OPTS","JWProxy","scheme","server","port","base","reqBasePath","sessionId","timeout","constructor","opts","_","pick","options","defaults","omit","DEFAULT_BASE_PATH","toLowerCase","Object","assign","_activeRequests","_downstreamProtocol","agentOpts","keepAlive","maxSockets","maxFreeSockets","httpAgent","http","Agent","httpsAgent","https","protocolConverter","ProtocolConverter","proxy","bind","log","_log","request","requestConfig","reqPromise","axios","push","pull","getActiveRequestsCount","length","cancelActiveRequests","endpointRequiresSessionId","endpoint","includes","downstreamProtocol","value","getUrlForProxy","url","proxyBase","endpointRe","remainingUrl","test","first","RegExp","exec","Error","replace","stripPrefixRe","requiresSessionId","sessionBaseRe","ReferenceError","match","method","body","toUpperCase","newUrl","truncateBody","content","truncate","isString","JSON","stringify","MAX_LOG_BODY_LENGTH","reqOpts","headers","accept","util","hasValue","data","parse","e","debug","throwProxyError","error","err","response","status","isResponseLogged","isPlainObject","isSessionCreationRequest","getProtocolFromResBody","info","has","parseInt","res","statusCode","proxyErrorMsg","message","some","p","stack","errors","ProxyRequestError","resObj","isInteger","isUndefined","requestToCommandName","extractCommandName","pattern","pathMatch","routeToCommandName","commandName","escapeRegExp","proxyCommand","convertAndProxy","command","resBodyObj","isErrorType","getActualError","UnknownError","protocol","isNaN","errorFromMJSONWPStatusCode","isEmpty","getSummaryByCode","errorFromW3CJsonCode","stacktrace","getSessionIdFromUrl","proxyReqRes","req","originalUrl","getResponseForW3CError","set","reqSessionId","formatResponseValue","send","formatStatus"],"sources":["../../../lib/jsonwp-proxy/proxy.js"],"sourcesContent":["import _ from 'lodash';\nimport {logger, util} from '@appium/support';\nimport axios from 'axios';\nimport {getSummaryByCode} from '../jsonwp-status/status';\nimport {\n  errors,\n  isErrorType,\n  errorFromMJSONWPStatusCode,\n  errorFromW3CJsonCode,\n  getResponseForW3CError,\n} from '../protocol/errors';\nimport {routeToCommandName} from '../protocol';\nimport {MAX_LOG_BODY_LENGTH, DEFAULT_BASE_PATH, PROTOCOLS} from '../constants';\nimport ProtocolConverter from './protocol-converter';\nimport {formatResponseValue, formatStatus} from '../protocol/helpers';\nimport http from 'http';\nimport https from 'https';\n\nconst DEFAULT_LOG = logger.getLogger('WD Proxy');\nconst DEFAULT_REQUEST_TIMEOUT = 240000;\nconst COMPACT_ERROR_PATTERNS = [/\\bECONNREFUSED\\b/, /socket hang up/];\n\nconst {MJSONWP, W3C} = PROTOCOLS;\n\nconst ALLOWED_OPTS = [\n  'scheme',\n  'server',\n  'port',\n  'base',\n  'reqBasePath',\n  'sessionId',\n  'timeout',\n  'log',\n  'keepAlive',\n];\n\nclass JWProxy {\n  /** @type {string} */\n  scheme;\n  /** @type {string} */\n  server;\n  /** @type {number} */\n  port;\n  /** @type {string} */\n  base;\n  /** @type {string} */\n  reqBasePath;\n  /** @type {string?} */\n  sessionId;\n  /** @type {number} */\n  timeout;\n\n  constructor(opts = {}) {\n    opts = _.pick(opts, ALLOWED_OPTS);\n\n    // omit 'log' in the defaults assignment here because 'log' is a getter and we are going to set\n    // it to this._log (which lies behind the getter) further down\n    const options = _.defaults(_.omit(opts, 'log'), {\n      scheme: 'http',\n      server: 'localhost',\n      port: 4444,\n      base: DEFAULT_BASE_PATH,\n      reqBasePath: DEFAULT_BASE_PATH,\n      sessionId: null,\n      timeout: DEFAULT_REQUEST_TIMEOUT,\n    });\n    options.scheme = options.scheme.toLowerCase();\n    Object.assign(this, options);\n\n    this._activeRequests = [];\n    this._downstreamProtocol = null;\n    const agentOpts = {\n      keepAlive: opts.keepAlive ?? true,\n      maxSockets: 10,\n      maxFreeSockets: 5,\n    };\n    this.httpAgent = new http.Agent(agentOpts);\n    this.httpsAgent = new https.Agent(agentOpts);\n    this.protocolConverter = new ProtocolConverter(this.proxy.bind(this), opts.log);\n    this._log = opts.log;\n  }\n\n  get log() {\n    return this._log ?? DEFAULT_LOG;\n  }\n\n  /**\n   * Performs requests to the downstream server\n   *\n   * @private - Do not call this method directly,\n   * it uses client-specific arguments and responses!\n   *\n   * @param {import('axios').AxiosRequestConfig} requestConfig\n   * @returns {Promise<import('axios').AxiosResponse>}\n   */\n  async request(requestConfig) {\n    const reqPromise = axios(requestConfig);\n    this._activeRequests.push(reqPromise);\n    try {\n      return await reqPromise;\n    } finally {\n      _.pull(this._activeRequests, reqPromise);\n    }\n  }\n\n  getActiveRequestsCount() {\n    return this._activeRequests.length;\n  }\n\n  cancelActiveRequests() {\n    this._activeRequests = [];\n  }\n\n  endpointRequiresSessionId(endpoint) {\n    return !_.includes(['/session', '/sessions', '/status'], endpoint);\n  }\n\n  set downstreamProtocol(value) {\n    this._downstreamProtocol = value;\n    this.protocolConverter.downstreamProtocol = value;\n  }\n\n  get downstreamProtocol() {\n    return this._downstreamProtocol;\n  }\n\n  getUrlForProxy(url) {\n    if (url === '') {\n      url = '/';\n    }\n    const proxyBase = `${this.scheme}://${this.server}:${this.port}${this.base}`;\n    const endpointRe = '(/(session|status))';\n    let remainingUrl = '';\n    if (/^http/.test(url)) {\n      const first = new RegExp(`(https?://.+)${endpointRe}`).exec(url);\n      if (!first) {\n        throw new Error('Got a complete url but could not extract JWP endpoint');\n      }\n      remainingUrl = url.replace(first[1], '');\n    } else if (new RegExp('^/').test(url)) {\n      remainingUrl = url;\n    } else {\n      throw new Error(`Did not know what to do with url '${url}'`);\n    }\n\n    const stripPrefixRe = new RegExp('^.*?(/(session|status).*)$');\n    if (stripPrefixRe.test(remainingUrl)) {\n      remainingUrl = /** @type {RegExpExecArray} */ (stripPrefixRe.exec(remainingUrl))[1];\n    }\n\n    if (!new RegExp(endpointRe).test(remainingUrl)) {\n      remainingUrl = `/session/${this.sessionId}${remainingUrl}`;\n    }\n\n    const requiresSessionId = this.endpointRequiresSessionId(remainingUrl);\n\n    if (requiresSessionId && this.sessionId === null) {\n      throw new Error('Trying to proxy a session command without session id');\n    }\n\n    const sessionBaseRe = new RegExp('^/session/([^/]+)');\n    if (sessionBaseRe.test(remainingUrl)) {\n      if (this.sessionId === null) {\n        throw new ReferenceError(\n          `Session ID is not set, but saw a URL path referencing a session (${remainingUrl}). This may be a bug in your client.`\n        );\n      }\n      // we have something like /session/:id/foobar, so we need to replace\n      // the session id\n      const match = sessionBaseRe.exec(remainingUrl);\n      // TODO: if `requiresSessionId` is `false` and `sessionId` is `null`, this is a bug.\n      // are we sure `sessionId` is not `null`?\n      remainingUrl = remainingUrl.replace(\n        /** @type {RegExpExecArray} */ (match)[1],\n        /** @type {string} */ (this.sessionId)\n      );\n    } else if (requiresSessionId) {\n      throw new Error(`Could not find :session section for url: ${remainingUrl}`);\n    }\n    remainingUrl = remainingUrl.replace(/\\/$/, ''); // can't have trailing slashes\n\n    return proxyBase + remainingUrl;\n  }\n\n  async proxy(url, method, body = null) {\n    method = method.toUpperCase();\n    const newUrl = this.getUrlForProxy(url);\n    const truncateBody = (content) =>\n      _.truncate(_.isString(content) ? content : JSON.stringify(content), {\n        length: MAX_LOG_BODY_LENGTH,\n      });\n    /** @type {import('axios').AxiosRequestConfig} */\n    const reqOpts = {\n      url: newUrl,\n      method,\n      headers: {\n        'content-type': 'application/json; charset=utf-8',\n        'user-agent': 'appium',\n        accept: 'application/json, */*',\n      },\n      proxy: false,\n      timeout: this.timeout,\n      httpAgent: this.httpAgent,\n      httpsAgent: this.httpsAgent,\n    };\n    // GET methods shouldn't have any body. Most servers are OK with this, but WebDriverAgent throws 400 errors\n    if (util.hasValue(body) && method !== 'GET') {\n      if (typeof body !== 'object') {\n        try {\n          reqOpts.data = JSON.parse(body);\n        } catch (e) {\n          throw new Error(`Cannot interpret the request body as valid JSON: ${truncateBody(body)}`);\n        }\n      } else {\n        reqOpts.data = body;\n      }\n    }\n\n    this.log.debug(\n      `Proxying [${method} ${url || '/'}] to [${method} ${newUrl}] ` +\n        (reqOpts.data ? `with body: ${truncateBody(reqOpts.data)}` : 'with no body')\n    );\n\n    const throwProxyError = (error) => {\n      const err = /** @type {ProxyError} */ (new Error(`The request to ${url} has failed`));\n      err.response = {\n        data: error,\n        status: 500,\n      };\n      throw err;\n    };\n    let isResponseLogged = false;\n    try {\n      const {data, status, headers} = await this.request(reqOpts);\n      // `data` might be really big\n      // Be careful while handling it to avoid memory leaks\n      if (!_.isPlainObject(data)) {\n        // The response should be a valid JSON object\n        // If it cannot be coerced to an object then the response is wrong\n        throwProxyError(data);\n      }\n      this.log.debug(`Got response with status ${status}: ${truncateBody(data)}`);\n      isResponseLogged = true;\n      const isSessionCreationRequest = /\\/session$/.test(url) && method === 'POST';\n      if (isSessionCreationRequest) {\n        if (status === 200) {\n          this.sessionId = data.sessionId || (data.value || {}).sessionId;\n        }\n        this.downstreamProtocol = this.getProtocolFromResBody(data);\n        this.log.info(`Determined the downstream protocol as '${this.downstreamProtocol}'`);\n      }\n      if (_.has(data, 'status') && parseInt(data.status, 10) !== 0) {\n        // Some servers, like chromedriver may return response code 200 for non-zero JSONWP statuses\n        throwProxyError(data);\n      }\n      const res = {statusCode: status, headers, body: data};\n      return [res, data];\n    } catch (e) {\n      // We only consider an error unexpected if this was not\n      // an async request module error or if the response cannot be cast to\n      // a valid JSON\n      let proxyErrorMsg = e.message;\n      if (util.hasValue(e.response)) {\n        if (!isResponseLogged) {\n          const error = truncateBody(e.response.data);\n          this.log.info(\n            util.hasValue(e.response.status)\n              ? `Got response with status ${e.response.status}: ${error}`\n              : `Got response with unknown status: ${error}`\n          );\n        }\n      } else {\n        proxyErrorMsg = `Could not proxy command to the remote server. Original error: ${e.message}`;\n        if (COMPACT_ERROR_PATTERNS.some((p) => p.test(e.message))) {\n          this.log.info(e.message);\n        } else {\n          this.log.info(e.stack);\n        }\n      }\n      throw new errors.ProxyRequestError(proxyErrorMsg, e.response?.data, e.response?.status);\n    }\n  }\n\n  getProtocolFromResBody(resObj) {\n    if (_.isInteger(resObj.status)) {\n      return MJSONWP;\n    }\n    if (!_.isUndefined(resObj.value)) {\n      return W3C;\n    }\n  }\n\n  /**\n   *\n   * @param {string} url\n   * @param {import('@appium/types').HTTPMethod} method\n   * @returns {string|undefined}\n   */\n  requestToCommandName(url, method) {\n    /**\n     *\n     * @param {RegExp} pattern\n     * @returns {string|undefined}\n     */\n    const extractCommandName = (pattern) => {\n      const pathMatch = pattern.exec(url);\n      if (pathMatch) {\n        return routeToCommandName(pathMatch[1], method, this.reqBasePath);\n      }\n    };\n    let commandName = routeToCommandName(url, method, this.reqBasePath);\n    if (!commandName && _.includes(url, `${this.reqBasePath}/session/`)) {\n      commandName = extractCommandName(\n        new RegExp(`${_.escapeRegExp(this.reqBasePath)}/session/[^/]+(.+)`)\n      );\n    }\n    if (!commandName && _.includes(url, this.reqBasePath)) {\n      commandName = extractCommandName(new RegExp(`${_.escapeRegExp(this.reqBasePath)}(/.+)`));\n    }\n    return commandName;\n  }\n\n  async proxyCommand(url, method, body = null) {\n    const commandName = this.requestToCommandName(url, method);\n    if (!commandName) {\n      return await this.proxy(url, method, body);\n    }\n    this.log.debug(`Matched '${url}' to command name '${commandName}'`);\n\n    return await this.protocolConverter.convertAndProxy(commandName, url, method, body);\n  }\n\n  async command(url, method, body = null) {\n    let response;\n    let resBodyObj;\n    try {\n      [response, resBodyObj] = await this.proxyCommand(url, method, body);\n    } catch (err) {\n      if (isErrorType(err, errors.ProxyRequestError)) {\n        throw err.getActualError();\n      }\n      throw new errors.UnknownError(err.message);\n    }\n    const protocol = this.getProtocolFromResBody(resBodyObj);\n    if (protocol === MJSONWP) {\n      // Got response in MJSONWP format\n      if (response.statusCode === 200 && resBodyObj.status === 0) {\n        return resBodyObj.value;\n      }\n      const status = parseInt(resBodyObj.status, 10);\n      if (!isNaN(status) && status !== 0) {\n        let message = resBodyObj.value;\n        if (_.has(message, 'message')) {\n          message = message.message;\n        }\n        throw errorFromMJSONWPStatusCode(\n          status,\n          _.isEmpty(message) ? getSummaryByCode(status) : message\n        );\n      }\n    } else if (protocol === W3C) {\n      // Got response in W3C format\n      if (response.statusCode < 300) {\n        return resBodyObj.value;\n      }\n      if (_.isPlainObject(resBodyObj.value) && resBodyObj.value.error) {\n        throw errorFromW3CJsonCode(\n          resBodyObj.value.error,\n          resBodyObj.value.message,\n          resBodyObj.value.stacktrace\n        );\n      }\n    } else if (response.statusCode === 200) {\n      // Unknown protocol. Keeping it because of the backward compatibility\n      return resBodyObj;\n    }\n    throw new errors.UnknownError(\n      `Did not know what to do with response code '${response.statusCode}' ` +\n        `and response body '${_.truncate(JSON.stringify(resBodyObj), {\n          length: 300,\n        })}'`\n    );\n  }\n\n  getSessionIdFromUrl(url) {\n    const match = url.match(/\\/session\\/([^/]+)/);\n    return match ? match[1] : null;\n  }\n\n  async proxyReqRes(req, res) {\n    // ! this method must not throw any exceptions\n    // ! make sure to call res.send before return\n    let statusCode;\n    let resBodyObj;\n    try {\n      let response;\n      [response, resBodyObj] = await this.proxyCommand(req.originalUrl, req.method, req.body);\n      res.headers = response.headers;\n      statusCode = response.statusCode;\n    } catch (err) {\n      [statusCode, resBodyObj] = getResponseForW3CError(\n        isErrorType(err, errors.ProxyRequestError) ? err.getActualError() : err\n      );\n    }\n    res.set('content-type', 'application/json; charset=utf-8');\n    if (!_.isPlainObject(resBodyObj)) {\n      const error = new errors.UnknownError(\n        `The downstream server response with the status code ${statusCode} is not a valid JSON object: ` +\n          _.truncate(`${resBodyObj}`, {length: 300})\n      );\n      [statusCode, resBodyObj] = getResponseForW3CError(error);\n    }\n\n    // if the proxied response contains a sessionId that the downstream\n    // driver has generated, we don't want to return that to the client.\n    // Instead, return the id from the request or from current session\n    if (_.has(resBodyObj, 'sessionId')) {\n      const reqSessionId = this.getSessionIdFromUrl(req.originalUrl);\n      if (reqSessionId) {\n        this.log.info(`Replacing sessionId ${resBodyObj.sessionId} with ${reqSessionId}`);\n        resBodyObj.sessionId = reqSessionId;\n      } else if (this.sessionId) {\n        this.log.info(`Replacing sessionId ${resBodyObj.sessionId} with ${this.sessionId}`);\n        resBodyObj.sessionId = this.sessionId;\n      }\n    }\n    resBodyObj.value = formatResponseValue(resBodyObj.value);\n    res.status(statusCode).send(JSON.stringify(formatStatus(resBodyObj)));\n  }\n}\n\nexport {JWProxy};\nexport default JWProxy;\n\n/**\n * @typedef {Error & {response: {data: import('type-fest').JsonObject, status: import('http-status-codes').StatusCodes}}} ProxyError\n */\n"],"mappings":"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"}