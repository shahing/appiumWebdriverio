{"version":3,"file":"system-commands.js","names":["COMPANION_PGREP_PATTERN","udid","IDB_COMPANION_EXECUTABLE","COMPANION_STARTUP_REGEXP","COMPANION_STARTUP_ERROR_REGEXP","COMPANION_STARTUP_TIMEOUT_SEC","systemCallMethods","connect","opts","onlineTimeout","log","debug","IDB_EXECUTABLE","binaryPaths","binary","fs","which","e","Error","grpcPort","DEFAULT_COMPANION_GRPC_PORT","companionProc","SubProcess","listeners","exit","cleanupListeners","_","toPairs","filter","v","isFunction","map","k","removeListener","start","B","resolve","reject","outType","eventName","lines","line","isEmpty","trim","verbose","readyMatch","exec","errorMatch","on","code","signal","message","once","timeout","err","isRunning","stop","ign","error","tpExec","connectionError","retryInterval","disconnect","stderr","stdout","info","waitForDevice","executable","path","companion","timeoutMs","timer","timing","Timer","lastError","waitForCondition","waitMs","intervalMs","getDuration","asSeconds","toFixed","companionPids","getPids","length","cmd","args","isArray","cloneDeep","execTimeout","DEFAULT_IDB_EXEC_TIMEOUT","timeoutCapName","fullArgs","defaultArgs","util","quote","hasValue","createSubProcess","command","idbArgs"],"sources":["../../../lib/tools/system-commands.js"],"sourcesContent":["import B from 'bluebird';\nimport { fs, util, timing } from '@appium/support';\nimport { exec as tpExec, SubProcess } from 'teen_process';\nimport _ from 'lodash';\nimport { retryInterval, waitForCondition } from 'asyncbox';\nimport {\n  getPids, DEFAULT_IDB_EXEC_TIMEOUT, IDB_EXECUTABLE,\n  IDB_COMPANION_EXECUTABLE, DEFAULT_COMPANION_GRPC_PORT,\n} from '../helpers';\nimport log from '../logger.js';\n\n\nconst COMPANION_PGREP_PATTERN = (udid) =>\n  `${IDB_COMPANION_EXECUTABLE}.*--udid[[:space:]]+${udid}`;\nconst COMPANION_STARTUP_REGEXP = /\"grpc_port\":(\\d+)/;\nconst COMPANION_STARTUP_ERROR_REGEXP = /New Error Built ==> (.+)/;\nconst COMPANION_STARTUP_TIMEOUT_SEC = 30;\n\nconst systemCallMethods = {};\n\n/**\n * @typedef {Object} ConnectOptions\n *\n * @property {?number} onlineTimeout - The number of milliseconds to wait\n * until the device under tests is online. No wait is going to be performed\n * if the timeout is not set. It is recommended to provide this value if\n * `connect` is called right after device is booted, so not all the required\n * device services have been started yet.\n */\n\n/**\n * Initializes idb and companion processes if necessary and\n * assigns path properties. It is mandatory to call this method before\n * one can start using IDB instance,\n *\n * @throws {Error} If mandatory idb executables are not present on the\n * localhost or there was a failure while starting/detecting them\n */\nsystemCallMethods.connect = async function connect (opts = {}) {\n  const {\n    onlineTimeout,\n  } = opts;\n\n  log.debug(`Connecting ${IDB_EXECUTABLE} service to '${this.udid}'`);\n\n  const binaryPaths = {};\n  for (const binary of [IDB_EXECUTABLE, IDB_COMPANION_EXECUTABLE]) {\n    try {\n      binaryPaths[binary] = await fs.which(binary);\n    } catch (e) {\n      throw new Error(`'${binary}' has not been found in PATH. ` +\n        `Is it installed? Read https://www.fbidb.io for more details`);\n    }\n  }\n\n  let grpcPort = DEFAULT_COMPANION_GRPC_PORT;\n  log.debug(`Starting companion: '${binaryPaths[IDB_COMPANION_EXECUTABLE]}'`);\n  const companionProc = new SubProcess(binaryPaths[IDB_COMPANION_EXECUTABLE], ['--udid', this.udid]);\n  let listeners = {\n    'lines-stdout': null,\n    'lines-stderr': null,\n    exit: null,\n  };\n  const cleanupListeners = () => {\n    _.toPairs(listeners)\n      .filter(([, v]) => _.isFunction(v))\n      .map(([k, v]) => companionProc.removeListener(k, v));\n    listeners = {};\n  };\n  try {\n    await companionProc.start(0);\n\n    await new B((resolve, reject) => {\n      for (const outType of ['stderr', 'stdout']) {\n        const eventName = `lines-${outType}`;\n        listeners[eventName] = (lines) => {\n          for (const line of lines) {\n            if (_.isEmpty(_.trim(line))) {\n              continue;\n            }\n\n            if (this.verbose) {\n              log.debug(`[${IDB_COMPANION_EXECUTABLE} ${outType}] ${line}`);\n            }\n\n            // check for marker that things are ready to go\n            const readyMatch = COMPANION_STARTUP_REGEXP.exec(line);\n            if (readyMatch) {\n              // find the port and save, so idb can connect\n              grpcPort = readyMatch[1];\n              resolve();\n            } else {\n              // check if there has been an error\n              const errorMatch = COMPANION_STARTUP_ERROR_REGEXP.exec(line);\n              if (errorMatch) {\n                reject(new Error(errorMatch[1]));\n              }\n            }\n          }\n        };\n        companionProc.on(eventName, listeners[eventName]);\n      }\n\n      listeners.exit = (code, signal) => {\n        cleanupListeners();\n        const message = `${IDB_COMPANION_EXECUTABLE} exited with code '${code}' from signal '${signal}'`;\n        log.debug(message);\n        reject(new Error(message));\n      };\n      companionProc.once('exit', listeners.exit);\n    }).timeout(\n      COMPANION_STARTUP_TIMEOUT_SEC * 1000,\n      `Was unable to acquire a GRPC port after ${COMPANION_STARTUP_TIMEOUT_SEC}s timeout`\n    );\n  } catch (err) {\n    cleanupListeners();\n    if (companionProc.isRunning) {\n      try {\n        await companionProc.stop();\n      } catch (ign) {}\n    }\n    log.error(`Failed to start ${IDB_COMPANION_EXECUTABLE}: ${err.message}`);\n    throw err;\n  }\n\n  log.debug(`${IDB_COMPANION_EXECUTABLE} is listening on GRPC port '${grpcPort}'`);\n\n  try {\n    try {\n      await tpExec(IDB_EXECUTABLE, ['connect', this.udid, grpcPort]);\n    } catch (connectionError) {\n      await retryInterval(2, 100, async () => {\n        await this.disconnect();\n        try {\n          await tpExec(IDB_EXECUTABLE, ['kill']);\n        } catch (ign) {}\n        await tpExec(IDB_EXECUTABLE, ['connect', this.udid, grpcPort]);\n      });\n    }\n  } catch (e) {\n    if (e.stderr || e.stdout) {\n      log.debug(e.stderr || e.stdout);\n    }\n    throw new Error(`Cannot start ${IDB_EXECUTABLE} service for the device '${this.udid}'. ` +\n      `Check the server log for more details.`);\n  }\n  log.info(`Successfully established the connection to ${IDB_EXECUTABLE} service for '${this.udid}'`);\n\n  if (onlineTimeout) {\n    await this.waitForDevice(onlineTimeout);\n  }\n\n  this.executable.path = binaryPaths[IDB_EXECUTABLE];\n  this.companion.path = binaryPaths[IDB_COMPANION_EXECUTABLE];\n};\n\n/**\n * Blocks until the device under test starts responding to idb commands.\n * The device must be booted/online and idb must be already connected for that to happen\n *\n * @param {?number} timeoutMs [10000] - The number of milliseconds to wait\n * until the device under tests is online. The method will return immediately\n * if the timeout is falsy\n * @throws {Error} if the device is not responding within the given timeout\n */\nsystemCallMethods.waitForDevice = async function waitForDevice (timeoutMs = 10000) {\n  if (!timeoutMs) {\n    log.debug('No timeout is provided, so not waiting until the device is online');\n    return;\n  }\n\n  log.debug(`Waiting up to ${timeoutMs}ms for the device to be online`);\n  const timer = new timing.Timer().start();\n  let lastError = null;\n  try {\n    await waitForCondition(async () => {\n      try {\n        await this.exec(['ui', 'describe-all']);\n        return true;\n      } catch (e) {\n        lastError = e.stderr || e.message;\n        return false;\n      }\n    }, {\n      waitMs: timeoutMs,\n      intervalMs: 300,\n    });\n  } catch (e) {\n    throw new Error(`The device '${this.udid}' is not responding to idb requests after ${timeoutMs}ms timeout. ` +\n      `Original error: ${lastError || e.message}`);\n  }\n  log.debug(`The device '${this.udid}' is online and ready to accept idb commands in ` +\n    `${timer.getDuration().asSeconds.toFixed(3)}s`);\n};\n\n/**\n * Performs cleanup of obsolete companion processes\n * The daemon process is left untouched, because killing it might\n * potentially affect other parallel sessions. Nothing\n * is done if no obsolete processes are found.\n */\nsystemCallMethods.disconnect = async function disconnect () {\n  log.debug(`Disconnecting ${IDB_EXECUTABLE} service from '${this.udid}'`);\n\n  try {\n    await tpExec(this.executable.path, ['disconnect', this.udid]);\n  } catch (ign) {}\n\n  const companionPids = await getPids(COMPANION_PGREP_PATTERN(this.udid));\n  if (_.isEmpty(companionPids)) {\n    return;\n  }\n\n  log.debug(`Cleaning up ${companionPids.length} obsolete ${IDB_COMPANION_EXECUTABLE} ` +\n    `process${companionPids.length === 1 ? '' : 'es'}`);\n  await tpExec('kill', ['-2', ...companionPids]);\n};\n\n/**\n * Execute the given idb command.\n *\n * @param {Array.<string>} cmd - The actual idb command without arguments/params.\n * @param {Array<string>} args - Optional command arguments.\n * @param {Object} opts - Additional options mapping. See\n *                        {@link https://github.com/appium/node-teen_process}\n *                        for more details.\n * @return {string} - Command's stdout.\n * @throws {Error} If the command returned non-zero exit code.\n */\nsystemCallMethods.exec = async function exec (cmd, args = [], opts = {}) {\n  if (!cmd) {\n    throw new Error('You need to pass in a command to exec()');\n  }\n  cmd = _.isArray(cmd) ? cmd : [cmd];\n\n  opts = _.cloneDeep(opts);\n  // setting default timeout for each command to prevent infinite wait.\n  opts.timeout = opts.timeout || this.execTimeout || DEFAULT_IDB_EXEC_TIMEOUT;\n  opts.timeoutCapName = opts.timeoutCapName || 'execTimeout'; // For error message\n\n  const fullArgs = [...cmd, ...this.executable.defaultArgs, ...args];\n  log.debug(`Running '${this.executable.path} ${util.quote(fullArgs)}'`);\n  try {\n    const {stdout} = await tpExec(this.executable.path, fullArgs, opts);\n    return stdout;\n  } catch (e) {\n    if (util.hasValue(e.code)) {\n      e.message = `Error executing ${IDB_EXECUTABLE}. Original error: '${e.message}'; ` +\n        `Stdout: '${(e.stdout || '').trim()}'; ` +\n        `Stderr: '${(e.stderr || '').trim()}'; ` +\n        `Code: '${e.code}'`;\n    } else {\n      e.message = `Error executing ${IDB_EXECUTABLE}. Original error: '${e.message}'. ` +\n        `Try to increase the ${opts.timeout}ms ${IDB_EXECUTABLE} execution timeout represented by '${opts.timeoutCapName}' capability`;\n    }\n    throw e;\n  }\n};\n\n/**\n * Creates SubProcess instance of idb for background\n * execution.\n *\n * @param {Array<String>} command desired idb command (e.g.: [\"launch\"], [\"xctest\", \"run\", \"ui\"])\n * @param {Array<String>} args additional idb arguments\n * @returns {SubProcess}\n */\nsystemCallMethods.createSubProcess = function createSubProcess (command = [], args = [], opts = {}) {\n  const idbArgs = [...command, ...this.executable.defaultArgs, ...args];\n  log.debug(`Creating ${IDB_EXECUTABLE} subprocess with args: ${util.quote(args)}`);\n  return new SubProcess(this.executable.path, idbArgs, opts);\n};\n\nexport default systemCallMethods;\n"],"mappings":"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"}