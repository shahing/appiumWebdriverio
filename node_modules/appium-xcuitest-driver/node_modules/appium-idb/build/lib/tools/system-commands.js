"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
require("source-map-support/register");
var _bluebird = _interopRequireDefault(require("bluebird"));
var _support = require("@appium/support");
var _teen_process = require("teen_process");
var _lodash = _interopRequireDefault(require("lodash"));
var _asyncbox = require("asyncbox");
var _helpers = require("../helpers");
var _logger = _interopRequireDefault(require("../logger.js"));
const COMPANION_PGREP_PATTERN = udid => `${_helpers.IDB_COMPANION_EXECUTABLE}.*--udid[[:space:]]+${udid}`;
const COMPANION_STARTUP_REGEXP = /"grpc_port":(\d+)/;
const COMPANION_STARTUP_ERROR_REGEXP = /New Error Built ==> (.+)/;
const COMPANION_STARTUP_TIMEOUT_SEC = 30;
const systemCallMethods = {};
systemCallMethods.connect = async function connect(opts = {}) {
  const {
    onlineTimeout
  } = opts;
  _logger.default.debug(`Connecting ${_helpers.IDB_EXECUTABLE} service to '${this.udid}'`);
  const binaryPaths = {};
  for (const binary of [_helpers.IDB_EXECUTABLE, _helpers.IDB_COMPANION_EXECUTABLE]) {
    try {
      binaryPaths[binary] = await _support.fs.which(binary);
    } catch (e) {
      throw new Error(`'${binary}' has not been found in PATH. ` + `Is it installed? Read https://www.fbidb.io for more details`);
    }
  }
  let grpcPort = _helpers.DEFAULT_COMPANION_GRPC_PORT;
  _logger.default.debug(`Starting companion: '${binaryPaths[_helpers.IDB_COMPANION_EXECUTABLE]}'`);
  const companionProc = new _teen_process.SubProcess(binaryPaths[_helpers.IDB_COMPANION_EXECUTABLE], ['--udid', this.udid]);
  let listeners = {
    'lines-stdout': null,
    'lines-stderr': null,
    exit: null
  };
  const cleanupListeners = () => {
    _lodash.default.toPairs(listeners).filter(([, v]) => _lodash.default.isFunction(v)).map(([k, v]) => companionProc.removeListener(k, v));
    listeners = {};
  };
  try {
    await companionProc.start(0);
    await new _bluebird.default((resolve, reject) => {
      for (const outType of ['stderr', 'stdout']) {
        const eventName = `lines-${outType}`;
        listeners[eventName] = lines => {
          for (const line of lines) {
            if (_lodash.default.isEmpty(_lodash.default.trim(line))) {
              continue;
            }
            if (this.verbose) {
              _logger.default.debug(`[${_helpers.IDB_COMPANION_EXECUTABLE} ${outType}] ${line}`);
            }
            const readyMatch = COMPANION_STARTUP_REGEXP.exec(line);
            if (readyMatch) {
              grpcPort = readyMatch[1];
              resolve();
            } else {
              const errorMatch = COMPANION_STARTUP_ERROR_REGEXP.exec(line);
              if (errorMatch) {
                reject(new Error(errorMatch[1]));
              }
            }
          }
        };
        companionProc.on(eventName, listeners[eventName]);
      }
      listeners.exit = (code, signal) => {
        cleanupListeners();
        const message = `${_helpers.IDB_COMPANION_EXECUTABLE} exited with code '${code}' from signal '${signal}'`;
        _logger.default.debug(message);
        reject(new Error(message));
      };
      companionProc.once('exit', listeners.exit);
    }).timeout(COMPANION_STARTUP_TIMEOUT_SEC * 1000, `Was unable to acquire a GRPC port after ${COMPANION_STARTUP_TIMEOUT_SEC}s timeout`);
  } catch (err) {
    cleanupListeners();
    if (companionProc.isRunning) {
      try {
        await companionProc.stop();
      } catch (ign) {}
    }
    _logger.default.error(`Failed to start ${_helpers.IDB_COMPANION_EXECUTABLE}: ${err.message}`);
    throw err;
  }
  _logger.default.debug(`${_helpers.IDB_COMPANION_EXECUTABLE} is listening on GRPC port '${grpcPort}'`);
  try {
    try {
      await (0, _teen_process.exec)(_helpers.IDB_EXECUTABLE, ['connect', this.udid, grpcPort]);
    } catch (connectionError) {
      await (0, _asyncbox.retryInterval)(2, 100, async () => {
        await this.disconnect();
        try {
          await (0, _teen_process.exec)(_helpers.IDB_EXECUTABLE, ['kill']);
        } catch (ign) {}
        await (0, _teen_process.exec)(_helpers.IDB_EXECUTABLE, ['connect', this.udid, grpcPort]);
      });
    }
  } catch (e) {
    if (e.stderr || e.stdout) {
      _logger.default.debug(e.stderr || e.stdout);
    }
    throw new Error(`Cannot start ${_helpers.IDB_EXECUTABLE} service for the device '${this.udid}'. ` + `Check the server log for more details.`);
  }
  _logger.default.info(`Successfully established the connection to ${_helpers.IDB_EXECUTABLE} service for '${this.udid}'`);
  if (onlineTimeout) {
    await this.waitForDevice(onlineTimeout);
  }
  this.executable.path = binaryPaths[_helpers.IDB_EXECUTABLE];
  this.companion.path = binaryPaths[_helpers.IDB_COMPANION_EXECUTABLE];
};
systemCallMethods.waitForDevice = async function waitForDevice(timeoutMs = 10000) {
  if (!timeoutMs) {
    _logger.default.debug('No timeout is provided, so not waiting until the device is online');
    return;
  }
  _logger.default.debug(`Waiting up to ${timeoutMs}ms for the device to be online`);
  const timer = new _support.timing.Timer().start();
  let lastError = null;
  try {
    await (0, _asyncbox.waitForCondition)(async () => {
      try {
        await this.exec(['ui', 'describe-all']);
        return true;
      } catch (e) {
        lastError = e.stderr || e.message;
        return false;
      }
    }, {
      waitMs: timeoutMs,
      intervalMs: 300
    });
  } catch (e) {
    throw new Error(`The device '${this.udid}' is not responding to idb requests after ${timeoutMs}ms timeout. ` + `Original error: ${lastError || e.message}`);
  }
  _logger.default.debug(`The device '${this.udid}' is online and ready to accept idb commands in ` + `${timer.getDuration().asSeconds.toFixed(3)}s`);
};
systemCallMethods.disconnect = async function disconnect() {
  _logger.default.debug(`Disconnecting ${_helpers.IDB_EXECUTABLE} service from '${this.udid}'`);
  try {
    await (0, _teen_process.exec)(this.executable.path, ['disconnect', this.udid]);
  } catch (ign) {}
  const companionPids = await (0, _helpers.getPids)(COMPANION_PGREP_PATTERN(this.udid));
  if (_lodash.default.isEmpty(companionPids)) {
    return;
  }
  _logger.default.debug(`Cleaning up ${companionPids.length} obsolete ${_helpers.IDB_COMPANION_EXECUTABLE} ` + `process${companionPids.length === 1 ? '' : 'es'}`);
  await (0, _teen_process.exec)('kill', ['-2', ...companionPids]);
};
systemCallMethods.exec = async function exec(cmd, args = [], opts = {}) {
  if (!cmd) {
    throw new Error('You need to pass in a command to exec()');
  }
  cmd = _lodash.default.isArray(cmd) ? cmd : [cmd];
  opts = _lodash.default.cloneDeep(opts);
  opts.timeout = opts.timeout || this.execTimeout || _helpers.DEFAULT_IDB_EXEC_TIMEOUT;
  opts.timeoutCapName = opts.timeoutCapName || 'execTimeout';
  const fullArgs = [...cmd, ...this.executable.defaultArgs, ...args];
  _logger.default.debug(`Running '${this.executable.path} ${_support.util.quote(fullArgs)}'`);
  try {
    const {
      stdout
    } = await (0, _teen_process.exec)(this.executable.path, fullArgs, opts);
    return stdout;
  } catch (e) {
    if (_support.util.hasValue(e.code)) {
      e.message = `Error executing ${_helpers.IDB_EXECUTABLE}. Original error: '${e.message}'; ` + `Stdout: '${(e.stdout || '').trim()}'; ` + `Stderr: '${(e.stderr || '').trim()}'; ` + `Code: '${e.code}'`;
    } else {
      e.message = `Error executing ${_helpers.IDB_EXECUTABLE}. Original error: '${e.message}'. ` + `Try to increase the ${opts.timeout}ms ${_helpers.IDB_EXECUTABLE} execution timeout represented by '${opts.timeoutCapName}' capability`;
    }
    throw e;
  }
};
systemCallMethods.createSubProcess = function createSubProcess(command = [], args = [], opts = {}) {
  const idbArgs = [...command, ...this.executable.defaultArgs, ...args];
  _logger.default.debug(`Creating ${_helpers.IDB_EXECUTABLE} subprocess with args: ${_support.util.quote(args)}`);
  return new _teen_process.SubProcess(this.executable.path, idbArgs, opts);
};
var _default = systemCallMethods;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,