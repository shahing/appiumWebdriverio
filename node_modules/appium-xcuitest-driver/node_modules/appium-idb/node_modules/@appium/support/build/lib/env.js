"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findAppiumDependencyPackage = exports.MANIFEST_RELATIVE_PATH = exports.MANIFEST_BASENAME = exports.DEFAULT_APPIUM_HOME = void 0;
exports.hasAppiumDependency = hasAppiumDependency;
exports.resolveManifestPath = exports.resolveAppiumHome = exports.readPackageInDir = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _os = require("os");

var _path = _interopRequireDefault(require("path"));

var _readPkg = _interopRequireDefault(require("read-pkg"));

var _npm = require("./npm");

var _logger = _interopRequireDefault(require("./logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_APPIUM_HOME = _path.default.resolve((0, _os.homedir)(), '.appium');

exports.DEFAULT_APPIUM_HOME = DEFAULT_APPIUM_HOME;
const MANIFEST_BASENAME = 'extensions.yaml';
exports.MANIFEST_BASENAME = MANIFEST_BASENAME;

const MANIFEST_RELATIVE_PATH = _path.default.join('node_modules', '.cache', 'appium', MANIFEST_BASENAME);

exports.MANIFEST_RELATIVE_PATH = MANIFEST_RELATIVE_PATH;
const OLD_VERSION_REGEX = /^[01]/;

async function hasAppiumDependency(cwd) {
  return Boolean(await findAppiumDependencyPackage(cwd));
}

const findAppiumDependencyPackage = _lodash.default.memoize(async (cwd = process.cwd()) => {
  const readPkg = async cwd => {
    let pkgPath;

    try {
      var _pkg$dependencies, _pkg$devDependencies, _pkg$peerDependencies;

      const pkg = await readPackageInDir(cwd);
      const version = (pkg === null || pkg === void 0 ? void 0 : (_pkg$dependencies = pkg.dependencies) === null || _pkg$dependencies === void 0 ? void 0 : _pkg$dependencies.appium) ?? (pkg === null || pkg === void 0 ? void 0 : (_pkg$devDependencies = pkg.devDependencies) === null || _pkg$devDependencies === void 0 ? void 0 : _pkg$devDependencies.appium) ?? (pkg === null || pkg === void 0 ? void 0 : (_pkg$peerDependencies = pkg.peerDependencies) === null || _pkg$peerDependencies === void 0 ? void 0 : _pkg$peerDependencies.appium);
      pkgPath = version && !OLD_VERSION_REGEX.test(String(version)) ? cwd : undefined;
    } catch {}

    if (pkgPath) {
      _logger.default.debug(`Found package.json having current Appium dep in ${pkgPath}`);
    } else {
      _logger.default.debug(`No package.json having current Appium dep in ${cwd}`);
    }

    return pkgPath;
  };

  cwd = _path.default.resolve(cwd);
  let pkgDir;

  try {
    const {
      json: list
    } = await _npm.npm.exec('list', ['--long', '--json'], {
      cwd
    });
    ({
      path: pkgDir
    } = list);

    if (pkgDir) {
      _logger.default.debug(`Determined package/workspace root from ${cwd} => ${pkgDir}`);
    } else {
      pkgDir = cwd;
    }
  } catch {
    pkgDir = cwd;
  }

  return await readPkg(pkgDir);
});

exports.findAppiumDependencyPackage = findAppiumDependencyPackage;

const readPackageInDir = _lodash.default.memoize(async function _readPackageInDir(cwd) {
  return await (0, _readPkg.default)({
    cwd,
    normalize: true
  });
});

exports.readPackageInDir = readPackageInDir;

const resolveAppiumHome = _lodash.default.memoize(async function _resolveAppiumHome(cwd = process.cwd()) {
  if (!_path.default.isAbsolute(cwd)) {
    throw new TypeError('`cwd` parameter must be an absolute path');
  }

  if (process.env.APPIUM_HOME) {
    _logger.default.debug(`Using APPIUM_HOME from env: ${process.env.APPIUM_HOME}`);

    return _path.default.resolve(cwd, process.env.APPIUM_HOME);
  }

  const pkgPath = await findAppiumDependencyPackage(cwd);

  if (pkgPath) {
    return pkgPath;
  }

  _logger.default.debug(`Using default APPIUM_HOME: ${DEFAULT_APPIUM_HOME}`);

  return DEFAULT_APPIUM_HOME;
});

exports.resolveAppiumHome = resolveAppiumHome;

const resolveManifestPath = _lodash.default.memoize(async function _resolveManifestPath(appiumHome) {
  appiumHome = appiumHome ?? (await resolveAppiumHome());
  return _path.default.join(appiumHome, MANIFEST_RELATIVE_PATH);
});

exports.resolveManifestPath = resolveManifestPath;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,