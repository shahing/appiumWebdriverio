{"version":3,"file":"settings.js","names":["SettingsMixin","Base","SettingsCommands","updateSettings","newSettings","settings","log","errorAndThrow","update","getSettings"],"sources":["../../../../lib/basedriver/commands/settings.js"],"sourcesContent":["// @ts-check\n\n/**\n *\n * @param {ReturnType<import('./log').LogMixin>} Base\n * @returns {SettingsBase}\n */\nexport function SettingsMixin(Base) {\n  /**\n   * @implements {ISettingsCommands}\n   */\n  class SettingsCommands extends Base {\n    async updateSettings(newSettings) {\n      if (!this.settings) {\n        this.log.errorAndThrow('Cannot update settings; settings object not found');\n      }\n      return await this.settings.update(newSettings);\n    }\n\n    async getSettings() {\n      if (!this.settings) {\n        this.log.errorAndThrow('Cannot get settings; settings object not found');\n      }\n      return await this.settings.getSettings();\n    }\n  }\n\n  return SettingsCommands;\n}\n\n/**\n * @typedef {import('@appium/types').SettingsCommands} ISettingsCommands\n * @typedef {import('./log').LogBase} LogBase\n * @typedef {import('../driver').BaseDriverBase<import('@appium/types').TimeoutCommands & import('@appium/types').EventCommands & import('@appium/types').FindCommands & import('@appium/types').LogCommands & ISettingsCommands>} SettingsBase\n */\n"],"mappings":";;;;;;;;;AAOO,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;EAIlC,MAAMC,gBAAN,SAA+BD,IAA/B,CAAoC;IACd,MAAdE,cAAc,CAACC,WAAD,EAAc;MAChC,IAAI,CAAC,KAAKC,QAAV,EAAoB;QAClB,KAAKC,GAAL,CAASC,aAAT,CAAuB,mDAAvB;MACD;;MACD,OAAO,MAAM,KAAKF,QAAL,CAAcG,MAAd,CAAqBJ,WAArB,CAAb;IACD;;IAEgB,MAAXK,WAAW,GAAG;MAClB,IAAI,CAAC,KAAKJ,QAAV,EAAoB;QAClB,KAAKC,GAAL,CAASC,aAAT,CAAuB,gDAAvB;MACD;;MACD,OAAO,MAAM,KAAKF,QAAL,CAAcI,WAAd,EAAb;IACD;;EAbiC;;EAgBpC,OAAOP,gBAAP;AACD"}