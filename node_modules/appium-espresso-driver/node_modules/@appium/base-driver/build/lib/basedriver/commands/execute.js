"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExecuteMixin = ExecuteMixin;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _protocol = require("../../protocol");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ExecuteMixin(Base) {
  class ExecuteCommands extends Base {
    async executeMethod(script, protoArgs) {
      if (!protoArgs || !_lodash.default.isArray(protoArgs) || protoArgs.length > 1) {
        throw new _protocol.errors.InvalidArgumentError(`Did not get correct format of arguments for execute method. Expected zero or one ` + `arguments to execute script and instead received: ${JSON.stringify(protoArgs)}`);
      }

      let args = protoArgs[0] ?? {};

      if (!_lodash.default.isPlainObject(args)) {
        throw new _protocol.errors.InvalidArgumentError(`Did not receive an appropriate execute method parameters object. It needs to be ` + `deserializable as a plain JS object`);
      }

      const Driver = this.constructor;

      const availableScripts = _lodash.default.keys(Driver.executeMethodMap);

      const commandMetadata = Driver.executeMethodMap[script];

      if (!commandMetadata) {
        throw new _protocol.errors.UnsupportedOperationError(`Unsupported execute method '${script}'. Available methods ` + `are: ${availableScripts.join(', ')}`);
      }

      let argsToApply = [];

      if (!commandMetadata.params) {
        commandMetadata.params = {
          required: [],
          optional: []
        };
      } else {
        var _commandMetadata$para, _commandMetadata$para2;

        (_commandMetadata$para = commandMetadata.params).required ?? (_commandMetadata$para.required = []);
        (_commandMetadata$para2 = commandMetadata.params).optional ?? (_commandMetadata$para2.optional = []);
        (0, _protocol.checkParams)(commandMetadata.params, args, null);
      }

      argsToApply = (0, _protocol.makeArgs)({}, args, commandMetadata.params, null);
      return await this[Driver.executeMethodMap[script].command](...argsToApply);
    }

  }

  return ExecuteCommands;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFeGVjdXRlTWl4aW4iLCJCYXNlIiwiRXhlY3V0ZUNvbW1hbmRzIiwiZXhlY3V0ZU1ldGhvZCIsInNjcmlwdCIsInByb3RvQXJncyIsIl8iLCJpc0FycmF5IiwibGVuZ3RoIiwiZXJyb3JzIiwiSW52YWxpZEFyZ3VtZW50RXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwiYXJncyIsImlzUGxhaW5PYmplY3QiLCJEcml2ZXIiLCJjb25zdHJ1Y3RvciIsImF2YWlsYWJsZVNjcmlwdHMiLCJrZXlzIiwiZXhlY3V0ZU1ldGhvZE1hcCIsImNvbW1hbmRNZXRhZGF0YSIsIlVuc3VwcG9ydGVkT3BlcmF0aW9uRXJyb3IiLCJqb2luIiwiYXJnc1RvQXBwbHkiLCJwYXJhbXMiLCJyZXF1aXJlZCIsIm9wdGlvbmFsIiwiY2hlY2tQYXJhbXMiLCJtYWtlQXJncyIsImNvbW1hbmQiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9saWIvYmFzZWRyaXZlci9jb21tYW5kcy9leGVjdXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge2Vycm9ycywgbWFrZUFyZ3MsIGNoZWNrUGFyYW1zfSBmcm9tICcuLi8uLi9wcm90b2NvbCc7XG5cbi8qKlxuICogQHBhcmFtIHtTZXNzaW9uQmFzZX0gQmFzZVxuICogQHJldHVybnMge0V4ZWN1dGVCYXNlfVxuICovXG5leHBvcnQgZnVuY3Rpb24gRXhlY3V0ZU1peGluKEJhc2UpIHtcbiAgLyoqXG4gICAqIEBpbXBsZW1lbnRzIHtJRXhlY3V0ZUNvbW1hbmRzfVxuICAgKi9cbiAgY2xhc3MgRXhlY3V0ZUNvbW1hbmRzIGV4dGVuZHMgQmFzZSB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNjcmlwdFxuICAgICAqIEBwYXJhbSB7W1JlY29yZDxzdHJpbmcsIGFueT5dfFtdfSBwcm90b0FyZ3NcbiAgICAgKi9cbiAgICBhc3luYyBleGVjdXRlTWV0aG9kKHNjcmlwdCwgcHJvdG9BcmdzKSB7XG4gICAgICAvLyB0aGUgdzNjIHByb3RvY29sIHdpbGwgZ2l2ZSB1cyBhbiBhcnJheSBvZiBhcmd1bWVudHMgdG8gYXBwbHkgdG8gYSBqYXZhc2NyaXB0IGZ1bmN0aW9uLlxuICAgICAgLy8gdGhhdCdzIG5vdCB3aGF0IHdlJ3JlIGRvaW5nLiB3ZSdyZSBnb2luZyB0byBsb29rIGZvciBhIEpTIG9iamVjdCBhcyB0aGUgZmlyc3QgYXJnLCBzbyB3ZVxuICAgICAgLy8gY2FuIHBlcmZvcm0gdmFsaWRhdGlvbiBvbiBpdC4gd2UnbGwgaWdub3JlIGV2ZXJ5dGhpbmcgZWxzZS5cbiAgICAgIGlmICghcHJvdG9BcmdzIHx8ICFfLmlzQXJyYXkocHJvdG9BcmdzKSB8fCBwcm90b0FyZ3MubGVuZ3RoID4gMSkge1xuICAgICAgICB0aHJvdyBuZXcgZXJyb3JzLkludmFsaWRBcmd1bWVudEVycm9yKFxuICAgICAgICAgIGBEaWQgbm90IGdldCBjb3JyZWN0IGZvcm1hdCBvZiBhcmd1bWVudHMgZm9yIGV4ZWN1dGUgbWV0aG9kLiBFeHBlY3RlZCB6ZXJvIG9yIG9uZSBgICtcbiAgICAgICAgICAgIGBhcmd1bWVudHMgdG8gZXhlY3V0ZSBzY3JpcHQgYW5kIGluc3RlYWQgcmVjZWl2ZWQ6ICR7SlNPTi5zdHJpbmdpZnkocHJvdG9BcmdzKX1gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBsZXQgYXJncyA9IHByb3RvQXJnc1swXSA/PyB7fTtcbiAgICAgIGlmICghXy5pc1BsYWluT2JqZWN0KGFyZ3MpKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuSW52YWxpZEFyZ3VtZW50RXJyb3IoXG4gICAgICAgICAgYERpZCBub3QgcmVjZWl2ZSBhbiBhcHByb3ByaWF0ZSBleGVjdXRlIG1ldGhvZCBwYXJhbWV0ZXJzIG9iamVjdC4gSXQgbmVlZHMgdG8gYmUgYCArXG4gICAgICAgICAgICBgZGVzZXJpYWxpemFibGUgYXMgYSBwbGFpbiBKUyBvYmplY3RgXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IERyaXZlciA9IC8qKiBAdHlwZSB7RHJpdmVyQ2xhc3N9ICovICh0aGlzLmNvbnN0cnVjdG9yKTtcbiAgICAgIGNvbnN0IGF2YWlsYWJsZVNjcmlwdHMgPSBfLmtleXMoRHJpdmVyLmV4ZWN1dGVNZXRob2RNYXApO1xuICAgICAgY29uc3QgY29tbWFuZE1ldGFkYXRhID0gRHJpdmVyLmV4ZWN1dGVNZXRob2RNYXBbc2NyaXB0XTtcbiAgICAgIGlmICghY29tbWFuZE1ldGFkYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBlcnJvcnMuVW5zdXBwb3J0ZWRPcGVyYXRpb25FcnJvcihcbiAgICAgICAgICBgVW5zdXBwb3J0ZWQgZXhlY3V0ZSBtZXRob2QgJyR7c2NyaXB0fScuIEF2YWlsYWJsZSBtZXRob2RzIGAgK1xuICAgICAgICAgICAgYGFyZTogJHthdmFpbGFibGVTY3JpcHRzLmpvaW4oJywgJyl9YFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgbGV0IGFyZ3NUb0FwcGx5ID0gW107XG4gICAgICBpZiAoIWNvbW1hbmRNZXRhZGF0YS5wYXJhbXMpIHtcbiAgICAgICAgY29tbWFuZE1ldGFkYXRhLnBhcmFtcyA9IHtyZXF1aXJlZDogW10sIG9wdGlvbmFsOiBbXX07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21tYW5kTWV0YWRhdGEucGFyYW1zLnJlcXVpcmVkID8/PSBbXTtcbiAgICAgICAgY29tbWFuZE1ldGFkYXRhLnBhcmFtcy5vcHRpb25hbCA/Pz0gW107XG4gICAgICAgIGNoZWNrUGFyYW1zKGNvbW1hbmRNZXRhZGF0YS5wYXJhbXMsIGFyZ3MsIG51bGwpO1xuICAgICAgfVxuICAgICAgYXJnc1RvQXBwbHkgPSBtYWtlQXJncyh7fSwgYXJncywgY29tbWFuZE1ldGFkYXRhLnBhcmFtcywgbnVsbCk7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpc1tEcml2ZXIuZXhlY3V0ZU1ldGhvZE1hcFtzY3JpcHRdLmNvbW1hbmRdKC4uLmFyZ3NUb0FwcGx5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIEV4ZWN1dGVDb21tYW5kcztcbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuRXhlY3V0ZUNvbW1hbmRzfSBJRXhlY3V0ZUNvbW1hbmRzXG4gKiBAdHlwZWRlZiB7aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuRHJpdmVyfSBEcml2ZXJcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJ0BhcHBpdW0vdHlwZXMnKS5Ecml2ZXJDbGFzc30gRHJpdmVyQ2xhc3NcbiAqIEB0eXBlZGVmIHtpbXBvcnQoJy4vc2Vzc2lvbicpLlNlc3Npb25CYXNlfSBTZXNzaW9uQmFzZVxuICogQHR5cGVkZWYge2ltcG9ydCgnLi4vZHJpdmVyJykuQmFzZURyaXZlckJhc2U8aW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuVGltZW91dENvbW1hbmRzICYgaW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuRXZlbnRDb21tYW5kcyAmIGltcG9ydCgnQGFwcGl1bS90eXBlcycpLkZpbmRDb21tYW5kcyAmIGltcG9ydCgnQGFwcGl1bS90eXBlcycpLkxvZ0NvbW1hbmRzICYgaW1wb3J0KCdAYXBwaXVtL3R5cGVzJykuU2V0dGluZ3NDb21tYW5kcyAmIGltcG9ydCgnQGFwcGl1bS90eXBlcycpLlNlc3Npb25Db21tYW5kcyAmIElFeGVjdXRlQ29tbWFuZHM+fSBFeGVjdXRlQmFzZVxuICovXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0FBTU8sU0FBU0EsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEI7RUFJakMsTUFBTUMsZUFBTixTQUE4QkQsSUFBOUIsQ0FBbUM7SUFLZCxNQUFiRSxhQUFhLENBQUNDLE1BQUQsRUFBU0MsU0FBVCxFQUFvQjtNQUlyQyxJQUFJLENBQUNBLFNBQUQsSUFBYyxDQUFDQyxlQUFBLENBQUVDLE9BQUYsQ0FBVUYsU0FBVixDQUFmLElBQXVDQSxTQUFTLENBQUNHLE1BQVYsR0FBbUIsQ0FBOUQsRUFBaUU7UUFDL0QsTUFBTSxJQUFJQyxnQkFBQSxDQUFPQyxvQkFBWCxDQUNILG1GQUFELEdBQ0cscURBQW9EQyxJQUFJLENBQUNDLFNBQUwsQ0FBZVAsU0FBZixDQUEwQixFQUY3RSxDQUFOO01BSUQ7O01BQ0QsSUFBSVEsSUFBSSxHQUFHUixTQUFTLENBQUMsQ0FBRCxDQUFULElBQWdCLEVBQTNCOztNQUNBLElBQUksQ0FBQ0MsZUFBQSxDQUFFUSxhQUFGLENBQWdCRCxJQUFoQixDQUFMLEVBQTRCO1FBQzFCLE1BQU0sSUFBSUosZ0JBQUEsQ0FBT0Msb0JBQVgsQ0FDSCxrRkFBRCxHQUNHLHFDQUZDLENBQU47TUFJRDs7TUFFRCxNQUFNSyxNQUFNLEdBQStCLEtBQUtDLFdBQWhEOztNQUNBLE1BQU1DLGdCQUFnQixHQUFHWCxlQUFBLENBQUVZLElBQUYsQ0FBT0gsTUFBTSxDQUFDSSxnQkFBZCxDQUF6Qjs7TUFDQSxNQUFNQyxlQUFlLEdBQUdMLE1BQU0sQ0FBQ0ksZ0JBQVAsQ0FBd0JmLE1BQXhCLENBQXhCOztNQUNBLElBQUksQ0FBQ2dCLGVBQUwsRUFBc0I7UUFDcEIsTUFBTSxJQUFJWCxnQkFBQSxDQUFPWSx5QkFBWCxDQUNILCtCQUE4QmpCLE1BQU8sdUJBQXRDLEdBQ0csUUFBT2EsZ0JBQWdCLENBQUNLLElBQWpCLENBQXNCLElBQXRCLENBQTRCLEVBRmxDLENBQU47TUFJRDs7TUFDRCxJQUFJQyxXQUFXLEdBQUcsRUFBbEI7O01BQ0EsSUFBSSxDQUFDSCxlQUFlLENBQUNJLE1BQXJCLEVBQTZCO1FBQzNCSixlQUFlLENBQUNJLE1BQWhCLEdBQXlCO1VBQUNDLFFBQVEsRUFBRSxFQUFYO1VBQWVDLFFBQVEsRUFBRTtRQUF6QixDQUF6QjtNQUNELENBRkQsTUFFTztRQUFBOztRQUNMLHlCQUFBTixlQUFlLENBQUNJLE1BQWhCLEVBQXVCQyxRQUF2QiwyQkFBdUJBLFFBQXZCLEdBQW9DLEVBQXBDO1FBQ0EsMEJBQUFMLGVBQWUsQ0FBQ0ksTUFBaEIsRUFBdUJFLFFBQXZCLDRCQUF1QkEsUUFBdkIsR0FBb0MsRUFBcEM7UUFDQSxJQUFBQyxxQkFBQSxFQUFZUCxlQUFlLENBQUNJLE1BQTVCLEVBQW9DWCxJQUFwQyxFQUEwQyxJQUExQztNQUNEOztNQUNEVSxXQUFXLEdBQUcsSUFBQUssa0JBQUEsRUFBUyxFQUFULEVBQWFmLElBQWIsRUFBbUJPLGVBQWUsQ0FBQ0ksTUFBbkMsRUFBMkMsSUFBM0MsQ0FBZDtNQUNBLE9BQU8sTUFBTSxLQUFLVCxNQUFNLENBQUNJLGdCQUFQLENBQXdCZixNQUF4QixFQUFnQ3lCLE9BQXJDLEVBQThDLEdBQUdOLFdBQWpELENBQWI7SUFDRDs7RUExQ2dDOztFQTRDbkMsT0FBT3JCLGVBQVA7QUFDRCJ9