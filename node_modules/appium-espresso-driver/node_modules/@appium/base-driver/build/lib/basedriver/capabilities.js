"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.STANDARD_CAPS = exports.PREFIXED_APPIUM_OPTS_CAP = exports.APPIUM_VENDOR_PREFIX = exports.APPIUM_OPTS_CAP = void 0;
exports.findNonPrefixedCaps = findNonPrefixedCaps;
exports.isStandardCap = isStandardCap;
exports.mergeCaps = mergeCaps;
exports.parseCaps = parseCaps;
exports.processCapabilities = processCapabilities;
exports.promoteAppiumOptions = promoteAppiumOptions;
exports.stripAppiumPrefixes = stripAppiumPrefixes;
exports.validateCaps = validateCaps;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _desiredCaps = require("./desired-caps");

var _support = require("@appium/support");

var _logger = _interopRequireDefault(require("./logger"));

var _errors = require("../protocol/errors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const APPIUM_VENDOR_PREFIX = 'appium:';
exports.APPIUM_VENDOR_PREFIX = APPIUM_VENDOR_PREFIX;
const APPIUM_OPTS_CAP = 'options';
exports.APPIUM_OPTS_CAP = APPIUM_OPTS_CAP;
const PREFIXED_APPIUM_OPTS_CAP = `${APPIUM_VENDOR_PREFIX}${APPIUM_OPTS_CAP}`;
exports.PREFIXED_APPIUM_OPTS_CAP = PREFIXED_APPIUM_OPTS_CAP;

function mergeCaps(primary = {}, secondary = {}) {
  let result = { ...primary
  };

  for (let [name, value] of _lodash.default.toPairs(secondary)) {
    if (!_lodash.default.isUndefined(primary[name])) {
      throw new _errors.errors.InvalidArgumentError(`property '${name}' should not exist on both primary (${JSON.stringify(primary)}) and secondary (${JSON.stringify(secondary)}) object`);
    }

    result[name] = value;
  }

  return result;
}

function validateCaps(caps, constraints = {}, opts = {}) {
  let {
    skipPresenceConstraint
  } = opts;

  if (!_lodash.default.isPlainObject(caps)) {
    throw new _errors.errors.InvalidArgumentError(`must be a JSON object`);
  }

  constraints = _lodash.default.mapValues(constraints, skipPresenceConstraint ? constraint => _lodash.default.omit(constraint, 'presence') : constraint => {
    if (constraint.presence === true) {
      return { ..._lodash.default.omit(constraint, 'presence'),
        presence: {
          allowEmpty: false
        }
      };
    }

    return constraint;
  });

  const validationErrors = _desiredCaps.validator.validate(_lodash.default.pickBy(caps, _support.util.hasValue), constraints, {
    fullMessages: false
  });

  if (validationErrors) {
    let message = [];

    for (let [attribute, reasons] of _lodash.default.toPairs(validationErrors)) {
      for (let reason of reasons) {
        message.push(`'${attribute}' ${reason}`);
      }
    }

    throw new _errors.errors.InvalidArgumentError(message.join('; '));
  }

  return caps;
}

const STANDARD_CAPS = Object.freeze(new Set(['browserName', 'browserVersion', 'platformName', 'acceptInsecureCerts', 'pageLoadStrategy', 'proxy', 'setWindowRect', 'timeouts', 'unhandledPromptBehavior']));
exports.STANDARD_CAPS = STANDARD_CAPS;
const STANDARD_CAPS_LOWER = new Set([...STANDARD_CAPS].map(cap => cap.toLowerCase()));

function isStandardCap(cap) {
  return STANDARD_CAPS_LOWER.has(cap.toLowerCase());
}

function stripAppiumPrefixes(caps) {
  const [prefixedCaps, nonPrefixedCaps] = _lodash.default.partition(_lodash.default.keys(caps), cap => String(cap).startsWith(APPIUM_VENDOR_PREFIX));

  let strippedCaps = _lodash.default.pick(caps, nonPrefixedCaps);

  const badPrefixedCaps = [];

  for (let prefixedCap of prefixedCaps) {
    const strippedCapName = prefixedCap.substring(APPIUM_VENDOR_PREFIX.length);

    if (isStandardCap(strippedCapName)) {
      badPrefixedCaps.push(strippedCapName);

      if (_lodash.default.isNil(strippedCaps[strippedCapName])) {
        strippedCaps[strippedCapName] = caps[prefixedCap];
      } else {
        _logger.default.warn(`Ignoring capability '${prefixedCap}=${caps[prefixedCap]}' and ` + `using capability '${strippedCapName}=${strippedCaps[strippedCapName]}'`);
      }
    } else {
      strippedCaps[strippedCapName] = caps[prefixedCap];
    }
  }

  if (badPrefixedCaps.length > 0) {
    _logger.default.warn(`The capabilities ${JSON.stringify(badPrefixedCaps)} are standard capabilities and do not require "appium:" prefix`);
  }

  return strippedCaps;
}

function findNonPrefixedCaps({
  alwaysMatch = {},
  firstMatch = []
}) {
  return _lodash.default.chain([alwaysMatch, ...firstMatch]).reduce((unprefixedCaps, caps) => [...unprefixedCaps, ...Object.keys(caps).filter(cap => !cap.includes(':') && !isStandardCap(cap))], []).uniq().value();
}

function parseCaps(caps, constraints = {}, shouldValidateCaps = true) {
  if (!_lodash.default.isPlainObject(caps)) {
    throw new _errors.errors.InvalidArgumentError('The capabilities argument was not valid for the following reason(s): "capabilities" must be a JSON object.');
  }

  let {
    alwaysMatch: requiredCaps = {},
    firstMatch: allFirstMatchCaps = [{}]
  } = caps;

  if (!_lodash.default.isArray(allFirstMatchCaps)) {
    throw new _errors.errors.InvalidArgumentError('The capabilities.firstMatch argument was not valid for the following reason(s): "capabilities.firstMatch" must be a JSON array or undefined');
  }

  if (allFirstMatchCaps.length === 0) {
    _logger.default.warn(`The firstMatch array in the given capabilities has no entries. Adding an empty entry fo rnow, ` + `but it will require one or more entries as W3C spec.`);

    allFirstMatchCaps.push({});
  }

  let nonPrefixedCaps = findNonPrefixedCaps(caps);

  if (!_lodash.default.isEmpty(nonPrefixedCaps)) {
    throw new _errors.errors.InvalidArgumentError(`All non-standard capabilities should have a vendor prefix. The following capabilities did not have one: ${nonPrefixedCaps}`);
  }

  let strippedRequiredCaps = stripAppiumPrefixes(requiredCaps);
  let strippedAllFirstMatchCaps = allFirstMatchCaps.map(stripAppiumPrefixes);

  if (shouldValidateCaps) {
    strippedRequiredCaps = validateCaps(strippedRequiredCaps, constraints, {
      skipPresenceConstraint: true
    });
  }

  const filteredConstraints = _lodash.default.omitBy(constraints, (_, key) => key in strippedRequiredCaps);

  let validationErrors = [];

  let validatedFirstMatchCaps = _lodash.default.compact(strippedAllFirstMatchCaps.map(firstMatchCaps => {
    try {
      return shouldValidateCaps ? validateCaps(firstMatchCaps, filteredConstraints) : firstMatchCaps;
    } catch (e) {
      validationErrors.push(e.message);
    }
  }));

  let matchedCaps = null;

  for (let firstMatchCaps of validatedFirstMatchCaps) {
    try {
      matchedCaps = mergeCaps(strippedRequiredCaps, firstMatchCaps);

      if (matchedCaps) {
        break;
      }
    } catch (err) {
      _logger.default.warn(err.message);

      validationErrors.push(err.message);
    }
  }

  return {
    requiredCaps,
    allFirstMatchCaps,
    validatedFirstMatchCaps,
    matchedCaps,
    validationErrors
  };
}

function processCapabilities(w3cCaps, constraints = {}, shouldValidateCaps = true) {
  const {
    matchedCaps,
    validationErrors
  } = parseCaps(w3cCaps, constraints, shouldValidateCaps);

  if (!_support.util.hasValue(matchedCaps)) {
    if (_lodash.default.isArray(w3cCaps.firstMatch) && w3cCaps.firstMatch.length > 1) {
      throw new _errors.errors.InvalidArgumentError(`Could not find matching capabilities from ${JSON.stringify(w3cCaps)}:\n ${validationErrors.join('\n')}`);
    } else {
      throw new _errors.errors.InvalidArgumentError(validationErrors[0]);
    }
  }

  return matchedCaps ?? {};
}

function promoteAppiumOptions(originalCaps) {
  const appiumOptions = originalCaps[APPIUM_OPTS_CAP];

  if (!appiumOptions) {
    return originalCaps;
  }

  let caps = _lodash.default.cloneDeep(originalCaps);

  if (!_lodash.default.isPlainObject(appiumOptions)) {
    throw new _errors.errors.SessionNotCreatedError(`The ${APPIUM_OPTS_CAP} capability must be an object`);
  }

  const strippedAppiumOptions = stripAppiumPrefixes(appiumOptions);

  const overwrittenKeys = _lodash.default.intersection(Object.keys(caps), Object.keys(strippedAppiumOptions));

  if (overwrittenKeys.length > 0) {
    _logger.default.warn(`Found capabilities inside ${PREFIXED_APPIUM_OPTS_CAP} that will overwrite ` + `capabilities at the top level: ${JSON.stringify(overwrittenKeys)}`);
  }

  caps = { ...caps,
    ...strippedAppiumOptions
  };
  delete caps[APPIUM_OPTS_CAP];
  return caps;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,