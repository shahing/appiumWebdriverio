"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DEFAULT_WS_PATHNAME_PREFIX = void 0;
exports.addWebSocketHandler = addWebSocketHandler;
exports.getWebSocketHandlers = getWebSocketHandlers;
exports.removeAllWebSocketHandlers = removeAllWebSocketHandlers;
exports.removeWebSocketHandler = removeWebSocketHandler;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _url = require("url");

var _bluebird = _interopRequireDefault(require("bluebird"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_WS_PATHNAME_PREFIX = '/ws';
exports.DEFAULT_WS_PATHNAME_PREFIX = DEFAULT_WS_PATHNAME_PREFIX;

async function addWebSocketHandler(handlerPathname, handlerServer) {
  const server = this;

  if (_lodash.default.isUndefined(this.webSocketsMapping)) {
    server.webSocketsMapping = {};
    server.on('upgrade', (request, socket, head) => {
      let currentPathname;

      try {
        currentPathname = new _url.URL(request.url).pathname;
      } catch {
        currentPathname = request.url;
      }

      for (const [pathname, wsServer] of _lodash.default.toPairs(server.webSocketsMapping)) {
        if (currentPathname === pathname) {
          wsServer.handleUpgrade(request, socket, head, ws => {
            wsServer.emit('connection', ws, request);
          });
          return;
        }
      }

      socket.destroy();
    });
  }

  this.webSocketsMapping[handlerPathname] = handlerServer;
}

async function getWebSocketHandlers(keysFilter = null) {
  if (_lodash.default.isEmpty(this.webSocketsMapping)) {
    return {};
  }

  return _lodash.default.toPairs(this.webSocketsMapping).reduce((acc, [pathname, wsServer]) => {
    if (!_lodash.default.isString(keysFilter) || pathname.includes(keysFilter)) {
      acc[pathname] = wsServer;
    }

    return acc;
  }, {});
}

async function removeWebSocketHandler(handlerPathname) {
  var _this$webSocketsMappi;

  const wsServer = (_this$webSocketsMappi = this.webSocketsMapping) === null || _this$webSocketsMappi === void 0 ? void 0 : _this$webSocketsMappi[handlerPathname];

  if (!wsServer) {
    return false;
  }

  try {
    wsServer.close();

    for (const client of wsServer.clients || []) {
      client.terminate();
    }

    return true;
  } catch (ign) {} finally {
    delete this.webSocketsMapping[handlerPathname];
  }

  return false;
}

async function removeAllWebSocketHandlers() {
  if (_lodash.default.isEmpty(this.webSocketsMapping)) {
    return false;
  }

  return _lodash.default.some(await _bluebird.default.all(_lodash.default.keys(this.webSocketsMapping).map(pathname => this.removeWebSocketHandler(pathname))));
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,