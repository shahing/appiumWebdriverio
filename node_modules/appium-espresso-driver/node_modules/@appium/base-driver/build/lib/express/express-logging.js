"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startLogFormatter = exports.endLogFormatter = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

require("@colors/colors");

var _morgan = _interopRequireDefault(require("morgan"));

var _logger = _interopRequireDefault(require("./logger"));

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function compile(fmt) {
  fmt = fmt.replace(/"/g, '\\"');
  fmt = fmt.replace(/:([-\w]{2,})(?:\[([^\]]+)\])?/g, function replace(_, name, arg) {
    return `"\n    + (tokens["${name}"](req, res, "${arg}") || "-") + "`;
  });
  let js = `  return "${fmt}";`;
  return new Function('tokens, req, res', js);
}

function requestEndLoggingFormat(tokens, req, res) {
  let status = res.statusCode;
  let statusStr = ':status';

  if (status >= 500) {
    statusStr = statusStr.red;
  } else if (status >= 400) {
    statusStr = statusStr.yellow;
  } else if (status >= 300) {
    statusStr = statusStr.cyan;
  } else {
    statusStr = statusStr.green;
  }

  let fn = compile(`${'<-- :method :url '.white}${statusStr} ${':response-time ms - :res[content-length]'.grey}`);
  return fn(tokens, req, res);
}

const endLogFormatter = (0, _morgan.default)((tokens, req, res) => {
  _logger.default.info(requestEndLoggingFormat(tokens, req, res), (res.jsonResp || '').grey);
});
exports.endLogFormatter = endLogFormatter;
const requestStartLoggingFormat = compile(`${'-->'.white} ${':method'.white} ${':url'.white}`);
const startLogFormatter = (0, _morgan.default)((tokens, req, res) => {
  let reqBody = '';

  if (req.body) {
    try {
      reqBody = _lodash.default.truncate(_lodash.default.isString(req.body) ? req.body : JSON.stringify(req.body), {
        length: _constants.MAX_LOG_BODY_LENGTH
      });
    } catch (ign) {}
  }

  _logger.default.info(requestStartLoggingFormat(tokens, req, res), reqBody.grey);
}, {
  immediate: true
});
exports.startLogFormatter = startLogFormatter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb21waWxlIiwiZm10IiwicmVwbGFjZSIsIl8iLCJuYW1lIiwiYXJnIiwianMiLCJGdW5jdGlvbiIsInJlcXVlc3RFbmRMb2dnaW5nRm9ybWF0IiwidG9rZW5zIiwicmVxIiwicmVzIiwic3RhdHVzIiwic3RhdHVzQ29kZSIsInN0YXR1c1N0ciIsInJlZCIsInllbGxvdyIsImN5YW4iLCJncmVlbiIsImZuIiwid2hpdGUiLCJncmV5IiwiZW5kTG9nRm9ybWF0dGVyIiwibW9yZ2FuIiwibG9nIiwiaW5mbyIsImpzb25SZXNwIiwicmVxdWVzdFN0YXJ0TG9nZ2luZ0Zvcm1hdCIsInN0YXJ0TG9nRm9ybWF0dGVyIiwicmVxQm9keSIsImJvZHkiLCJ0cnVuY2F0ZSIsImlzU3RyaW5nIiwiSlNPTiIsInN0cmluZ2lmeSIsImxlbmd0aCIsIk1BWF9MT0dfQk9EWV9MRU5HVEgiLCJpZ24iLCJpbW1lZGlhdGUiXSwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvZXhwcmVzcy9leHByZXNzLWxvZ2dpbmcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCAnQGNvbG9ycy9jb2xvcnMnO1xuaW1wb3J0IG1vcmdhbiBmcm9tICdtb3JnYW4nO1xuaW1wb3J0IGxvZyBmcm9tICcuL2xvZ2dlcic7XG5pbXBvcnQge01BWF9MT0dfQk9EWV9MRU5HVEh9IGZyb20gJy4uL2NvbnN0YW50cyc7XG5cbi8vIENvcGllZCB0aGUgbW9yZ2FuIGNvbXBpbGUgZnVuY3Rpb24gb3ZlciBzbyB0aGF0IGNvb2xlciBmb3JtYXRzXG4vLyBtYXkgYmUgY29uZmlndXJlZFxuZnVuY3Rpb24gY29tcGlsZShmbXQpIHtcbiAgLy8gZXNjYXBlIHF1b3Rlc1xuICBmbXQgPSBmbXQucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpO1xuICBmbXQgPSBmbXQucmVwbGFjZSgvOihbLVxcd117Mix9KSg/OlxcWyhbXlxcXV0rKVxcXSk/L2csIGZ1bmN0aW9uIHJlcGxhY2UoXywgbmFtZSwgYXJnKSB7XG4gICAgcmV0dXJuIGBcIlxcbiAgICArICh0b2tlbnNbXCIke25hbWV9XCJdKHJlcSwgcmVzLCBcIiR7YXJnfVwiKSB8fCBcIi1cIikgKyBcImA7XG4gIH0pO1xuICBsZXQganMgPSBgICByZXR1cm4gXCIke2ZtdH1cIjtgO1xuICByZXR1cm4gbmV3IEZ1bmN0aW9uKCd0b2tlbnMsIHJlcSwgcmVzJywganMpO1xufVxuXG5mdW5jdGlvbiByZXF1ZXN0RW5kTG9nZ2luZ0Zvcm1hdCh0b2tlbnMsIHJlcSwgcmVzKSB7XG4gIGxldCBzdGF0dXMgPSByZXMuc3RhdHVzQ29kZTtcbiAgbGV0IHN0YXR1c1N0ciA9ICc6c3RhdHVzJztcbiAgaWYgKHN0YXR1cyA+PSA1MDApIHtcbiAgICBzdGF0dXNTdHIgPSBzdGF0dXNTdHIucmVkO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA+PSA0MDApIHtcbiAgICBzdGF0dXNTdHIgPSBzdGF0dXNTdHIueWVsbG93O1xuICB9IGVsc2UgaWYgKHN0YXR1cyA+PSAzMDApIHtcbiAgICBzdGF0dXNTdHIgPSBzdGF0dXNTdHIuY3lhbjtcbiAgfSBlbHNlIHtcbiAgICBzdGF0dXNTdHIgPSBzdGF0dXNTdHIuZ3JlZW47XG4gIH1cbiAgbGV0IGZuID0gY29tcGlsZShcbiAgICBgJHsnPC0tIDptZXRob2QgOnVybCAnLndoaXRlfSR7c3RhdHVzU3RyfSAkeyc6cmVzcG9uc2UtdGltZSBtcyAtIDpyZXNbY29udGVudC1sZW5ndGhdJy5ncmV5fWBcbiAgKTtcbiAgcmV0dXJuIGZuKHRva2VucywgcmVxLCByZXMpO1xufVxuXG5jb25zdCBlbmRMb2dGb3JtYXR0ZXIgPSBtb3JnYW4oKHRva2VucywgcmVxLCByZXMpID0+IHtcbiAgbG9nLmluZm8ocmVxdWVzdEVuZExvZ2dpbmdGb3JtYXQodG9rZW5zLCByZXEsIHJlcyksIChyZXMuanNvblJlc3AgfHwgJycpLmdyZXkpO1xufSk7XG5cbmNvbnN0IHJlcXVlc3RTdGFydExvZ2dpbmdGb3JtYXQgPSBjb21waWxlKGAkeyctLT4nLndoaXRlfSAkeyc6bWV0aG9kJy53aGl0ZX0gJHsnOnVybCcud2hpdGV9YCk7XG5cbmNvbnN0IHN0YXJ0TG9nRm9ybWF0dGVyID0gbW9yZ2FuKFxuICAodG9rZW5zLCByZXEsIHJlcykgPT4ge1xuICAgIC8vIG1vcmdhbiBvdXRwdXQgaXMgcmVkaXJlY3RlZCBzdHJhaWdodCB0byB3aW5zdG9uXG4gICAgbGV0IHJlcUJvZHkgPSAnJztcbiAgICBpZiAocmVxLmJvZHkpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJlcUJvZHkgPSBfLnRydW5jYXRlKF8uaXNTdHJpbmcocmVxLmJvZHkpID8gcmVxLmJvZHkgOiBKU09OLnN0cmluZ2lmeShyZXEuYm9keSksIHtcbiAgICAgICAgICBsZW5ndGg6IE1BWF9MT0dfQk9EWV9MRU5HVEgsXG4gICAgICAgIH0pO1xuICAgICAgfSBjYXRjaCAoaWduKSB7fVxuICAgIH1cbiAgICBsb2cuaW5mbyhyZXF1ZXN0U3RhcnRMb2dnaW5nRm9ybWF0KHRva2VucywgcmVxLCByZXMpLCByZXFCb2R5LmdyZXkpO1xuICB9LFxuICB7aW1tZWRpYXRlOiB0cnVlfVxuKTtcblxuZXhwb3J0IHtlbmRMb2dGb3JtYXR0ZXIsIHN0YXJ0TG9nRm9ybWF0dGVyfTtcbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7Ozs7QUFJQSxTQUFTQSxPQUFULENBQWlCQyxHQUFqQixFQUFzQjtFQUVwQkEsR0FBRyxHQUFHQSxHQUFHLENBQUNDLE9BQUosQ0FBWSxJQUFaLEVBQWtCLEtBQWxCLENBQU47RUFDQUQsR0FBRyxHQUFHQSxHQUFHLENBQUNDLE9BQUosQ0FBWSxnQ0FBWixFQUE4QyxTQUFTQSxPQUFULENBQWlCQyxDQUFqQixFQUFvQkMsSUFBcEIsRUFBMEJDLEdBQTFCLEVBQStCO0lBQ2pGLE9BQVEscUJBQW9CRCxJQUFLLGlCQUFnQkMsR0FBSSxnQkFBckQ7RUFDRCxDQUZLLENBQU47RUFHQSxJQUFJQyxFQUFFLEdB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