"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Mike = void 0;

require("source-map-support/register");

var _teen_process = require("teen_process");

var _logger = _interopRequireDefault(require("./logger"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const DEFAULT_REMOTE = 'origin';
const DEFAULT_BRANCH = 'gh-pages';
const MIKE_VER_STRING = 'mike 1.';

class Mike {
  remote;
  branch;
  prefix;
  configFile;
  _mikeVerified = false;

  constructor(opts) {
    this.remote = opts.remote || DEFAULT_REMOTE;
    this.branch = opts.branch || DEFAULT_BRANCH;
    this.prefix = opts.prefix;
    this.configFile = opts.configFile;
  }

  async verifyMike() {
    if (this._mikeVerified) {
      return;
    }

    try {
      const {
        stdout
      } = await this.exec('--version', [], false);

      if (!stdout.includes(MIKE_VER_STRING)) {
        throw new Error('Mike was installed but was not version 1.x');
      }
    } catch (err) {
      throw new Error(`Could not verify appropriate mike binary exists: ${err}`);
    }

    this._mikeVerified = true;
  }

  getMikeArgs(cmdName, cmdArgs) {
    return [cmdName, ...cmdArgs, '--config-file', this.configFile, '--remote', this.remote, '--branch', this.branch, '--prefix', this.prefix];
  }

  async exec(mikeCmd, mikeArgs = [], verify = true) {
    if (verify) {
      await this.verifyMike();
    }

    const args = this.getMikeArgs(mikeCmd, mikeArgs);

    _logger.default.debug(`Running mike ${args.join(' ')}`);

    return await (0, _teen_process.exec)('mike', args);
  }

  async list() {
    const {
      stdout
    } = await this.exec('list');
    return stdout.split('\n').map(s => s.trim()).filter(Boolean);
  }

  async setDefault(alias) {
    await this.exec('set-default', [alias]);
  }

  async deploy(opts) {
    const args = [opts.version];

    if (opts.alias) {
      args.push(opts.alias, '--update-aliases');
    }

    if (opts.shouldPush) {
      args.push('--push');
    }

    if (opts.shouldRebase) {
      args.push('--rebase');
    }

    if (opts.commit) {
      args.push('--message', opts.commit);
    }

    await this.exec('deploy', args);
  }

}

exports.Mike = Mike;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,