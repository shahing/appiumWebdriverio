"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deepFreeze = deepFreeze;
exports.getModuleRootSync = getModuleRootSync;
exports.getObjectId = getObjectId;
exports.getObjectSize = getObjectSize;
exports.requirePackage = requirePackage;

require("source-map-support/register");

var _system = require("./system");

var _logger = _interopRequireDefault(require("./logger"));

var _lodash = _interopRequireDefault(require("lodash"));

var _teen_process = require("teen_process");

var _path = _interopRequireDefault(require("path"));

var _fs2 = _interopRequireDefault(require("fs"));

var _uuid = require("uuid");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const ECMA_SIZES = Object.freeze({
  STRING: 2,
  BOOLEAN: 4,
  NUMBER: 8
});

async function linkGlobalPackage(packageName) {
  try {
    _logger.default.debug(`Linking package '${packageName}'`);

    const cmd = (0, _system.isWindows)() ? 'npm.cmd' : 'npm';
    await (0, _teen_process.exec)(cmd, ['link', packageName], {
      timeout: 20000
    });
  } catch (err) {
    const msg = `Unable to load package '${packageName}', linking failed: ${err.message}`;

    _logger.default.debug(msg);

    if (err.stderr) {
      _logger.default.debug(err.stderr);
    }

    throw new Error(msg);
  }
}

async function requirePackage(packageName) {
  try {
    _logger.default.debug(`Loading local package '${packageName}'`);

    return require(packageName);
  } catch (err) {
    _logger.default.debug(`Failed to load local package '${packageName}': ${err.message}`);
  }

  try {
    const globalPackageName = _path.default.resolve(process.env.npm_config_prefix ?? '', 'lib', 'node_modules', packageName);

    _logger.default.debug(`Loading global package '${globalPackageName}'`);

    return require(globalPackageName);
  } catch (err) {
    _logger.default.debug(`Failed to load global package '${packageName}': ${err.message}`);
  }

  try {
    await linkGlobalPackage(packageName);

    _logger.default.debug(`Retrying load of linked package '${packageName}'`);

    return require(packageName);
  } catch (err) {
    _logger.default.errorAndThrow(`Unable to load package '${packageName}': ${err.message}`);
  }
}

function extractAllProperties(obj) {
  const stringProperties = [];

  for (const prop in obj) {
    stringProperties.push(prop);
  }

  if (_lodash.default.isFunction(Object.getOwnPropertySymbols)) {
    stringProperties.push(...Object.getOwnPropertySymbols(obj));
  }

  return stringProperties;
}

function _getSizeOfObject(seen, object) {
  if (_lodash.default.isNil(object)) {
    return 0;
  }

  let bytes = 0;
  const properties = extractAllProperties(object);

  for (const key of properties) {
    if (typeof object[key] === 'object' && !_lodash.default.isNil(object[key])) {
      if (seen.has(object[key])) {
        continue;
      }

      seen.add(object[key]);
    }

    bytes += getCalculator(seen)(key);

    try {
      bytes += getCalculator(seen)(object[key]);
    } catch (ex) {
      if (ex instanceof RangeError) {
        bytes = 0;
      }
    }
  }

  return bytes;
}

function getCalculator(seen) {
  return function calculator(obj) {
    if (_lodash.default.isBuffer(obj)) {
      return obj.length;
    }

    switch (typeof obj) {
      case 'string':
        return obj.length * ECMA_SIZES.STRING;

      case 'boolean':
        return ECMA_SIZES.BOOLEAN;

      case 'number':
        return ECMA_SIZES.NUMBER;

      case 'symbol':
        return _lodash.default.isFunction(Symbol.keyFor) && Symbol.keyFor(obj) ? Symbol.keyFor(obj).length * ECMA_SIZES.STRING : (obj.toString().length - 8) * ECMA_SIZES.STRING;

      case 'object':
        return _lodash.default.isArray(obj) ? obj.map(getCalculator(seen)).reduce((acc, curr) => acc + curr, 0) : _getSizeOfObject(seen, obj);

      default:
        return 0;
    }
  };
}

function getObjectSize(obj) {
  return getCalculator(new WeakSet())(obj);
}

const OBJECTS_MAPPING = new WeakMap();

function getObjectId(object) {
  if (!OBJECTS_MAPPING.has(object)) {
    OBJECTS_MAPPING.set(object, (0, _uuid.v4)());
  }

  return OBJECTS_MAPPING.get(object);
}

function deepFreeze(object) {
  let propNames;

  try {
    propNames = Object.getOwnPropertyNames(object);
  } catch (ign) {
    return object;
  }

  for (const name of propNames) {
    const value = object[name];

    if (value && typeof value === 'object') {
      deepFreeze(value);
    }
  }

  return Object.freeze(object);
}

function getModuleRootSync(moduleName, filePath) {
  let currentDir = _path.default.dirname(_path.default.resolve(filePath));

  let isAtFsRoot = false;

  while (!isAtFsRoot) {
    const manifestPath = _path.default.join(currentDir, 'package.json');

    try {
      if (_fs2.default.existsSync(manifestPath) && JSON.parse(_fs2.default.readFileSync(manifestPath, 'utf8')).name === moduleName) {
        return currentDir;
      }
    } catch (ign) {}

    currentDir = _path.default.dirname(currentDir);
    isAtFsRoot = currentDir.length <= _path.default.dirname(currentDir).length;
  }

  return null;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,