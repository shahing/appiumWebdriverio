{"version":3,"file":"plugin.js","names":["BasePlugin","newMethodMap","constructor","name","cliArgs","logger","getLogger"],"sources":["../../lib/plugin.js"],"sourcesContent":["import {logger} from '@appium/support';\n\n/**\n * @implements {Plugin}\n */\nclass BasePlugin {\n  /**\n   * Subclasses should use type `import('@appium/types').MethodMap<SubclassName>`.\n   *\n   * This will verify that the commands in the `newMethodMap` property are\n   * valid.  It is impossible to use a generic type param here; the type of this should really\n   * be something like `MethodMap<T extends BasePlugin>` but that isn't a thing TS does.\n   *\n   * @type {import('@appium/types').MethodMap<any>}\n   */\n  static newMethodMap = {};\n\n  /**\n   * @param {string} name\n   * @param {Record<string,unknown>} [cliArgs]\n   */\n  constructor(name, cliArgs = {}) {\n    this.name = name;\n    this.cliArgs = cliArgs;\n    this.logger = logger.getLogger(`Plugin [${name}]`);\n  }\n}\n\nexport default BasePlugin;\nexport {BasePlugin};\n\n/**\n * @typedef {import('@appium/types').Plugin} Plugin\n */\n"],"mappings":";;;;;;;;;AAAA;;AAKA,MAAMA,UAAN,CAAiB;EAUI,OAAZC,YAAY,GAAG,EAAH;;EAMnBC,WAAW,CAACC,IAAD,EAAOC,OAAO,GAAG,EAAjB,EAAqB;IAC9B,KAAKD,IAAL,GAAYA,IAAZ;IACA,KAAKC,OAAL,GAAeA,OAAf;IACA,KAAKC,MAAL,GAAcA,eAAA,CAAOC,SAAP,CAAkB,WAAUH,IAAK,GAAjC,CAAd;EACD;;AApBc;;;eAuBFH,U"}