{"version":3,"file":"idling-resources.js","names":["commands","mobileRegisterIdlingResources","opts","espresso","jwproxy","command","requireOptions","mobileUnregisterIdlingResources","mobileListIdlingResources"],"sources":["../../../lib/commands/idling-resources.js"],"sourcesContent":["import { requireOptions } from '../utils';\n\nconst commands = {};\n\n/**\n * @typedef {Object} IdlingResourcesOptions\n * @property {!string} classNames - The comma-separated list of idling resources class names.\n * Each name must be a full-qualified java class name, like `io.appium.espressoserver.lib.MyIdlingResource`.\n * Each class in the app source must implement a singleton pattern and have a static `getInstance()`\n * method returning the class instance, which implements `androidx.test.espresso.IdlingResource`\n * interface. Read\n * - https://developer.android.com/training/testing/espresso/idling-resource\n * - https://android.jlelse.eu/integrate-espresso-idling-resources-in-your-app-to-build-flexible-ui-tests-c779e24f5057\n * for more details on how to design and use idling resources concept in Espresso.\n */\n\n/**\n * Registers one or more idling resources\n *\n * @param {IdlingResourcesOptions} opts\n * @throws {Error} If there was a failure while parsing options or registering\n * the actual instances\n */\ncommands.mobileRegisterIdlingResources = async function mobileRegisterIdlingResources (opts = {}) {\n  return await this.espresso.jwproxy.command('/appium/execute_mobile/register_idling_resources', 'POST',\n    requireOptions(opts, ['classNames']));\n};\n\n/**\n * Unregisters one or more idling resources\n *\n * @param {IdlingResourcesOptions} opts\n * @throws {Error} If there was a failure while parsing options or unregistering\n * the actual instances\n */\ncommands.mobileUnregisterIdlingResources = async function mobileUnregisterIdlingResources (opts = {}) {\n  return await this.espresso.jwproxy.command('/appium/execute_mobile/unregister_idling_resources', 'POST',\n    requireOptions(opts, ['classNames']));\n};\n\n/**\n * Returns a list of currently registered idling resources\n * or an empty list if no resources have been registered yet.\n *\n * @returns {Array<string>} The list of fully qualified class names\n */\ncommands.mobileListIdlingResources = async function mobileListIdlingResources () {\n  return await this.espresso.jwproxy.command('/appium/execute_mobile/list_idling_resources', 'GET');\n};\n\nexport { commands };\nexport default commands;\n"],"mappings":";;;;;;;AAAA;AAEA,MAAMA,QAAQ,GAAG,CAAC,CAAC;AAAC;AAqBpBA,QAAQ,CAACC,6BAA6B,GAAG,eAAeA,6BAA6B,CAAEC,IAAI,GAAG,CAAC,CAAC,EAAE;EAChG,OAAO,MAAM,IAAI,CAACC,QAAQ,CAACC,OAAO,CAACC,OAAO,CAAC,kDAAkD,EAAE,MAAM,EACnG,IAAAC,qBAAc,EAACJ,IAAI,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;AACzC,CAAC;AASDF,QAAQ,CAACO,+BAA+B,GAAG,eAAeA,+BAA+B,CAAEL,IAAI,GAAG,CAAC,CAAC,EAAE;EACpG,OAAO,MAAM,IAAI,CAACC,QAAQ,CAACC,OAAO,CAACC,OAAO,CAAC,oDAAoD,EAAE,MAAM,EACrG,IAAAC,qBAAc,EAACJ,IAAI,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;AACzC,CAAC;AAQDF,QAAQ,CAACQ,yBAAyB,GAAG,eAAeA,yBAAyB,GAAI;EAC/E,OAAO,MAAM,IAAI,CAACL,QAAQ,CAACC,OAAO,CAACC,OAAO,CAAC,8CAA8C,EAAE,KAAK,CAAC;AACnG,CAAC;AAAC,eAGaL,QAAQ;AAAA"}