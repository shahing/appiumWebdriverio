"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.helpers = exports.default = exports.commands = void 0;
require("source-map-support/register");
var _lodash = _interopRequireDefault(require("lodash"));
var _support = require("appium/support");
var _validate = _interopRequireDefault(require("validate.js"));
var _driver = require("appium/driver");
var _utils = require("../utils");
const commands = {},
  helpers = {},
  extensions = {};
exports.helpers = helpers;
exports.commands = commands;
function assertRequiredOptions(options, requiredOptionNames) {
  if (!_lodash.default.isArray(requiredOptionNames)) {
    requiredOptionNames = [requiredOptionNames];
  }
  const presentOptionNames = _lodash.default.keys(options);
  const missingOptionNames = _lodash.default.difference(requiredOptionNames, presentOptionNames);
  if (_lodash.default.isEmpty(missingOptionNames)) {
    return options;
  }
  throw new Error(`The following options are required: ${JSON.stringify(missingOptionNames)}. ` + `You have only provided: ${JSON.stringify(presentOptionNames)}`);
}
commands.launchApp = async function launchApp() {
  throw new _driver.errors.UnsupportedOperationError('Please create a new session in order to launch the application under test');
};
commands.closeApp = async function closeApp() {
  throw new _driver.errors.UnsupportedOperationError('Please quit the session in order to close the application under test');
};
commands.reset = async function reset() {
  throw new _driver.errors.UnsupportedOperationError('Please quit the session and create a new one ' + 'in order to close and launch the application under test');
};
commands.getClipboard = async function getClipboard() {
  return (await this.adb.getApiLevel()) < 29 ? await this.espresso.jwproxy.command('/appium/device/get_clipboard', 'POST', {}) : await this.adb.getClipboard();
};
commands.mobilePerformEditorAction = async function mobilePerformEditorAction(opts = {}) {
  const {
    action
  } = assertRequiredOptions(opts, ['action']);
  return await this.espresso.jwproxy.command('/appium/device/perform_editor_action', 'POST', {
    action
  });
};
commands.mobileSwipe = async function mobileSwipe(opts = {}) {
  const {
    direction,
    element,
    swiper,
    startCoordinates,
    endCoordinates,
    precisionDescriber
  } = assertRequiredOptions(opts, ['element']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_support.util.unwrapElement(element)}/swipe`, 'POST', {
    direction,
    element,
    swiper,
    startCoordinates,
    endCoordinates,
    precisionDescriber
  });
};
commands.mobileGetDeviceInfo = async function mobileGetDeviceInfo() {
  return await this.espresso.jwproxy.command('/appium/device/info', 'GET');
};
commands.mobileIsToastVisible = async function mobileIsToastVisible(opts = {}) {
  const {
    text,
    isRegexp
  } = opts;
  if (!_support.util.hasValue(text)) {
    throw new _driver.errors.InvalidArgumentError(`'text' argument is mandatory`);
  }
  return await this.espresso.jwproxy.command('/appium/execute_mobile/is_toast_displayed', 'POST', {
    text,
    isRegexp
  });
};
commands.mobileOpenDrawer = async function mobileOpenDrawer(opts = {}) {
  const {
    element,
    gravity
  } = assertRequiredOptions(opts, ['element']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_support.util.unwrapElement(element)}/open_drawer`, 'POST', {
    gravity
  });
};
commands.mobileCloseDrawer = async function mobileCloseDrawer(opts = {}) {
  const {
    element,
    gravity
  } = assertRequiredOptions(opts, ['element']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_support.util.unwrapElement(element)}/close_drawer`, 'POST', {
    gravity
  });
};
commands.mobileSetDate = async function mobileSetDate(opts = {}) {
  const {
    element,
    year,
    monthOfYear,
    dayOfMonth
  } = assertRequiredOptions(opts, ['element', 'year', 'monthOfYear', 'dayOfMonth']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_support.util.unwrapElement(element)}/set_date`, 'POST', {
    year,
    monthOfYear,
    dayOfMonth
  });
};
commands.mobileSetTime = async function mobileSetTime(opts = {}) {
  const {
    element,
    hours,
    minutes
  } = assertRequiredOptions(opts, ['element', 'hours', 'minutes']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_support.util.unwrapElement(element)}/set_time`, 'POST', {
    hours,
    minutes
  });
};
commands.mobileNavigateTo = async function mobileNavigateTo(opts = {}) {
  let {
    element,
    menuItemId
  } = assertRequiredOptions(opts, ['menuItemId', 'element']);
  let menuItemIdAsNumber = parseInt(menuItemId, 10);
  if (_lodash.default.isNaN(menuItemIdAsNumber) || menuItemIdAsNumber < 0) {
    throw new _driver.errors.InvalidArgumentError(`'menuItemId' must be a non-negative number. Found ${menuItemId}`);
  }
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_support.util.unwrapElement(element)}/navigate_to`, 'POST', {
    menuItemId
  });
};
commands.mobileWebAtoms = async function mobileWebAtoms(opts = {}) {
  opts = assertRequiredOptions(opts, ['methodChain']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/web_atoms`, 'POST', opts);
};
commands.getDisplayDensity = async function getDisplayDensity() {
  return await this.espresso.jwproxy.command('/appium/device/display_density', 'GET', {});
};
commands.mobileScrollToPage = async function mobileScrollToPage(opts = {}) {
  const scrollToTypes = ['first', 'last', 'left', 'right'];
  const res = (0, _validate.default)(opts, {
    element: {
      presence: true
    },
    scrollTo: {
      inclusion: {
        within: scrollToTypes,
        message: `"scrollTo" must be one of "${scrollToTypes.join(', ')}" found '%{value}'`
      }
    },
    scrollToPage: {
      numericality: {
        onlyInteger: true,
        greaterThanOrEqualTo: 0,
        message: `"scrollToPage" must be a non-negative integer. Found '%{value}'`
      }
    }
  });
  if (_support.util.hasValue(res)) {
    throw new _driver.errors.InvalidArgumentError(`Invalid scrollTo parameters: ${JSON.stringify(res)}`);
  }
  const {
    element,
    scrollTo,
    scrollToPage,
    smoothScroll
  } = opts;
  if (_support.util.hasValue(scrollTo) && _support.util.hasValue(scrollToPage)) {
    this.log.warn(`'scrollTo' and 'scrollToPage' where both provided. Defaulting to 'scrollTo'`);
  }
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_support.util.unwrapElement(element)}/scroll_to_page`, 'POST', {
    scrollTo,
    scrollToPage,
    smoothScroll
  });
};
commands.mobileBackdoor = async function mobileBackdoor(opts = {}) {
  assertRequiredOptions(opts, ['target', 'methods']);
  const {
    target,
    methods
  } = opts;
  if (target === 'element') {
    assertRequiredOptions(opts, ['elementId']);
  }
  const {
    elementId: targetElement
  } = opts;
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/backdoor`, 'POST', {
    target,
    methods,
    targetElement
  });
};
commands.mobileUiautomator = async function mobileUiautomator(opts = {}) {
  const {
    strategy,
    locator,
    action,
    index
  } = assertRequiredOptions(opts, ['strategy', 'locator', 'action']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/uiautomator`, 'POST', {
    strategy,
    locator,
    index,
    action
  });
};
commands.mobileUiautomatorPageSource = async function mobileUiautomatorPageSource() {
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/uiautomator_page_source`, 'GET');
};
commands.mobileFlashElement = async function mobileFlashElement(opts = {}) {
  const {
    element
  } = assertRequiredOptions(opts, ['element']);
  const {
    durationMillis,
    repeatCount
  } = opts;
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_support.util.unwrapElement(element)}/flash`, 'POST', {
    durationMillis,
    repeatCount
  });
};
commands.mobileClickAction = async function mobileClickAction(opts = {}) {
  const {
    element,
    tapper,
    coordinatesProvider,
    precisionDescriber,
    inputDevice,
    buttonState
  } = assertRequiredOptions(opts, ['element']);
  return await this.espresso.jwproxy.command(`/appium/execute_mobile/${_support.util.unwrapElement(element)}/click_action`, 'POST', {
    tapper,
    coordinatesProvider,
    precisionDescriber,
    inputDevice,
    buttonState
  });
};
commands.updateSettings = async function updateSettings(settings) {
  return await this.espresso.jwproxy.command(`/appium/settings`, 'POST', {
    settings
  });
};
commands.getSettings = async function getSettings() {
  return await this.espresso.jwproxy.command(`/appium/settings`, 'GET');
};
helpers.suspendChromedriverProxy = function suspendChromedriverProxy() {
  this.chromedriver = null;
  this.proxyReqRes = this.espresso.proxyReqRes.bind(this.espresso);
  this.proxyCommand = this.espresso.proxyCommand.bind(this.espresso);
  this.jwpProxyActive = true;
};
commands.mobileStartActivity = async function mobileStartActivity(opts = {}) {
  const appPackage = this.caps.appPackage;
  const {
    appActivity,
    locale,
    optionalIntentArguments,
    optionalActivityArguments
  } = assertRequiredOptions(opts, ['appActivity']);
  return await this.espresso.jwproxy.command(`/appium/device/start_activity`, 'POST', {
    appPackage,
    appActivity,
    locale,
    optionalIntentArguments,
    optionalActivityArguments
  });
};
commands.startActivity = async function startActivity(appPackage, appActivity, appWaitPackage, appWaitActivity) {
  appPackage = appPackage || this.caps.appPackage;
  appWaitPackage = appWaitPackage || appPackage;
  appActivity = (0, _utils.qualifyActivityName)(appActivity, appPackage);
  appWaitActivity = (0, _utils.qualifyActivityName)(appWaitActivity || appActivity, appWaitPackage);
  this.log.debug(`Starting activity '${appActivity}' for package '${appPackage}'`);
  await this.espresso.jwproxy.command(`/appium/device/start_activity`, 'POST', {
    appPackage,
    appActivity
  });
  await this.adb.waitForActivity(appWaitPackage, appWaitActivity);
};
commands.mobileDismissAutofill = async function mobileDismissAutofill(opts = {}) {
  const {
    element
  } = assertRequiredOptions(opts, ['element']);
  await this.espresso.jwproxy.command(`/session/:sessionId/appium/execute_mobile/${_support.util.unwrapElement(element)}/dismiss_autofill`, 'POST', {});
};
Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,