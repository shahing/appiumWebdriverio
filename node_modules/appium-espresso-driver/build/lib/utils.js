"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copyGradleProjectRecursively = copyGradleProjectRecursively;
exports.getPackageInfo = getPackageInfo;
exports.getPackageInfoSync = getPackageInfoSync;
exports.qualifyActivityName = qualifyActivityName;
exports.requireOptions = requireOptions;
exports.updateDependencyLines = updateDependencyLines;
require("source-map-support/register");
var _support = require("appium/support");
var _lodash = _interopRequireDefault(require("lodash"));
var _path = _interopRequireDefault(require("path"));
var _fs2 = _interopRequireDefault(require("fs"));
let PACKAGE_INFO = null;
const MODULE_NAME = 'appium-espresso-driver';
function qualifyActivityName(activityName, packageName) {
  if ([activityName, packageName].some(name => !name || _lodash.default.includes(name, '*'))) {
    return activityName;
  }
  const dotPos = activityName.indexOf('.');
  if (dotPos > 0) {
    return activityName;
  }
  return `${packageName}${dotPos === 0 ? '' : '.'}${activityName}`;
}
async function copyGradleProjectRecursively(sourceBaseDir, targetBaseDir) {
  await _support.fs.walkDir(sourceBaseDir, true, async (itemPath, isDirectory) => {
    const relativePath = _path.default.relative(sourceBaseDir, itemPath);
    const targetPath = _path.default.resolve(targetBaseDir, relativePath);
    const isInGradleBuildDir = `${_path.default.sep}${itemPath}`.includes(`${_path.default.sep}build${_path.default.sep}`);
    if (isInGradleBuildDir) {
      return false;
    }
    if (isDirectory) {
      await (0, _support.mkdirp)(targetPath);
    } else {
      await _support.fs.copyFile(itemPath, targetPath);
    }
    return false;
  });
}
function requireOptions(opts, requiredKeys = []) {
  const missingKeys = _lodash.default.difference(requiredKeys, _lodash.default.keys(opts));
  if (!_lodash.default.isEmpty(missingKeys)) {
    throw new Error(`The following options are required: ${missingKeys}`);
  }
  return opts;
}
function updateDependencyLines(originalContent, dependencyPlaceholder, dependencyLines) {
  const configurationLines = originalContent.split('\n');
  const searchRe = new RegExp(`^\\s*//\\s*\\b${_lodash.default.escapeRegExp(dependencyPlaceholder)}\\b`, 'm');
  const placeholderIndex = configurationLines.findIndex(line => searchRe.test(line));
  if (placeholderIndex < 0) {
    return originalContent;
  }
  const placeholderLine = configurationLines[placeholderIndex];
  const indentLen = placeholderLine.length - _lodash.default.trimStart(placeholderLine).length;
  configurationLines.splice(placeholderIndex + 1, 0, ...dependencyLines.map(line => `${' '.repeat(indentLen)}${line}`));
  return configurationLines.join('\n');
}
async function getPackageInfo() {
  if (PACKAGE_INFO) {
    return PACKAGE_INFO;
  }
  let currentDir = _path.default.dirname(_path.default.resolve(__filename));
  let isAtFsRoot = false;
  while (!isAtFsRoot) {
    const manifestPath = _path.default.join(currentDir, 'package.json');
    try {
      if (await _support.fs.exists(manifestPath)) {
        const manifestPayload = JSON.parse(await _support.fs.readFile(manifestPath, 'utf8'));
        if (manifestPayload.name === MODULE_NAME) {
          PACKAGE_INFO = {
            manifestPath,
            manifestPayload
          };
          return PACKAGE_INFO;
        }
      }
    } catch (ign) {}
    currentDir = _path.default.dirname(currentDir);
    isAtFsRoot = currentDir.length <= _path.default.dirname(currentDir).length;
  }
  throw new Error(`Cannot find the root folder of the ${MODULE_NAME} Node.js module`);
}
function getPackageInfoSync() {
  if (PACKAGE_INFO) {
    return PACKAGE_INFO;
  }
  let currentDir = _path.default.dirname(_path.default.resolve(__filename));
  let isAtFsRoot = false;
  while (!isAtFsRoot) {
    const manifestPath = _path.default.join(currentDir, 'package.json');
    try {
      if (_fs2.default.existsSync(manifestPath)) {
        const manifestPayload = JSON.parse(_fs2.default.readFileSync(manifestPath, 'utf8'));
        if (manifestPayload.name === MODULE_NAME) {
          PACKAGE_INFO = {
            manifestPath,
            manifestPayload
          };
          return PACKAGE_INFO;
        }
      }
    } catch (ign) {}
    currentDir = _path.default.dirname(currentDir);
    isAtFsRoot = currentDir.length <= _path.default.dirname(currentDir).length;
  }
  throw new Error(`Cannot find the root folder of the ${MODULE_NAME} Node.js module`);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,